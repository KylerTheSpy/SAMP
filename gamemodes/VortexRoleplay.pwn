/*
	Script created by FreddoX / CalgonX.
*/

#include <a_samp>
#include <a_http>
#include <streamer>
#include <zcmd>
#include <gtazones>
#include <djson>
#include <Dini>
#include <Slice_GeoIP>

/*native file_move(file[],destination[]);
native file_delete(file[]);
native file_create(file[]);
native file_write(file[],text[]);
native file_read(file[],storage[]);
native file_log();*/

// Forwards
forward CloseLspdGate();
forward IdleKick();
forward DynamicWeather();
forward PickupMessages();
forward RandomEx(min, max);
forward PurchaseCar(playerid, carid, price, slotid);
forward MinutesToSeconds(minutes);
forward ClientAgreement(playerid);
forward PrisonGateTimer();
forward CloseDoor();
forward RefreshNewbieChatForPlayer(playerid);
forward MinutesToHours(minutes);
forward GetOwnedCarMods(playerid);
forward NearByMessage(playerid, colour, string[]);
forward NearByMessageEx(playerid, color, string[], Float: range);
forward LiteralGroupMessage(group, colour, string[]);
forward SetPlayerPosEx(playerid, Float: posx, Float: posy, Float: posz, interior, virtualworld);
forward IsSeatOccupied(vehicleid, seatid);
forward SendToAdmins(colour, string[], requireduty);
forward QuizText(string[]);
forward GMXPrep(playerid, reason[]);
forward AntiC();
forward ResetPlayerWeaponsEx(playerid);
forward DoGMX();
forward RefreshMaterials(playerid);
forward UntazePlayer(playerid);
forward OneMinutePublic();
forward IsDateInThePast(day, month, year);
forward SavePlayerData(playerid);
forward SaveGeneralData();
forward UncuffPlayer(playerid);
forward GivePlayerWeaponEx(playerid, weapon);
forward ClearCriminalRecord(playerid);
forward CloseImpoundGate();
forward MessageToEventPlayers(colour, string[]);
forward GroupMessage(playerid, colour, string[]);
forward GivePlayerSavedWeapons(playerid);
forward IsPlayerInInvalidNosVehicle(playerid);
forward SecondsToMinutes(seconds);
forward RegisterPlayer(playerid, password[]);
forward OneSecondPublic();
forward OnPlayerLoginAttempt(playerid, password[]);
forward	OnGeoIPResponse(iIndex, iResponseCode, const szData[]);

#define chrtolower(%1) \
        (((%1) > 0x40 && (%1) <= 0x5A) ? ((%1) | 0x20) : (%1))
        
#define SpeedCheck(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1)) *%3*1.6)

#define 				GetPlayerCountryName(%0)			g_szCountryInfo[g_iPlayerCountryCode[%0]][e_szCountryName]

#define 				CITY_HALL_OBJECTS   				30

#define 				MAX_GROUPS 							20
#define 				MAX_HOUSES 							1000
#define 				MAX_BUSINESSES                      950
#define 				MAX_JOBS 							10
#define                 MAX_SPIKES                          5
#define                 MAX_SPEED_HACK_WARNINGS             4
#define                 MAX_STUDIO_OBJECTS                  37
#define                 MAX_WEAPON_HACK_WARNINGS            2

#define 				STONED_TIME 						61
#define 				CAR_MOD_DELAY_TIME 					61
#define 				LAWYER_RELOAD_TIME 					241
#define 				DETECTIVE_COOLDOWN_TIME 			31
#define 				MATRUN_INABILITY_TIME 				61
#define 				VERSION 							"Vortex Roleplay"
#define 				FISH_INABILITY_TIME 				901

#define 				VEHICLES_FILE 						"Vehicles.json"

main()
{
}

#define GREEN 			0x21DD00FF
#define RED 			0xE60000FF
#define YELLOW 			0xFFFF00FF
#define ORANGE 			0xF97804FF
#define LIGHTRED 		0xFF8080FF
#define NICESKY 		0x00C2ECFF
#define PURPLE 			0xB360FDFF
#define DEPARTMENT_CHAT 0xBDF38BFF
#define VIP_CHAT        0xE1FCFFFF
#define PLAYER_COLOR 	0xFFFFFFFF
#define BLUE 			0x1229FAFF
#define GROUP_CHAT      0xC0FAFAFF
#define LIGHTGREEN 		0x38FF06FF
#define RADIO_CHAT 		0xBCC1F3FF
#define DARKPINK 		0xE100E1FF
#define PLAYERCOM       0xf7fd00FF
#define DARKGREEN 		0x008040FF
#define ANNOUNCEMENT 	0xa9c4e4ff
#define GREY 			0xCECECEFF
#define PINK 			0xD52DFFFF
#define DARKGREY    	0x626262FF
#define OOC_CHAT        0xAFD9FAFF
#define NEWBIE_CHAT     0xDBE1E6FF
#define AQUAGREEN   	0x03D687FF
//#define ADMINBLUE 		0x99FFFFAA
#define ADMINORANGE 	0xF6970CAA
#define WHITE 			0xFFFFFFFF
#define BLACK           0x000000FF

const Float:INF_FLOAT=Float:0x7F800000;

new Float: SpawnX, Float: SpawnY, SpawnedJobs, GlobalWeather, Float: SpawnZ, EventSkin, SpawnInt, SpawnWorld, NoobCash = 15000, AdCanBePlaced = 50;
new UnconfirmedSave[MAX_PLAYERS], MarketGate, MarketGateOpen, NPCs, dGateStatus[3];
new Anticheat, CarCount, OwnedCarCount, CurrentEvent, Float: OwnedCarSpawnX, Float: OwnedCarSpawnY, Float: OwnedCarSpawnZ;
new SpawnedHouses, SpawnedBusinesses, Float: HospitalSpawnX, Float: HospitalSpawnY, Float: HospitalSpawnZ, HospitalInt;
new EC, Float: ArrestPosX, Float: ArrestPosY, Float: ArrestPosZ, BonusCar, Float:Positions[5][3];
new CurGMX, Float: Prison1X, Float: Prison1Y, Float: Prison1Z, Float: Prison2X, Float: Prison2Y, Float: Prison2Z;
new Prison1Int, Prison1World, Prison2Int, Prison2World, StudioObjectsSpawned;
new EventWeapon1, EventWeapon2, PrisonGate, EventWeapon3, EventWeapon4, EventWeapon5;
new Float: EventX, SWATEnabled, Float: EventY, Float: EventZ, EventInt, EventWorld, Float: LockerPosX, Float: LockerPosY, Float: LockerPosZ, LockerPosInt;
new EventHP, EventArmour, Text: CellPhoneTextDrawInVehicle, dGates[3], Float: LockerPos2X, Float: LockerPos2Y, Float: LockerPos2Z, LockerPos2Int;
new AdminSpawned[MAX_VEHICLES], PrisonGateOpen, SpawnedVehicles, ArrestPosPickup, oocenabled, Spotlight = -1;
new lspdgate, QuizQuestion[128], QuizAnswer[128], ActiveQuiz, CGate1, CGate2, CGateOpen;
new Float: DropCarX, GateOpen, Float: DropCarY, Float: DropCarZ, NewbieEnabled = 1, Float: FishX, Float: FishY, Float: FishZ;
new Float: BankIntX, Float: BankIntY, Float: BankIntZ, Float: BankExtX, Float: BankExtY, Float: BankExtZ, BankIntID, BankPickupID;
new Float:PlayerPos[MAX_PLAYERS][6], PlayersOn, Tax, TotalConnections, MaxLoggedIn, MaxRegistered, MaxVisitors;
new CityHall, Float: HospitalSpawnX2, ReportStatus = 0, Float: HospitalSpawnY2, Float: HospitalSpawnZ2, HospitalInt2;
new ImpoundOpen, ImpoundGate, Text: AnimationTextDraw, Text: SprunkTextDraw, Text: ExitTextdraw; //Text:Textdraw1,
new Text:CellPhoneTextDraw, Float: Harvest5X, Float: Harvest5Y, Float: Harvest5Z, g_iPlayerCountryCode[MAX_PLAYERS];
new Float: Harvest1X, Float: Harvest1Y, Float: Harvest1Z, Float: Harvest2X, Float: Harvest2Y, Float: Harvest2Z, Float: Harvest3X, Float: Harvest3Y, Float: Harvest3Z, Float: Harvest4X, Float: Harvest4Y, Float: Harvest4Z;

new LSPDDoor1, LSPDDoor2, LSPDDoor3, LSPDDoor4, LSPDDoor5, LSPDDoor6, LSPDDoor1Open = 0, LSPDDoor2Open = 0, LSPDDoor3Open = 0;

new stock AFKTimer, WeatherTimer, OneMinuteTimer, AntiCheatTimer, GeneralDataTimer, PickupsTimer, RespawnTimer, OneSecondTimer;

enum VehicleData
{
	CarModel,
	CarColour1,
	CarColour2,
	CarNos,
	CarGroup,
	Float: CarPosX,
	Float: CarPosY,
	Float: CarPosZ,
	Float: CarZAngle,
	GameID,
};

enum Spikes
{
	Float:sX,
	Float:sY,
	Float:sZ,
	Float:sXRot,
	Float:sYRot,
	Float:sZRot,
	sObjectID
}

enum GroupData
{
	GroupName[255],
	CommandTypes,
	RankName0[255],
	RankName1[255],
	RankName2[255],
	RankName3[255],
	RankName4[255],
	RankName5[255],
	RankName6[255],
	Skin0,
	SavedCrack,
	SavedPot,
	Skin1,
	Skin2,
	Skin3,
	Skin4,
	Skin5,
	Skin6,
	HQInteriorID,
	Float: HQInteriorX,
	ChatDisabled,
	Float: HQInteriorY,
	Float: HQInteriorZ,
	HQExteriorID,
	Float: HQExteriorX,
	Float: HQExteriorY,
	Float: HQExteriorZ,
	Float: SafeX,
	Float: SafeY,
	Float: SafeZ,
	SafeInteriorID,
	SafeWorld,
	SafeMoney,
	DisbandHour,
	DisbandMinute,
	DisbandDay,
	DisbandMonth,
	MOTD[255],
	DisbandYear,
	SafePickupID,
	HQPickupID,
	HQLock,
};

enum JobData
{
	JobName[255],
	Float: JobJoinPosX,
	Float: JobJoinPosY,
	Float: JobJoinPosZ,
	JobJoinPosWorld,
	JobJoinPosPickupID,
	JobJoinPosInterior,
	Float: JobMiscLocationOneX,
	Float: JobMiscLocationOneY,
	Float: JobMiscLocationOneZ,
	JobMiscLocationOneWorld,
	JobMiscLocationOnePickupID,
	JobMiscLocationOneInterior,
	Float: JobMiscLocationTwoX,
	Float: JobMiscLocationTwoY,
	Float: JobMiscLocationTwoZ,
	JobMiscLocationTwoWorld,
	JobMiscLocationTwoPickupID,
	JobMiscLocationTwoInterior,
	JobMiscLocationOneMessage[255],
	JobMiscLocationTwoMessage[255],
	JobType,
};


new UnmodifiableVehicles[29] =
{
	581,523,462,521,463,522,461,448,468,586,
    509,481,510,472,473,493,595,484,430,453,
    452,446,454,590,569,537,538,570,449
};

enum BusinessData
{
	Float: bExteriorX,
	Float: bExteriorY,
	Float: bExteriorZ,
	bExteriorID,
	Float: bInteriorX,
	Float: bInteriorY,
	Float: bInteriorZ,
	bInteriorID,
	bType,
	bVault,
	bPrice,
	bProductPrice1,
	bProductPrice2,
	bProductPrice3,
	bProductPrice4,
	bProductPrice5,
	bProductPrice6,
	bProductPrice7,
	SupplyStatus,
	bProductPrice8,
	bProductPrice9,
	bProductPrice10,
	bProductPrice11,
	bProductPrice12,
	bProductPrice13,
	bProductPrice14,
	bSupplies,
	bOwner[255],
	bSupplyStatus,
	bLockStatus,
	bPickupID,
	bName[255],
};

enum SpecData
{
	Float: SpecPlayerX,
	Float: SpecPlayerY,
	Float: SpecPlayerZ,
	SpecPlayerInterior,
	Float: SpecPlayerAngle,
	SpecPlayerWorld,
	SpecSpectatingPlayer,
	SpecSpectatingState,
};

enum HouseData
{
	hInteriorID,
	Float: hInteriorX,
	Float: hInteriorY,
	Float: hInteriorZ,
	HousePrice,
	hExteriorID,
	Float: hExteriorX,
	Float: hExteriorY,
	HouseCocaine,
	HousePot,
	HouseMaterials,
	WeaponSlot1,
	WeaponSlot2,
	WeaponSlot3,
	Float: hExteriorZ,
	VaultMoney,
	HPickupID,
	hOwner[255],
	LockStatus,
};

enum PlayerStatistics
{
	Password[255],
	AdminLevel,
	MedicDuty,
	Float: LastX,
	NineOneOneStep,
	WeaponRefund,
	Float: LastY,
	InterviewPowers,
	FightBox,
	FightKungfu,
	FightKneehead,
	FightGrabkick,
	IsInAnimation,
	FightElbow,
	AnticheatWarns,
	Float: LastZ,
	ResetTimer,
	SpeedHacksWarn,
	HasRadio,
	LawyerReloadTime,
	LockedCar,
	LockedCar2,
	LockedCar3,
	Detecting,
	HasMapApp,
	RPTutStep,
	AnsweredQuizQuestions,
	HasRadioApp,
	HasAdApp,
	HasPagesApp,
	PendingProposal,
	Harvesting,
	PendingDivorce,
	ToggledRadio,
	DetectiveCooldown,
	ACWarnTime,
	VipRank,
	CarBeingCarried,
	CarPriceCarried,
	TieTimer,
	LastWorld,
	CollegeMedia,
	CollegeLaw,
	CollegeEng,
	CollegeMath,
	CollegeChem,
	PhoneStat,
	ServerTut,
	WalkieTalkie,
	WalkieFrequency,
	ReportText[128],
	LastInterior,
	ToggedOOC,
	Guarding,
	GuardOffer,
	GuardPrice,
	FindingCar,
	ActiveCrimeReport[128],
	IsHacker,
	LastSkin,
	Rope,
	Rags,
	Tied,
	SpeedHackWarnTime,
	HasJetpack,
	TiedTime,
	Float: LastHealth,
	Float: LastArmour,
	LastLoginMinute,
	LastLoginHour,
	LastLoginDay,
	LastLoginMonth,
	PotEffect,
	HouseInterior,
	BusinessInterior,
	HouseExterior,
	PhoneN,
	Map,
	Calling,
	CarLinkID,
	Car2LinkID,
	Car3LinkID,
	ActiveReport,
	BeingCalled,
	CallConnectingTime,
	PlayingHours,
	BusinessExterior,
	ReportingPlayer,
	LastLoginYear,
	Float: CarX,
	CarPriceBeingCarried,
	Float: CarY,
	Float: CarZ,
	Float: Car2X,
	Float: Car2Y,
	Float: Car2Z,
	Float: Car3X,
	Float: Car3Y,
	Float: Car3Z,
	PlayerCarModel,
	PlayerCarModel2,
	PlayerCarModel3,
	Float: CarZAngle,
	Float: Car2ZAngle,
	Float: Car3ZAngle,
	CarCol1,
	CarCol2,
	Car2Col1,
	Car2Col2,
	Car3Col1,
	Car3Col2,
	LastIP[21],
	House,
	Banned,
	Muted,
	CrackEffect,
	CellphoneConsole,
	Float: hExtX,
	Float: hExtY,
	Float: hExtZ,
	Float: hIntX,
	Float: hIntY,
	Float: hIntZ,
	hIntID,
	hExtID,
	HasSprayCans,
	ToggedQUIZ,
	Float: bExtX,
	Float: bExtY,
	Float: bExtZ,
	Float: bIntX,
	Float: bIntY,
	Float: bIntZ,
	bIntID,
	bExtID,
	InHouse,
	InGroupHQ,
	Money,
	Group,
	IsAtEvent,
	GroupRank,
	PendingHandshake,
	PendingHandshakeStyle,
	CanUseNewbie,
	ToggedVIP,
	WepSlot0,
	ToggedTester,
	SpotlightEffect,
	CarModDelay,
	WepSlot1,
	Job,
	Authenticated,
	InBusiness,
	WepSlot2,
	WepSlot3,
	GotInCopCar,
	WepSlot4,
	BankMoney,
	WepSlot5,
	WepSlot6,
	CompleteRun,
	LoginAttempts,
	WepSlot7,
	WepSlot8,
	WepSlot9,
	WepSlot10,
	WepSlot11,
	Warning1[255],
	Warning2[255],
	Warning3[255],
	AdminName[255],
	Speedo,
	NormalName[255],
	Note[255],
	PhoneBook,
	TicketPrice,
	Ticketing,
	BeingTicketed,
	Blindfolded,
	AdminSkin,
	PendingBETAInvite,
	ToggedRAGE,
	GivingSlot,
	ToggedRadio,
	Identity,
	Gagged,
	ReportBanStatus,
	PMsEnabled,
	MatrunsExecuted,
	CheckBalance,
	MeActions,
	AdsPlaced,
	PreLoadedAnims,
	AchievementRank,
	PINAuth,
	PendingCarReceival,
	Accent[255],
	AttendingBackupCall,
	PINUnauthedTime,
	SniperRecoilEffect,
	BeingSpyedOnBy,
	BeingDraggedBy,
	Tester,
 	PortableRadio,
 	CarPaintJobID,
 	Car2PaintJobID,
 	Car3PaintJobID,
	LastKiller,
	RequestingBackup,
	FindingHouse,
	Age,
	AdminPIN,
	AFKStat,
	HadSprunk,
	Gender,
	FailedHits,
	SupplyT,
	PhoneCredit,
	SuccessfulHits,
	PrisonDuration,
	CantFish,
	PlayerSkinSlot1,
	PlayerSkinSlot2,
	StonedEffect,
	PlayerSkinSlot3,
	FishAttempts,
	OnPhoneTime,
	CollectedFish,
	BankStatus,
	PrisonID,
	SpamCount,
	AdminDuty,
	PendingInvite,
	Cocaine,
	Pot,
	BaseballBatCount,
	nMuted,
	oMuted,
	KnifeCount,
	CopDuty,
	Contract[255],
	AdminActions,
	MarriedTo[255],
	SecondsLoggedIn,
	HealPrice,
	AttemptingToHeal,
	ContractPrice,
	ModShop,
	AssigningHitTo,
	PlayerToAssasinate,
	BeingAssasinated,
	Tutorial,
	Tazed,
	OwnedCarModSlot0,
	OwnedCarModSlot1,
	OwnedCarModSlot2,
	OwnedCarModSlot3,
	OwnedCarModSlot4,
	OwnedCarModSlot5,
	OwnedCarModSlot6,
	OwnedCarModSlot7,
	OwnedCarModSlot8,
	OwnedCarModSlot9,
	OwnedCarModSlot10,
	OwnedCarModSlot11,
	OwnedCarModSlot12,
	OwnedCarModSlot13,
	Car2OwnedCarModSlot0,
	Car2OwnedCarModSlot1,
	Car2OwnedCarModSlot2,
	Car2OwnedCarModSlot3,
	Car2OwnedCarModSlot4,
	Car2OwnedCarModSlot5,
	Car2OwnedCarModSlot6,
	Car2OwnedCarModSlot7,
	Car2OwnedCarModSlot8,
	Car2OwnedCarModSlot9,
	Car2OwnedCarModSlot10,
	Car2OwnedCarModSlot11,
	Car2OwnedCarModSlot12,
	Car2OwnedCarModSlot13,
	Car3OwnedCarModSlot0,
	Car3OwnedCarModSlot1,
	Car3OwnedCarModSlot2,
	Car3OwnedCarModSlot3,
	Car3OwnedCarModSlot4,
	Car3OwnedCarModSlot5,
	Car3OwnedCarModSlot6,
	Car3OwnedCarModSlot7,
	Car3OwnedCarModSlot8,
	Car3OwnedCarModSlot9,
	Car3OwnedCarModSlot10,
	Car3OwnedCarModSlot11,
	Car3OwnedCarModSlot12,
	Car3OwnedCarModSlot13,
	Materials,
	Cuffed,
	InabilityToMatrun,
	InabilityToDropCar,
	HospitalTime,
	Hospitalized,
	MatrunInabilityDuration,
	TutorialStep,
	CriminalOffences,
	MaterialPackages,
	Checkpoint,
	Business,
	TearGasEffect,
	Offence1[255],
	Offence2[255],
	Offence3[255],
	Offence4[255],
	Offence5[255],
	Offence6[255],
	LastCarID,
};

enum Ranks
{
	Rank1[255],
	Rank2[255],
	Rank3[255],
	Rank4[255],
	Rank5[255],
};

new CityHallObjects[CITY_HALL_OBJECTS];
new StudioObjects[MAX_STUDIO_OBJECTS];
new Houses[MAX_HOUSES][HouseData];
new Businesses[MAX_BUSINESSES][BusinessData];
new OOCRanks[Ranks];
new Jobs[MAX_JOBS][JobData];
new SpikeStrips[MAX_SPIKES][Spikes];
new Spectator[MAX_PLAYERS][SpecData];
new Groups[MAX_GROUPS][GroupData];
new Player[MAX_PLAYERS][PlayerStatistics];
new Vehicles[MAX_VEHICLES][VehicleData];

new WeaponNames[47][] =
{
	"0 - Fists", "1 - Brass Knuckles", "2 - Golf Club", "3 - Nite Stick", "4 - Knife", "5 - Baseball Bat", "6 - Shovel", "7 - Pool Cue", "8 - Katana", "9 - Chainsaw", "10 - Purple Dildo", "11 - Small White Vibrator", "12 - Large White Vibrator", "13 - Silver Vibrator",
	"14 - Flowers", "15 - Cane", "16 - Grenade", "17 - Tear Gas", "18 - Molotov Cocktail", "19 - Jetpack", "20 - Nothing", "21 - Nothing", "22 - Colt 45 (9mm)", "23 - Silenced Pistol", "24 - Desert Eagle", "25 - Pump Action Shotgun", "26 - Sawn-off Shotgun", "27 - SPAS-12 (Combat Shotgun",
	"28 - Micro SMG", "29 - MP5", "30 - AK47", "31 - M4A1", "32 - Tec-9", "33 - Country Rifle", "34 - Sniper Rifle", "35 - Rocket Launcher", "36 - HS Rocket Launcher", "37 - Flamethrower", "38 - Minigun", "39 - Satchel Charge", "40 - Detonator", "41 - Spraycan", "42 - Fire Extinguisher",
	"43 - Camera", "44 - Nightvision Goggles", "45 - Thermal Goggles", "46 - Parachute"
};

new VehicleNames[212][] =
{
	"400 - Landstalker",   "401 - Bravura",   "402 - Buffalo",   "403 - Linerunner",   "404 - Pereniel",   "405 - Sentinel",   "406 - Dumper",   "407 - Firetruck",   "408 - Trashmaster",   "409 - Stretch",
	"410 - Manana",   "411 - Infernus",   "412 - Voodoo",   "413 - Pony",   "414 - Mule",   "415 - Cheetah",   "416 - Ambulance",   "417 - Leviathan",   "418 - Moonbeam",   "419 - Esperanto",   "420 - Taxi",
	"421 - Washington",   "422 - Bobcat",   "423 - Mr Whoopee",   "424 - BF Injection",   "425 - Hunter",   "426 - Premier",   "427 - Enforcer",   "428 - Securicar",   "429 - Banshee",   "430 - Predator",
	"431 - Bus",   "432 - Rhino",   "433 - Barracks",   "434 - Hotknife",   "435 - Trailer",   "436 - Previon",   "437 - Coach",   "438 - Cabbie",   "439 - Stallion",   "440 - Rumpo",   "441 - RC Bandit",	"442 - Romero",
	"443 - Packer",   "444 - Monster",   "445- Admiral",   "446 - Squalo",   "447 - Seasparrow",   "448 - Pizzaboy",   "449 - Tram",   "450 - Trailer",   "451 - Turismo",   "452 - Speeder",   "453 - Reefer",   "454 - Tropic",   "455 - Flatbed",
	"456 - Yankee",   "457 - Caddy",   "458 - Solair",   "459 - Berkley's RC Van",   "460 - Skimmer",   "461 - PCJ-600",   "462 - Faggio",   "463 - Freeway",   "464 - RC Baron",   "465 - RC Raider",
	"466 - Glendale",   "467 - Oceanic",   "468 - Sanchez",   "469 - Sparrow",   "470 - Patriot",   "471 - Quad",   "472 - Coastguard",   "473 - Dinghy",   "474 - Hermes",   "475 - Sabre",   "476 - Rustler",
	"477 - ZR350",   "478 - Walton",   "479 - Regina",   "480 - Comet",   "481 - BMX",   "482 - Burrito",   "483 - Camper",   "484 - Marquis",   "485 - Baggage",   "486 - Dozer",   "487 - Maverick",   "488 - News Chopper",
	"489 - Rancher",   "490 - FBI Rancher",   "491 - Virgo",   "492 - Greenwood",   "493 - Jetmax",   "494 - Hotring",   "495 - Sandking",   "496 - Blista Compact",   "497 - Police Maverick",
	"498 - Boxville",   "499 - Benson",   "500 - Mesa",   "501 - RC Goblin",   "502 - Hotring Racer",   "503 - Hotring Racer",   "504 - Bloodring Banger",   "505 - Rancher",   "506 - Super GT",
	"507 - Elegant",   "508 - Journey",   "509 - Bike",   "510 - Mountain Bike",   "511 - Beagle",   "512 - Cropdust",   "513 - Stunt",   "514 - Tanker",   "515 - RoadTrain",   "516 - Nebula",   "517 - Majestic",
	"518 - Buccaneer",   "519 - Shamal",   "520 - Hydra",   "521 - FCR-900",   "522 - NRG-500",   "523 - HPV1000",   "524 - Cement Truck",   "525 - Tow Truck",   "526 - Fortune",   "527 - Cadrona",   "528 - FBI Truck",
	"529 - Willard",   "530 - Forklift",   "531 - Tractor",   "532 - Combine",   "533 - Feltzer",   "534 - Remington",   "535 - Slamvan",   "536 - Blade",   "537 - Freight",   "538 - Streak",   "539 - Vortex",   "540 - Vincent",
	"541 - Bullet",   "542 - Clover",   "543 - Sadler",   "544 - Firetruck",   "545 - Hustler",   "546 - Intruder",   "547 - Primo",   "548 - Cargobob",   "549 - Tampa",   "550 - Sunrise",   "551 - Merit",   "552 - Utility",
	"553 - Nevada",   "554 - Yosemite",   "555 - Windsor",   "556 - Monster",   "557 - Monster",   "558 - Uranus",   "559 - Jester",   "560 - Sultan",   "561 - Stratum",   "562 - Elegy",   "563 - Raindance",   "564 - RC Tiger",
	"565 - Flash",   "566 - Tahoma",   "567 - Savanna",   "568 - Bandito",   "569 - Freight",   "570 - Trailer",   "571 - Kart",   "572 - Mower",   "573 - Duneride",   "574 - Sweeper",   "575 - Broadway",
	"576 - Tornado",   "577 - AT-400",   "578 - DFT-30",   "579 - Huntley",   "580 - Stafford",   "581 - BF-400",   "582 - Newsvan",   "583 - Tug",   "584 - Trailer",   "585 - Emperor",   "586 - Wayfarer",
	"587 - Euros",   "588 - Hotdog",   "589 - Club",   "590 - Trailer",   "591 - Trailer",   "592 - Andromada",   "593 - Dodo",   "594 - RC Cam",   "595 - Launch",   "596 - Police Car (LSPD)",   "597 - Police Car (SFPD)",
	"598 - Police Car (LVPD)",   "599 - Police Ranger",   "600 - Picador",   "601 - S.W.A.T. Van",   "602 - Alpha",   "603 - Phoenix",   "604 - Glendale",   "605 - Sadler",   "606 - Luggage Trailer A",
	"607 - Luggage Trailer B",   "608 - Stair Trailer",   "609 - Boxville",   "610 - Farm Plow",   "611 - Utility Trailer"
};

AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
	#pragma unused a
}

PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}

public OnGameModeInit()
{




	djson_GameModeInit();
	AntiDeAMX();

	new hour, minute, second;
	print("[system] Please wait whilst the script initiates...");
	
	if(! fexist("Logs/AdminActions.log"))
	{
		dini_Create("Logs/AdminActions.log");
	}
	
	if(! fexist("Logs/PMchat.log"))
	{
		dini_Create("Logs/PMchat.log");
	}

	if(! fexist("Logs/OOCChat.log"))
	{
		dini_Create("Logs/OOCChat.log");
	}

	if(! fexist("Logs/ICChat.log"))
	{
		dini_Create("Logs/ICChat.log");
	}
	
	gettime(hour, minute, second);
	#pragma unused minute
	#pragma unused second

	UsePlayerPedAnims();
	EnableStuntBonusForAll(0);
	DisableInteriorEnterExits();
	LoadFilesIntoVars();

	SetGameModeText(VERSION);
	
	SetWorldTime(hour);
	
	// TRAIN
	AddStaticVehicle(538, -1946.0692, 183.2777, 26.7534, 355.7218, 24, 77);

	// Removed, please feel free to re-add this whenever you have a web URL to set folks!
	/*Textdraw1 = TextDrawCreate(1.000000,433.000000,"www.google.net");
	TextDrawAlignment(Textdraw1, 0);
	TextDrawBackgroundColor(Textdraw1, 0x000000ff);
	TextDrawFont(Textdraw1, 2);
	TextDrawLetterSize(Textdraw1, 0.499999,1.100000);
	TextDrawColor(Textdraw1, 0xffffffff);
	TextDrawSetOutline(Textdraw1, 1);
	TextDrawSetProportional(Textdraw1, 1);
	TextDrawSetShadow(Textdraw1, 1);*/

	// Phone Answer (inside vehicle)
	CellPhoneTextDrawInVehicle = TextDrawCreate(610.0, 400.0, "~r~ ~k~~VEHICLE_TURRETRIGHT~ ~w~to answer the call.");
	TextDrawUseBox(CellPhoneTextDrawInVehicle, 0);
	TextDrawFont(CellPhoneTextDrawInVehicle, 2);
	TextDrawSetShadow(CellPhoneTextDrawInVehicle, 0);
    TextDrawSetOutline(CellPhoneTextDrawInVehicle, 1);
    TextDrawBackgroundColor(CellPhoneTextDrawInVehicle, 0x000000FF);
    TextDrawColor(CellPhoneTextDrawInVehicle, 0xFFFFFFFF);
    TextDrawAlignment(CellPhoneTextDrawInVehicle, 3);

	// Phone Answer (out of vehicle)
	CellPhoneTextDraw = TextDrawCreate(610.0, 400.0, "~r~~k~~PED_DUCK~ ~w~to answer the call.");
	TextDrawUseBox(CellPhoneTextDraw, 0);
	TextDrawFont(CellPhoneTextDraw, 2);
	TextDrawSetShadow(CellPhoneTextDraw, 0);
    TextDrawSetOutline(CellPhoneTextDraw, 1);
    TextDrawBackgroundColor(CellPhoneTextDraw, 0x000000FF);
    TextDrawColor(CellPhoneTextDraw, 0xFFFFFFFF);
    TextDrawAlignment(CellPhoneTextDraw, 3);
    
     // Animation
	AnimationTextDraw = TextDrawCreate(610.0, 400.0, "~r~~k~~PED_JUMPING~ ~w~ to stop the animation.");
	TextDrawUseBox(AnimationTextDraw, 0);
	TextDrawFont(AnimationTextDraw, 2);
	TextDrawSetShadow(AnimationTextDraw, 0);
    TextDrawSetOutline(AnimationTextDraw, 1);
    TextDrawBackgroundColor(AnimationTextDraw, 0x000000FF);
    TextDrawColor(AnimationTextDraw, 0xFFFFFFFF);
    TextDrawAlignment(AnimationTextDraw, 3);
    
     // Sprunk
	SprunkTextDraw = TextDrawCreate(610.0, 400.0, "~r~~k~~PED_FIREWEAPON~ ~w~ to drink the Sprunk ~r~~k~~VEHICLE_ENTER_EXIT~ ~w~ to drop the Sprunk.");
	TextDrawUseBox(SprunkTextDraw, 0);
	TextDrawFont(SprunkTextDraw, 2);
	TextDrawSetShadow(SprunkTextDraw, 0);
    TextDrawSetOutline(SprunkTextDraw, 1);
    TextDrawBackgroundColor(SprunkTextDraw, 0x000000FF);
    TextDrawColor(SprunkTextDraw, 0xFFFFFFFF);
    TextDrawAlignment(SprunkTextDraw, 3);

    // Exit
	ExitTextdraw = TextDrawCreate(610.0, 400.0, "Go to the door and press ~r~ ~k~~PED_DUCK~ ~w~ to exit the building.");
	TextDrawUseBox(ExitTextdraw, 0);
	TextDrawFont(ExitTextdraw, 2);
	TextDrawSetShadow(ExitTextdraw, 0);
    TextDrawSetOutline(ExitTextdraw, 1);
    TextDrawBackgroundColor(ExitTextdraw, 0x000000FF);
    TextDrawColor(ExitTextdraw, 0xFFFFFFFF);
    TextDrawAlignment(ExitTextdraw, 3);
    
	InitVehicles();
	InitHouses();
	InitBusinesses();
	InitJobs();
	InitGroups();

	ShowPlayerMarkers(0);

	GeneralDataTimer = SetTimer("SaveGeneralData", 1800000, true);
	PickupsTimer = SetTimer("PickupMessages", 1500, true);
	AFKTimer = SetTimer("IdleKick", 1200000, 1);
	AntiCheatTimer = SetTimer("AntiC", 1000, true);
	WeatherTimer = SetTimer("DynamicWeather", 7200000, true);
	OneSecondTimer = SetTimer("OneSecondPublic", 1000, true);
	OneMinuteTimer = SetTimer("OneMinutePublic", 60000, true);

	print("--------------------------------------------------------------------------");
	print("[system] Script Initialized.");
	print("--------------------------------------------------------------------------");
	
	DynamicWeather();
	
    return 1;
}

public DynamicWeather()
{
   GlobalWeather = random(17);
   SetWeather(GlobalWeather);
   return 1;
}

Float:GetDistance(Float: x1, Float: y1, Float: z1, Float: x2, Float: y2, Float: z2)
{
    new Float:d;
    d += floatpower(x1-x2, 2.0);
    d += floatpower(y1-y2, 2.0);
    d += floatpower(z1-z2, 2.0);
    d = floatsqroot(d);
	return d;
}

stock PutPlayerInTutorial(playerid, stageid)
{
	switch(stageid)
	{
	    case 0:
	    {
	        new string[128];
	        
        	Player[playerid][BankMoney] += 15000;

	        Player[playerid][Tutorial] = 1;
	        
			TogglePlayerSpectating(playerid, true);
			
			SetPlayerCameraPos(playerid, 1535.9584, -1676.1428, 18.3828);
			SetPlayerCameraLookAt(playerid, 1553.7861, -1676.4270, 16.1953);
			SetPlayerVirtualWorld(playerid, playerid+6002);
			
			TogglePlayerControllable(playerid, false);
			
			SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");

			format(string, sizeof(string), "Hello there, %s - Welcome to Vortex Roleplay.", GetName(playerid));
			SendClientMessage(playerid, WHITE, string);
			SendClientMessage(playerid, WHITE, "This is a roleplaying server, to clarify that you can roleplay - please answer this round of questions.");
			
			ShowPlayerDialog(playerid, 104, DIALOG_STYLE_LIST, "What is the SA-MP roleplaying definition of 'IC'?", "Internet Connection\nIn Character\nIntegrated Circuit\n", "Select", "Cancel");
			
			SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
			
		}
		case 1:
		{
			SendClientMessage(playerid, WHITE, "Incorrect answer. It seems you're going to have to participate in our roleplaying tutorial.");
		    SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		    SendClientMessage(playerid, WHITE, "Roleplaying");
		    SendClientMessage(playerid, WHITE, "Vortex Roleplay is clearly a roleplaying server, we expect all of our players (except on duty administrators) to");
		    SendClientMessage(playerid, WHITE, "be roleplaying, at all times (except OOC events). We deem our level of roleplaying to a medium level, so every one");
		    SendClientMessage(playerid, WHITE, "can play our server, whether new or excellent roleplayers. Roleplaying is the act of playing a role, if you didn't know.");
		    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		    Player[playerid][RPTutStep] = 1;
		    SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		}
		case 2:
		{
			SendClientMessage(playerid, WHITE, "Correct answer. Looks like you won't have to endure our roleplaying tutorial. Now, do you wish to participate");
			SendClientMessage(playerid, WHITE, "in our server tutorial? This will show you around the server, locations etc.");
			ShowPlayerDialog(playerid, 105, DIALOG_STYLE_LIST, "Would you like to endure our server tutorial?", "Yes, please\nNo, thanks.", "Select", "Cancel");
		}
		case 99:
		{
		    TogglePlayerSpectating(playerid, false);
			SetSpawnInfo(playerid, 0, Player[playerid][LastSkin], SpawnX, SpawnY, SpawnZ, 90, 0, 0, 0, 0, 0, 0);
			SpawnPlayer(playerid);
			SetPlayerVirtualWorld(playerid, 0);
			Player[playerid][Tutorial] = 0;
			TogglePlayerControllable(playerid, true);
			SetCameraBehindPlayer(playerid);
		}
	}
	return 1;
}

public CloseImpoundGate()
{
	DestroyDynamicObject(ImpoundGate);
	ImpoundOpen = 0;
	ImpoundGate = CreateDynamicObject(968, 1544.681640625, -1630.8924560547, 13.054567337036, 0, 90, 90);
	return 1;
}

stock logError(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("errors.txt", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock GroupChatLog(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/GroupChat.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock NamechangeLog(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/Namechanges.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock BanLog(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/Bans.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock UnbanLog(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/Unbans.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock StatLog(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/Stat.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock PMsLog(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/PMchat.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock OOCChatLog(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/OOCChat.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock AdminActionsLog(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/AdminActions.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock ICChatLog(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/ICChat.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock MoneyLog(string[])
{
	new entry[255];
	format(entry, sizeof(entry), "%s\r\n", string);
	new File:hFile;
	hFile = fopen("Logs/Money.log", io_append);
	fwrite(hFile, entry);
	fclose(hFile);
}

stock InitGroups()
{
    new FileName[128];
    for(new i = 0; i < MAX_GROUPS; i++)
    {
        format(FileName, sizeof(FileName), "Groups/Group_%d.ini", i);
        if(fexist(FileName))
        {
            Groups[i][GroupName] = dini_Get(FileName, "GroupName");
            Groups[i][CommandTypes] = dini_Int(FileName, "CommandTypes");
            Groups[i][RankName0] = dini_Get(FileName, "RankName0");
            Groups[i][RankName1] = dini_Get(FileName, "RankName1");
            Groups[i][RankName2] = dini_Get(FileName, "RankName2");
            Groups[i][RankName3] = dini_Get(FileName, "RankName3");
            Groups[i][RankName4] = dini_Get(FileName, "RankName4");
            Groups[i][RankName5] = dini_Get(FileName, "RankName5");
            Groups[i][RankName6] = dini_Get(FileName, "RankName6");
            Groups[i][Skin0] = dini_Int(FileName, "Skin0");
            Groups[i][Skin1] = dini_Int(FileName, "Skin1");
            Groups[i][Skin2] = dini_Int(FileName, "Skin2");
            Groups[i][Skin3] = dini_Int(FileName, "Skin3");
            Groups[i][Skin4] = dini_Int(FileName, "Skin4");
            Groups[i][Skin5] = dini_Int(FileName, "Skin5");
            Groups[i][Skin6] = dini_Int(FileName, "Skin6");
            Groups[i][HQInteriorID] = dini_Int(FileName, "HQInteriorID");
            Groups[i][HQInteriorX] = dini_Float(FileName, "HQInteriorX");
            Groups[i][HQInteriorY] = dini_Float(FileName, "HQInteriorY");
            Groups[i][HQInteriorZ] = dini_Float(FileName, "HQInteriorZ");
            Groups[i][HQExteriorID] = dini_Int(FileName, "HQExteriorID");
            Groups[i][HQExteriorX] = dini_Float(FileName, "HQExteriorX");
            Groups[i][HQExteriorY] = dini_Float(FileName, "HQExteriorY");
            Groups[i][HQExteriorZ] = dini_Float(FileName, "HQExteriorZ");
            Groups[i][SafeX] = dini_Float(FileName, "SafeX");
            Groups[i][SafeY] = dini_Float(FileName, "SafeY");
            Groups[i][SafeZ] = dini_Float(FileName, "SafeZ");
            Groups[i][SafeInteriorID] = dini_Int(FileName, "SafeInteriorID");
            Groups[i][SafeMoney] = dini_Int(FileName, "SafeMoney");
            Groups[i][HQLock] = dini_Int(FileName, "HQLock");
            Groups[i][SavedPot] = dini_Int(FileName, "Pot");
            Groups[i][SavedCrack] = dini_Int(FileName, "Crack");
        	Groups[i][DisbandMinute] = dini_Int(FileName, "DisbandMinute");
	        Groups[i][DisbandHour] = dini_Int(FileName, "DisbandHour");
	        Groups[i][DisbandDay] = dini_Int(FileName, "DisbandDay");
	        Groups[i][DisbandMonth] = dini_Int(FileName, "DisbandMonth");
	        Groups[i][DisbandYear] = dini_Int(FileName, "DisbandYear");
            Groups[i][SafeWorld] = dini_Int(FileName, "SafeWorld");
            Groups[i][MOTD] = dini_Get(FileName, "MOTD");

        	Groups[i][HQPickupID] = CreateDynamicPickup(1239, 23, Groups[i][HQExteriorX], Groups[i][HQExteriorY], Groups[i][HQExteriorZ], -1, -1, -1, 150.0);

			Groups[i][SafePickupID] = CreateDynamicPickup(1239, 23, Groups[i][SafeX], Groups[i][SafeY], Groups[i][SafeZ],Groups[i][SafeWorld], -1, -1, 150.0);

			printf("[system] Group %d spawned.", i);
       }
    }
	return 1;
}

stock InitJobs()
{
    new FileName[128];
    for(new i = 0; i < MAX_JOBS; i++)
    {
        format(FileName, sizeof(FileName), "Jobs/Job_%d.ini", i);
        if(fexist(FileName))
        {
            Jobs[i][JobName] = dini_Get(FileName, "JobName");
            Jobs[i][JobJoinPosX] = dini_Float(FileName, "JobJoinPosX");
            Jobs[i][JobJoinPosY] = dini_Float(FileName, "JobJoinPosY");
            Jobs[i][JobJoinPosZ] = dini_Float(FileName, "JobJoinPosZ");
            Jobs[i][JobJoinPosWorld] = dini_Int(FileName, "JobJoinPosWorld");
            Jobs[i][JobJoinPosInterior] = dini_Int(FileName, "JobJoinPosInterior");

            Jobs[i][JobMiscLocationOneX] = dini_Float(FileName, "JobMiscLocationOneX");
            Jobs[i][JobMiscLocationOneY] = dini_Float(FileName, "JobMiscLocationOneY");
            Jobs[i][JobMiscLocationOneZ] = dini_Float(FileName, "JobMiscLocationOneZ");
            Jobs[i][JobMiscLocationOneWorld] = dini_Int(FileName, "JobMiscLocationOneWorld");
            Jobs[i][JobMiscLocationOneInterior] = dini_Int(FileName, "JobMiscLocationOneInterior");
            Jobs[i][JobMiscLocationOneMessage] = dini_Get(FileName, "JobMiscLocationOneMessage");

            Jobs[i][JobMiscLocationTwoX] = dini_Float(FileName, "JobMiscLocationTwoX");
            Jobs[i][JobMiscLocationTwoY] = dini_Float(FileName, "JobMiscLocationTwoY");
            Jobs[i][JobMiscLocationTwoZ] = dini_Float(FileName, "JobMiscLocationTwoZ");
            Jobs[i][JobMiscLocationTwoWorld] = dini_Int(FileName, "JobMiscLocationTwoWorld");
            Jobs[i][JobMiscLocationTwoInterior] = dini_Int(FileName, "JobMiscLocationTwoInterior");
            Jobs[i][JobMiscLocationTwoMessage] = dini_Get(FileName, "JobMiscLocationTwoMessage");

            Jobs[i][JobType] = dini_Int(FileName, "JobType");
            
            Jobs[i][JobJoinPosPickupID] = CreateDynamicPickup(1239, 23, Jobs[i][JobJoinPosX], Jobs[i][JobJoinPosY], Jobs[i][JobJoinPosZ], Jobs[i][JobJoinPosWorld], -1, -1, 150.0);
            Jobs[i][JobMiscLocationOnePickupID] = CreateDynamicPickup(1239, 23, Jobs[i][JobMiscLocationOneX], Jobs[i][JobMiscLocationOneY], Jobs[i][JobMiscLocationOneZ], Jobs[i][JobMiscLocationOneWorld], -1, -1, 150.0);
            Jobs[i][JobMiscLocationTwoPickupID] = CreateDynamicPickup(1239, 23, Jobs[i][JobMiscLocationTwoX], Jobs[i][JobMiscLocationTwoY], Jobs[i][JobMiscLocationTwoZ], Jobs[i][JobMiscLocationTwoWorld], -1, -1, 150.0);

            printf("[system] Job %d (%s) spawned.", i, Jobs[i][JobName]);
            SpawnedJobs++;
       }
    }
	return 1;
}

public RefreshNewbieChatForPlayer(playerid)
{
	if(IsPlayerConnectedEx(playerid))
	{
	    Player[playerid][CanUseNewbie] = 1;
	}
	return 1;
}

stock findAvailableVehicleID() {
    for(new i = 0; i < MAX_VEHICLES; i++) {
        if(Vehicles[i][CarModel] == 0) {
			return i;
		}
    }

    return -1;
}

stock InitHouses()
{
    new FileName[128];
    for(new i = 0; i < MAX_HOUSES; i++)
    {
        format(FileName, sizeof(FileName), "Houses/House_%d.ini", i);
        if(fexist(FileName))
        {
            Houses[i][hInteriorID] = dini_Int(FileName, "InteriorID");
            Houses[i][hInteriorX] = dini_Float(FileName, "InteriorX");
            Houses[i][hInteriorY] = dini_Float(FileName, "InteriorY");
            Houses[i][hInteriorZ] = dini_Float(FileName, "InteriorZ");
            
            Houses[i][HousePrice] = dini_Int(FileName, "HousePrice");
            
            Houses[i][hExteriorID] = dini_Int(FileName, "ExteriorID");
            Houses[i][hExteriorX] = dini_Float(FileName, "ExteriorX");
            Houses[i][hExteriorY] = dini_Float(FileName, "ExteriorY");
            Houses[i][hExteriorZ] = dini_Float(FileName, "ExteriorZ");
  
            Houses[i][VaultMoney] = dini_Int(FileName, "VaultMoney");
            Houses[i][HouseCocaine] = dini_Int(FileName, "HouseCocaine");
            Houses[i][HousePot] = dini_Int(FileName, "HousePot");
            Houses[i][HouseMaterials] = dini_Int(FileName, "HouseMaterials");
            
            Houses[i][hOwner] = dini_Get(FileName, "Owner");
            
            Houses[i][LockStatus] = dini_Int(FileName, "LockStatus");
            
            Houses[i][WeaponSlot1] = dini_Int(FileName, "WeaponSlot1");
            Houses[i][WeaponSlot2] = dini_Int(FileName, "WeaponSlot2");
            Houses[i][WeaponSlot3] = dini_Int(FileName, "WeaponSlot3");
            
	        if(strcmp(Houses[i][hOwner], "Nobody", true) == 0)
			{
			    Houses[i][LockStatus] = 0;
            	Houses[i][HPickupID] = CreateDynamicPickup(1273, 23, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ], 0, -1, -1, 150.0);
            }
            else
            {
                Houses[i][HPickupID] = CreateDynamicPickup(1272, 23, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ], 0, -1, -1, 150.0);
            }

            printf("[system] House %d spawned.", i);
            SpawnedHouses++;
       }
    }
	return 1;
}

stock InitBusinesses()
{
    new FileName[128];
    for(new i = 0; i < MAX_BUSINESSES; i++)
    {
        format(FileName, sizeof(FileName), "Businesses/Business_%d.ini", i);
        if(fexist(FileName))
        {
            Businesses[i][bExteriorX] = dini_Float(FileName, "ExteriorX");
            Businesses[i][bExteriorY] = dini_Float(FileName, "ExteriorY");
            Businesses[i][bExteriorZ] = dini_Float(FileName, "ExteriorZ");
            Businesses[i][bExteriorID] = dini_Int(FileName, "ExteriorID");

            Businesses[i][bInteriorX] = dini_Float(FileName, "InteriorX");
            Businesses[i][bInteriorY] = dini_Float(FileName, "InteriorY");
            Businesses[i][bInteriorZ] = dini_Float(FileName, "InteriorZ");
            Businesses[i][bInteriorID] = dini_Int(FileName, "InteriorID");
            
            Businesses[i][bType] = dini_Int(FileName, "Type");
            Businesses[i][bVault] = dini_Int(FileName, "Vault");
            Businesses[i][bPrice] = dini_Int(FileName, "Price");
            Businesses[i][bOwner] = dini_Get(FileName, "Owner");
            
            Businesses[i][bLockStatus] = dini_Int(FileName, "LockStatus");
            
            Businesses[i][bName] = dini_Get(FileName, "Name");
            
            Businesses[i][bSupplies] = dini_Int(FileName, "Supplies");
            
            Businesses[i][bProductPrice1] = dini_Int(FileName, "ProductPrice1");
            Businesses[i][bProductPrice2] = dini_Int(FileName, "ProductPrice2");
            Businesses[i][bProductPrice3] = dini_Int(FileName, "ProductPrice3");
            Businesses[i][bProductPrice4] = dini_Int(FileName, "ProductPrice4");
            Businesses[i][bProductPrice5] = dini_Int(FileName, "ProductPrice5");
            Businesses[i][bProductPrice6] = dini_Int(FileName, "ProductPrice6");
            Businesses[i][bProductPrice7] = dini_Int(FileName, "ProductPrice7");
            Businesses[i][bProductPrice8] = dini_Int(FileName, "ProductPrice8");
            Businesses[i][bProductPrice9] = dini_Int(FileName, "ProductPrice9");
            Businesses[i][bProductPrice10] = dini_Int(FileName, "ProductPrice10");
            Businesses[i][bProductPrice11] = dini_Int(FileName, "ProductPrice11");
            Businesses[i][bProductPrice12] = dini_Int(FileName, "ProductPrice12");
            Businesses[i][bProductPrice13] = dini_Int(FileName, "ProductPrice13");
            Businesses[i][bProductPrice14] = dini_Int(FileName, "ProductPrice14");
            
			Businesses[i][bSupplyStatus] = dini_Int(FileName, "SupplyStatus");
			
           	Businesses[i][bPickupID] = CreateDynamicPickup(1239, 23, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ], 0, -1, -1, 150.0);

            printf("[system] Business %d spawned.", i);
            SpawnedBusinesses++;
       }
    }
	return 1;
}

GetVehicleFileID(gameid)
{
	new result;
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		if(gameid == Vehicles[i][GameID])
		{
		    result = i;
		}
	}
	return result;
}

stock SaveExistingVehicle(gameid)
{
	new Vehicle[16], id;
	
	id = GetVehicleFileID(gameid);
	
	format(Vehicle, sizeof(Vehicle), "V_%d", id);
    if(djIsSet(VEHICLES_FILE, Vehicle))
    {
        djAutocommit(false);
	    format(Vehicle, sizeof(Vehicle), "V_%d/PosX", id);
	    djSetFloat(VEHICLES_FILE, Vehicle, Vehicles[id][CarPosX], true);
	    format(Vehicle, sizeof(Vehicle), "V_%d/PosY", id);
	    djSetFloat(VEHICLES_FILE, Vehicle, Vehicles[id][CarPosY], true);
	    format(Vehicle, sizeof(Vehicle), "V_%d/PosZ", id);
	    djSetFloat(VEHICLES_FILE, Vehicle, Vehicles[id][CarPosZ], true);
	    format(Vehicle, sizeof(Vehicle), "V_%d/ZAngle", id);
	    djSetFloat(VEHICLES_FILE, Vehicle, Vehicles[id][CarZAngle], true);
	    format(Vehicle, sizeof(Vehicle), "V_%d/Model", id);
	    djSetInt(VEHICLES_FILE, Vehicle, Vehicles[id][CarModel], true);
	    format(Vehicle, sizeof(Vehicle), "V_%d/Col1", id);
	    djSetInt(VEHICLES_FILE, Vehicle, Vehicles[id][CarColour1], true);
	    format(Vehicle, sizeof(Vehicle), "V_%d/Col2", id);
	    djSetInt(VEHICLES_FILE, Vehicle, Vehicles[id][CarColour2], true);
	    format(Vehicle, sizeof(Vehicle), "V_%d/Group", id);
    	djSetInt(VEHICLES_FILE, Vehicle, Vehicles[id][CarGroup], true);
		djCommit(VEHICLES_FILE);
		djAutocommit(true);
		
		printf("[system] Existing Vehicle %d has been saved to %s.", id, VEHICLES_FILE);
		
        return true;
    }
    else
    {
        return false;
    }
}

stock InitVehicles()
{
	new Vehicle[16];
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
	    format(Vehicle, sizeof(Vehicle), "V_%d", i);
	    if(djIsSet(VEHICLES_FILE, Vehicle))
	    {
	        format(Vehicle, sizeof(Vehicle), "V_%d/PosX", i);
	        Vehicles[i][CarPosX] = djFloat(VEHICLES_FILE, Vehicle, true);
	        format(Vehicle, sizeof(Vehicle), "V_%d/PosY", i);
	        Vehicles[i][CarPosY] = djFloat(VEHICLES_FILE, Vehicle, true);
	        format(Vehicle, sizeof(Vehicle), "V_%d/PosZ", i);
	        Vehicles[i][CarPosZ] = djFloat(VEHICLES_FILE, Vehicle, true);
	        format(Vehicle, sizeof(Vehicle), "V_%d/ZAngle", i);
	        Vehicles[i][CarZAngle] = djFloat(VEHICLES_FILE, Vehicle, true);
	        format(Vehicle, sizeof(Vehicle), "V_%d/Model", i);
	        Vehicles[i][CarModel] = djInt(VEHICLES_FILE, Vehicle, true);
	        format(Vehicle, sizeof(Vehicle), "V_%d/Col1", i);
	        Vehicles[i][CarColour1] = djInt(VEHICLES_FILE, Vehicle, true);
	        format(Vehicle, sizeof(Vehicle), "V_%d/Col2", i);
	        Vehicles[i][CarColour2] = djInt(VEHICLES_FILE, Vehicle, true);
	        format(Vehicle, sizeof(Vehicle), "V_%d/Group", i);
	        Vehicles[i][CarGroup] = djInt(VEHICLES_FILE, Vehicle, true);
	        CarCount++;
	        
            if(Vehicles[i][CarModel] != 537 && Vehicles[i][CarModel] != 538 && Vehicles[i][CarModel] != 569 && 570 && Vehicles[i][CarModel] != 590)
            {
            	Vehicles[i][GameID] = AddStaticVehicleEx(Vehicles[i][CarModel], Vehicles[i][CarPosX], Vehicles[i][CarPosY], Vehicles[i][CarPosZ], Vehicles[i][CarZAngle], Vehicles[i][CarColour1], Vehicles[i][CarColour2], 3600);
            }
            
            printf("[system] InitVehicles(): Vehicle %d has spawned (spawned from %s).", i, VEHICLES_FILE);
	    }
	}
}

stock IsNumeric(string[]) { for (new i = 0, j = strlen(string); i < j; i++) if (string[i] > '9' || string[i] < '0') return 0; return 1; }

public PurchaseCar(playerid, carid, price, slotid)
{
	new string[128];
	if(carid < 400 || carid > 611)
	{
		SendClientMessage(playerid, WHITE, "Valid car IDs start from 400, ending at 611.");
		return 1;
	}
	else
	{
		if(Player[playerid][Money] >= price)
		{
		    switch(slotid)
		    {
		        case 1:
		        {
				    if(Player[playerid][PlayerCarModel] > 0)
				    {
				        SendClientMessage(playerid, WHITE, "You already have a vehicle in slot 1, /abandoncar first.");
				    }
				    else
				    {
						Player[playerid][OwnedCarModSlot0] = 0;
						Player[playerid][OwnedCarModSlot1] = 0;
						Player[playerid][OwnedCarModSlot2] = 0;
						Player[playerid][OwnedCarModSlot3] = 0;
						Player[playerid][OwnedCarModSlot4] = 0;
						Player[playerid][OwnedCarModSlot5] = 0;
						Player[playerid][OwnedCarModSlot6] = 0;
						Player[playerid][OwnedCarModSlot7] = 0;
						Player[playerid][OwnedCarModSlot8] = 0;
						Player[playerid][OwnedCarModSlot9] = 0;
						Player[playerid][OwnedCarModSlot10] = 0;
						Player[playerid][OwnedCarModSlot11] = 0;
						Player[playerid][OwnedCarModSlot12] = 0;
						Player[playerid][OwnedCarModSlot13] = 0;

				        Player[playerid][Money] -= price;
				        Player[playerid][CarX] = OwnedCarSpawnX;
				        Player[playerid][CarY] = OwnedCarSpawnY;
				        Player[playerid][CarZ] = OwnedCarSpawnZ;
				        Player[playerid][PlayerCarModel] = carid;
				        Player[playerid][CarCol1] = 0;
				        Player[playerid][CarCol2] = 0;
				        SpawnOwnedCar(playerid, 1);
				        SavePlayerData(playerid);
				    }
				}
				case 2:
				{
				    if(Player[playerid][PlayerCarModel2] > 0)
				    {
				        SendClientMessage(playerid, WHITE, "You already have a vehicle in slot 2, /abandoncar first.");
				    }
				    else
				    {
						Player[playerid][Car2OwnedCarModSlot0] = 0;
						Player[playerid][Car2OwnedCarModSlot1] = 0;
						Player[playerid][Car2OwnedCarModSlot2] = 0;
						Player[playerid][Car2OwnedCarModSlot3] = 0;
						Player[playerid][Car2OwnedCarModSlot4] = 0;
						Player[playerid][Car2OwnedCarModSlot5] = 0;
						Player[playerid][Car2OwnedCarModSlot6] = 0;
						Player[playerid][Car2OwnedCarModSlot7] = 0;
						Player[playerid][Car2OwnedCarModSlot8] = 0;
						Player[playerid][Car2OwnedCarModSlot9] = 0;
						Player[playerid][Car2OwnedCarModSlot10] = 0;
						Player[playerid][Car2OwnedCarModSlot11] = 0;
						Player[playerid][Car2OwnedCarModSlot12] = 0;
						Player[playerid][Car2OwnedCarModSlot13] = 0;

				        Player[playerid][Money] -= price;
				        Player[playerid][Car2X] = OwnedCarSpawnX;
				        Player[playerid][Car2Y] = OwnedCarSpawnY;
				        Player[playerid][Car2Z] = OwnedCarSpawnZ;
				        Player[playerid][PlayerCarModel2] = carid;
				        Player[playerid][Car2Col1] = 0;
				        Player[playerid][Car2Col2] = 0;
				        SpawnOwnedCar(playerid, 2);
				        SavePlayerData(playerid);
				    }
				}
				case 3:
				{
				    if(Player[playerid][PlayerCarModel3] > 0)
				    {
				        SendClientMessage(playerid, WHITE, "You already have a vehicle in slot 3, /abandoncar first.");
				    }
				    else
				    {
						Player[playerid][Car3OwnedCarModSlot0] = 0;
						Player[playerid][Car3OwnedCarModSlot1] = 0;
						Player[playerid][Car3OwnedCarModSlot2] = 0;
						Player[playerid][Car3OwnedCarModSlot3] = 0;
						Player[playerid][Car3OwnedCarModSlot4] = 0;
						Player[playerid][Car3OwnedCarModSlot5] = 0;
						Player[playerid][Car3OwnedCarModSlot6] = 0;
						Player[playerid][Car3OwnedCarModSlot7] = 0;
						Player[playerid][Car3OwnedCarModSlot8] = 0;
						Player[playerid][Car3OwnedCarModSlot9] = 0;
						Player[playerid][Car3OwnedCarModSlot10] = 0;
						Player[playerid][Car3OwnedCarModSlot11] = 0;
						Player[playerid][Car3OwnedCarModSlot12] = 0;
						Player[playerid][Car3OwnedCarModSlot13] = 0;

				        Player[playerid][Money] -= price;
				        Player[playerid][Car3X] = OwnedCarSpawnX;
				        Player[playerid][Car3Y] = OwnedCarSpawnY;
				        Player[playerid][Car3Z] = OwnedCarSpawnZ;
				        Player[playerid][PlayerCarModel3] = carid;
				        Player[playerid][Car3Col1] = 0;
				        Player[playerid][Car3Col2] = 0;
				        SpawnOwnedCar(playerid, 3);
				        SavePlayerData(playerid);
				    }
				}
		    }
		}
		else
		{
		    format(string, sizeof(string), "You must have $%d to purchase this vehicle.", price);
		    SendClientMessage(playerid, WHITE, string);
		}
	}
	return 1;
}

public IsPlayerInInvalidNosVehicle(playerid)
{
	new carid = GetPlayerVehicleID(playerid);
	new carmodel = GetVehicleModel(carid);
	for (new i = 0; i < sizeof(UnmodifiableVehicles); i++)
	{
	    if(carmodel == UnmodifiableVehicles[i]) return 1;
	}
	return 0;
}

stock IsAHelicopter(vehicleid)
{
	new model = GetVehicleModel(vehicleid);
	
	if(model == 548 || model == 511 || model == 553 || model == 519 || model == 469 || model == 447 || model == 563 || model == 497 || model == 488 || model == 487 || model == 417 || model == 425 || model == 548 || model == 577 || model == 573 || model == 592 || model == 525 || model == 417 || model == 487 || model == 488 || model == 497 || model == 563 || model == 447 || model == 469)
	{
		return 1;
	}
	else
	{
		return 0;
	}
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	if(Player[playerid][CarLinkID] == vehicleid)
	{
	    Player[playerid][CarCol1] = color1;
	    Player[playerid][CarCol2] = color2;
	}
	
	if(Player[playerid][Car2LinkID] == vehicleid)
	{
	    Player[playerid][Car2Col1] = color1;
	    Player[playerid][Car2Col2] = color2;
	}
	
	if(Player[playerid][Car3LinkID] == vehicleid)
	{
	    Player[playerid][Car3Col1] = color1;
	    Player[playerid][Car3Col2] = color2;
	}
	return 1;
}

stock IsVehicleConnected(vehicleid) //By Sacky (edited by Gabriel "Larcius" Cordes)
{
	new Float:x1,Float:y1,Float:z1;
	GetVehiclePos(vehicleid,x1,y1,z1);
	if(x1==0.0 && y1==0.0 && z1==0.0)
	{
		return 0;
	}
	return 1;
}

stock Float:GetDistanceBetweenPoints(Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2) //By Gabriel "Larcius" Cordes
{
	return floatadd(floatadd(floatsqroot(floatpower(floatsub(x1,x2),2)),floatsqroot(floatpower(floatsub(y1,y2),2))),floatsqroot(floatpower(floatsub(z1,z2),2)));
}

stock Float:GetDistanceToPoint(playerid,Float:x1,Float:y1,Float:z1) //By Gabriel "Larcius" Cordes
{
	if (IsPlayerConnected(playerid))
	{
		new Float:x2,Float:y2,Float:z2;
		GetPlayerPos(playerid,x2,y2,z2);
		return GetDistanceBetweenPoints(x1,y1,z1,x2,y2,z2);
	}
	return INF_FLOAT;
}

stock Float:GetDistanceToVehicle(playerid,vehicleid) //By Darkrealm (Edited by Sacky and Gabriel "Larcius" Cordes)
{
	if (IsPlayerConnected(playerid) && IsVehicleConnected(vehicleid))
	{
		new Float:x1,Float:y1,Float:z1;
		GetVehiclePos(vehicleid,x1,y1,z1);
		return GetDistanceToPoint(playerid,x1,y1,z1);
	}
	return INF_FLOAT;
}

stock GetClosestVehicle(playerid)
{
	if(IsPlayerConnected(playerid) && IsVehicleConnected(0))
	{
		new closestvehicle=0;
		new Float:closestdist=GetDistanceToVehicle(playerid,0);
		for(new vehicleid=0; vehicleid<MAX_VEHICLES; vehicleid++)
		{
			new Float:dist = GetDistanceToVehicle(playerid,vehicleid);
			if ((dist < closestdist))
			{
				closestdist = dist;
				closestvehicle = vehicleid;
			}
		}
		return closestvehicle;
	}
	return -1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	if(Player[playerid][ModShop] == 1)
	{
		if(Player[playerid][CarLinkID] == vehicleid || Player[playerid][Car2LinkID] == vehicleid || Player[playerid][Car3LinkID] == vehicleid)
		{
		    GetOwnedCarMods(playerid);
		}
	}
	return 1;
}

public SendToAdmins(colour, string[], requireduty)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	  	if(IsPlayerConnectedEx(i))
	  	{
	  	    if(Player[i][AdminLevel] >= 1)
	  	    {
	  	        if(requireduty == 1 && Player[i][AdminDuty] == 1 && Player[i][AFKStat] == 0)
	  	        {
	  	        	SendClientMessage(i, colour, string);
	  	        }
	  	        else if(requireduty == 0)
	  	        {
	  	            SendClientMessage(i, colour, string);
	  	        }
		   	}
		}
	}
	return 1;
}

stock RangeBan(playerid)
{
	new string[128];
    if(!IsPlayerConnected(playerid))  return 0;
    new total[32],ip[32];
    GetPlayerIp(playerid, ip, sizeof(ip));
    new cnt;
    for(new i=0;i<strlen(ip);i++)
    {
        if(ip[i] == '.') cnt++;
        if(cnt == 2)
        {
            i++;
            strdel(ip, i, strlen(ip));
            format(total,sizeof(total),"%s*.*",ip);
        }
    }
    format(string, sizeof(string),"banip %s",total);
    SendRconCommand(string);
    return 1;
}

stock GetClosestPlayer(playerid)
{
    new Float:cdist, targetid = -1;
    for (new i = 0; i < MAX_PLAYERS; i++)
    {
        if (IsPlayerConnected(i) && playerid != i && (targetid < 0 || cdist > GetDistanceBetweenPlayers(playerid, i)))
        {
            targetid = i;
            cdist = GetDistanceBetweenPlayers(playerid, i);
        }
    }
    return targetid;
}

public OnPlayerSelectedMenuRow(playerid, row)
{
	return 1;
}

stock Reset(playerid)
{
	Player[playerid][House] = 0;
    Player[playerid][Harvesting] = 0;
    Player[playerid][PendingHandshake] = -1;
	Player[playerid][PendingHandshakeStyle] = 0;
	Player[playerid][PMsEnabled] = 1;
	Player[playerid][Gagged] = 0;
	Player[playerid][Gender] = 0;
	Player[playerid][SpeedHacksWarn] = 0;
	Player[playerid][CarBeingCarried] = 0;
	Player[playerid][ReportBanStatus] = 0;
	Player[playerid][CarPriceBeingCarried] = 0;
	Player[playerid][Authenticated] = 0;
	Player[playerid][PendingBETAInvite] = 0;
	Player[playerid][ServerTut] = 0;
	Player[playerid][CheckBalance] = 0;
	Player[playerid][Speedo] = 1;
	Player[playerid][CarPaintJobID] = 0;
	Player[playerid][TearGasEffect] = 0;
	Player[playerid][ToggedRadio] = 0;
	Player[playerid][LockedCar2] = 0;
	Player[playerid][LockedCar3] = 0;
	Player[playerid][IsInAnimation] = 0;
	Player[playerid][InterviewPowers] = 0;
	Player[playerid][SniperRecoilEffect] = 0;
	Player[playerid][AttendingBackupCall] = -1;
	Player[playerid][AnsweredQuizQuestions] = 0;
	Player[playerid][oMuted] = 0;
	Player[playerid][nMuted] = 0;
	Player[playerid][RPTutStep] = 0;
	Player[playerid][AdminSkin] = 0;
	Player[playerid][AchievementRank] = 0;
	Player[playerid][ActiveReport] = 0;
    Player[playerid][MeActions] = 0;
	Player[playerid][AdsPlaced] = 0;
	Player[playerid][MatrunsExecuted] = 0;
	Player[playerid][ReportingPlayer] = -1;
	Player[playerid][SpeedHackWarnTime] = 0;
	Player[playerid][IsHacker] = 0;
	Player[playerid][AnticheatWarns] = 0;
	Player[playerid][ACWarnTime] = 0;
	Player[playerid][BeingSpyedOnBy] = -1;
	Player[playerid][Cuffed] = 0;
	Player[playerid][WeaponRefund] = 0;
	Player[playerid][Tazed] = 0;
	Player[playerid][HasJetpack] = 0;
	Player[playerid][LawyerReloadTime] = 0;
	format(Player[playerid][Note], 128, "Nothing");
	Player[playerid][GuardOffer] = -1;
	Player[playerid][PortableRadio] = 0;
	Player[playerid][CarLinkID] = 0;
	Player[playerid][Car2LinkID] = 0;
	Player[playerid][Car3LinkID] = 0;
	Player[playerid][PlayerCarModel2] = 0;
	Player[playerid][PlayerCarModel3] = 0;
	format(Player[playerid][Accent], 128, "American");
	Player[playerid][RequestingBackup] = 0;
	Player[playerid][PreLoadedAnims] = 0;
	Player[playerid][PendingCarReceival] = -1;
	Player[playerid][Rope] = 0;
	GetPlayerName(playerid, Player[playerid][NormalName], 255);
	format(Player[playerid][AdminName], 255, "Nothing");
	Player[playerid][BeingDraggedBy] = -1;
	Player[playerid][PINUnauthedTime] = 0;
	Player[playerid][FindingHouse] = 0;
	Player[playerid][PendingProposal] = -1;
	Player[playerid][LockedCar] = 0;
	Player[playerid][SupplyT] = 0;
	Player[playerid][OnPhoneTime] = 0;
    Player[playerid][ToggedQUIZ] = 0;
	Player[playerid][PINAuth] = 0;
	Player[playerid][ToggedVIP] = 0;
	Player[playerid][ToggedTester] = 0;
	Player[playerid][Blindfolded] = 0;
	Player[playerid][LastKiller] = -1;
	Player[playerid][Job] = 0;
	Player[playerid][AFKStat] = 0;
	Player[playerid][AdminPIN] = 0;
	Player[playerid][GivingSlot] = 0;
	Player[playerid][PlayerSkinSlot1] = 0;
	Player[playerid][OwnedCarModSlot0] = 0;
	Player[playerid][OwnedCarModSlot1] = 0;
	Player[playerid][OwnedCarModSlot2] = 0;
	Player[playerid][OwnedCarModSlot3] = 0;
	Player[playerid][OwnedCarModSlot4] = 0;
	Player[playerid][OwnedCarModSlot5] = 0;
	Player[playerid][OwnedCarModSlot6] = 0;
	Player[playerid][OwnedCarModSlot7] = 0;
	Player[playerid][OwnedCarModSlot8] = 0;
	Player[playerid][OwnedCarModSlot9] = 0;
	Player[playerid][OwnedCarModSlot10] = 0;
	Player[playerid][OwnedCarModSlot11] = 0;
	Player[playerid][OwnedCarModSlot12] = 0;
	Player[playerid][OwnedCarModSlot13] = 0;
	Player[playerid][Car2OwnedCarModSlot2] = 0;
	Player[playerid][Car2OwnedCarModSlot3] = 0;
	Player[playerid][Car2OwnedCarModSlot4] = 0;
	Player[playerid][Car2OwnedCarModSlot5] = 0;
	Player[playerid][Car2OwnedCarModSlot6] = 0;
	Player[playerid][Car2OwnedCarModSlot7] = 0;
	Player[playerid][Car2OwnedCarModSlot8] = 0;
	Player[playerid][Car2OwnedCarModSlot9] = 0;
	Player[playerid][Car2OwnedCarModSlot13] = 0;
	Player[playerid][Car2OwnedCarModSlot13] = 0;
	Player[playerid][Car2OwnedCarModSlot13] = 0;
	Player[playerid][Car2OwnedCarModSlot13] = 0;
	Player[playerid][Car3OwnedCarModSlot2] = 0;
	Player[playerid][Car3OwnedCarModSlot3] = 0;
	Player[playerid][Car3OwnedCarModSlot4] = 0;
	Player[playerid][Car3OwnedCarModSlot5] = 0;
	Player[playerid][Car3OwnedCarModSlot6] = 0;
	Player[playerid][Car3OwnedCarModSlot7] = 0;
	Player[playerid][Car3OwnedCarModSlot8] = 0;
	Player[playerid][Car3OwnedCarModSlot9] = 0;
	Player[playerid][Car3OwnedCarModSlot13] = 0;
	Player[playerid][Car3OwnedCarModSlot13] = 0;
	Player[playerid][Car3OwnedCarModSlot13] = 0;
	Player[playerid][Car3OwnedCarModSlot13] = 0;
	Player[playerid][Car2ZAngle] = 0;
	Player[playerid][Car3ZAngle] = 0;
	Player[playerid][Car2PaintJobID] = 0;
	Player[playerid][Car3PaintJobID] = 0;
	Player[playerid][Car2Col1] = 0;
	Player[playerid][Car2Col2] = 0;
	Player[playerid][Car3Col1] = 0;
	Player[playerid][Car3Col2] = 0;
	Player[playerid][StonedEffect] = 0;
	Player[playerid][PlayerSkinSlot3] = 0;
	Player[playerid][ToggedRAGE] = 0;
	Player[playerid][BankStatus] = 0;
	Player[playerid][PendingDivorce] = -1;
	Player[playerid][FightBox] = 0;
	Player[playerid][WalkieFrequency] = 0;
	Player[playerid][WalkieTalkie] = 0;
	Player[playerid][PhoneCredit] = 0;
	Player[playerid][VipRank] = 0;
	Player[playerid][FightKungfu] = 0;
	Player[playerid][FightKneehead] = 0;
	Player[playerid][FightGrabkick] = 0;
	Player[playerid][ToggedOOC] = 0;
	Player[playerid][FightElbow] = 0;
	Player[playerid][HasRadio] = 0;
	Player[playerid][ResetTimer] = 0;
	Player[playerid][CollegeMedia] = 0;
	Player[playerid][CollegeLaw] = 0;
	Player[playerid][CollegeEng] = 0;
	format(Player[playerid][MarriedTo], 255, "Nobody");
	Player[playerid][CollegeMath] = 0;
	Player[playerid][CollegeChem] = 0;
	Player[playerid][SpotlightEffect] = 0;
	Player[playerid][Rags] = 0;
	Player[playerid][IsAtEvent] = 0;
	Player[playerid][Tied] = 0;
	Player[playerid][SuccessfulHits] = 0;
	Player[playerid][ToggledRadio] = 0;
	Player[playerid][FailedHits] = 0;
	Player[playerid][TiedTime] = 0;
	Player[playerid][GuardPrice] = 0;
	Player[playerid][AdminDuty] = 0;
	Player[playerid][Guarding] = -1;
	Player[playerid][Detecting] = 0;
	Player[playerid][MedicDuty] = 0;
	Player[playerid][DetectiveCooldown] = 0;
	Player[playerid][Tazed] = 0;
	Player[playerid][Map] = 0;
	Player[playerid][CarModDelay] = 0;
	Player[playerid][PlayerCarModel] = 0;
	Player[playerid][HasSprayCans] = 0;
	Player[playerid][FindingCar] = 0;
	Player[playerid][HealPrice] = 0;
	Player[playerid][TicketPrice] = 0;
	Player[playerid][Ticketing] = -1;
	Player[playerid][BeingTicketed] = -1;
	Player[playerid][LockedCar] = 0;
	Player[playerid][CollectedFish] = 0;
	Player[playerid][PhoneStat] = 1;
	Player[playerid][FishAttempts] = 0;
	Player[playerid][CantFish] = 0;
	Player[playerid][NineOneOneStep] = 0;
	Player[playerid][AttemptingToHeal] = -1;
	Player[playerid][AdminLevel] = 0;
	Player[playerid][Calling] = -1;
	Player[playerid][LastX] = 0.00;
 	Player[playerid][InBusiness] = 0;
 	Player[playerid][CellphoneConsole] = -1;
 	Player[playerid][InHouse] = 0;
 	Player[playerid][CollectedFish] = 1;
 	Player[playerid][InGroupHQ] = 0;
	Player[playerid][InabilityToMatrun] = 0;
	Player[playerid][InabilityToDropCar] = 0;
	Player[playerid][HospitalTime] = 0;
	Player[playerid][MatrunInabilityDuration] = 0;
	Player[playerid][PlayingHours] = 0;
	Player[playerid][CompleteRun] = 0;
	Player[playerid][LoginAttempts] = 0;
	Player[playerid][LastY] = 0.00;
	Player[playerid][CanUseNewbie] = 1;
	Player[playerid][InBusiness] = 0;
	Player[playerid][Business] = 0;
	Player[playerid][AdminActions] = 0;
	Player[playerid][PhoneN] = -1;
	Player[playerid][BankMoney] = 0;
	Player[playerid][Materials] = 0;
	Player[playerid][MaterialPackages] = 0;
	Player[playerid][Checkpoint] = 0;
	Player[playerid][AdminDuty] = 0;
	Player[playerid][Gender] = 0;
	Player[playerid][PrisonID] = 0;
	Player[playerid][PrisonDuration] = 0;
	Player[playerid][Tutorial] = 0;
	Player[playerid][Muted] = 0;
	Player[playerid][PendingInvite] = 0;
	Player[playerid][CrackEffect] = 0;
	Player[playerid][KnifeCount] = 0;
	Spectator[playerid][SpecSpectatingPlayer] = -1;
	Player[playerid][ContractPrice] = 0;
	format(Player[playerid][Contract], 255, "None");
	Player[playerid][BaseballBatCount] = 0;
	Player[playerid][LastZ] = 0.00;
	Player[playerid][CarY] = 0.00;
	Player[playerid][CarX] = 0.00;
	Player[playerid][CarZ] = 0.00;
	Player[playerid][PlayerCarModel] = 0;
	Player[playerid][CarZAngle] = 0;
	Player[playerid][CarCol1] = 0;
	Player[playerid][CarCol2] = 0;
	Player[playerid][GotInCopCar] = 0;
	Player[playerid][LastWorld] = 0;
	Player[playerid][ModShop] = 0;
	Player[playerid][SpamCount] = 0;
	Player[playerid][LastInterior] = 0;
	Player[playerid][Group] = 0;
	Player[playerid][GroupRank] = 0;
	Player[playerid][Banned] = 0;
	Player[playerid][Money] = 0;
	UnconfirmedSave[playerid] = 0;
	ResetPlayerWeaponsEx(playerid);
	Player[playerid][LastSkin] = 299;
	Player[playerid][LastHealth] = 100.00;
	Player[playerid][LastArmour] = 0.00;
	format(Player[playerid][Warning1], 255, "None");
	format(Player[playerid][Warning2], 255, "None");
	format(Player[playerid][Warning3], 255, "None");
	format(Player[playerid][AdminName], 255, "None");
	Player[playerid][Identity] = 0;
	Player[playerid][BeingAssasinated] = -1;
	Player[playerid][PlayerToAssasinate] = -1;
	Player[playerid][AssigningHitTo] = -1;
	Player[playerid][Age] = 0;
	Player[playerid][CriminalOffences] = 0;
	GetPlayerIp(playerid, Player[playerid][LastIP], 21);
	ClearCriminalRecord(playerid);
	Player[playerid][Calling] = -1;
	Player[playerid][BeingCalled] = -1;
	Player[playerid][Tester] = 0;
	Player[playerid][Cocaine] = 0;
	Player[playerid][Pot] = 0;
	Player[playerid][CallConnectingTime] = -1;
	return 1;
}

stock GetDistanceBetweenPlayers(playerid, playerid2)
{
	new Float:x1,Float:y1,Float:z1,Float:x2,Float:y2,Float:z2;
	new Float:dis;
	GetPlayerPos(playerid,x1,y1,z1);
	GetPlayerPos(playerid2,x2,y2,z2);
	dis = floatsqroot((x2-x1)*(x2-x1)+(y2-y1)*(y2-y1)+(z2-z1)*(z2-z1));
	return floatround(dis);
}

stock IsInvalidSkin(skin)
{
    #define	MAX_BAD_SKINS   14
    new badSkins[MAX_BAD_SKINS] =
    {
        3, 4, 5, 6, 8, 42, 65, 74, 86,
        119, 149, 208, 273, 289
    };

    for (new i = 0; i < MAX_BAD_SKINS; i++)
    {
        if (skin == badSkins[i] || skin < 0 || skin >= 300) return true;
    }

    return false;
}

stock GetName(playerid)
{
    new Name[MAX_PLAYER_NAME];
    
    if(IsPlayerConnected(playerid))
    {
		GetPlayerName(playerid, Name, sizeof(Name));
	}
	else
	{
	    Name = "Disconnected/Nothing";
	}
	
	return Name;
}

public PrisonGateTimer()
{
	MoveDynamicObject(PrisonGate, 1788.4801025391, -1600.1746826172, 15.320266723633, 1);
	PrisonGateOpen = 0;
	return 1;
}

stock sscanf(string[], format[], {Float,_}:...)
{
	#if defined isnull
		if (isnull(string))
	#else
		if (string[0] == 0 || (string[0] == 1 && string[1] == 0))
	#endif
		{
			return format[0];
		}
	#pragma tabsize 4
	new
		formatPos = 0,
		stringPos = 0,
		paramPos = 2,
		paramCount = numargs(),
		delim = ' ';
	while (string[stringPos] && string[stringPos] <= ' ')
	{
		stringPos++;
	}
	while (paramPos < paramCount && string[stringPos])
	{
		switch (format[formatPos++])
		{
			case '\0':
			{
				return 0;
			}
			case 'i', 'd':
			{
				new
					neg = 1,
					num = 0,
					ch = string[stringPos];
				if (ch == '-')
				{
					neg = -1;
					ch = string[++stringPos];
				}
				do
				{
					stringPos++;
					if ('0' <= ch <= '9')
					{
						num = (num * 10) + (ch - '0');
					}
					else
					{
						return -1;
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num * neg);
			}
			case 'h', 'x':
			{
				new
					num = 0,
					ch = string[stringPos];
				do
				{
					stringPos++;
					switch (ch)
					{
						case 'x', 'X':
						{
							num = 0;
							continue;
						}
						case '0' .. '9':
						{
							num = (num << 4) | (ch - '0');
						}
						case 'a' .. 'f':
						{
							num = (num << 4) | (ch - ('a' - 10));
						}
						case 'A' .. 'F':
						{
							num = (num << 4) | (ch - ('A' - 10));
						}
						default:
						{
							return -1;
						}
					}
				}
				while ((ch = string[stringPos]) > ' ' && ch != delim);
				setarg(paramPos, 0, num);
			}
			case 'c':
			{
				setarg(paramPos, 0, string[stringPos++]);
			}
			case 'f':
			{
				setarg(paramPos, 0, _:floatstr(string[stringPos]));
			}
			case 'p':
			{
				delim = format[formatPos++];
				continue;
			}
			case '\'':
			{
				new
					end = formatPos - 1,
					ch;
				while ((ch = format[++end]) && ch != '\'') {}
				if (!ch)
				{
					return -1;
				}
				format[end] = '\0';
				if ((ch = strfind(string, format[formatPos], false, stringPos))  == -1)
				{
					if (format[end + 1])
					{
						return -1;
					}
					return 0;
				}
				format[end] = '\'';
				stringPos = ch + (end - formatPos);
				formatPos = end + 1;
			}
			case 'u':
			{
				new
					end = stringPos - 1,
					id = 0,
					bool:num = true,
					ch;
				while ((ch = string[++end]) && ch != delim)
				{
					if (num)
					{
						if ('0' <= ch <= '9')
						{
							id = (id * 10) + (ch - '0');
						}
						else
						{
							num = false;
						}
					}
				}
				if (num && IsPlayerConnected(id))
				{
					setarg(paramPos, 0, id);
				}
				else
				{
					#if !defined foreach
						#define foreach(%1,%2) for (new %2 = 0; %2 < MAX_PLAYERS; %2++) if (IsPlayerConnected(%2))
						#define __SSCANF_FOREACH__
					#endif
					string[end] = '\0';
					num = false;
					new
						name[MAX_PLAYER_NAME];
					id = end - stringPos;
					foreach(Player, playerid)
					{
						GetPlayerName(playerid, name, sizeof (name));
						if (!strcmp(name, string[stringPos], true, id))
						{
							setarg(paramPos, 0, playerid);
							num = true;
							break;
						}
					}
					if (!num)
					{
						setarg(paramPos, 0, INVALID_PLAYER_ID);
					}
					string[end] = ch;
					#if defined __SSCANF_FOREACH__
						#undef foreach
						#undef __SSCANF_FOREACH__
					#endif
				}
				stringPos = end;
			}
			case 's', 'z':
			{
				new
					i = 0,
					ch;
				if (format[formatPos])
				{
					while ((ch = string[stringPos++]) && ch != delim)
					{
						setarg(paramPos, i++, ch);
					}
					if (!i)
					{
						return -1;
					}
				}
				else
				{
					while ((ch = string[stringPos++]))
					{
						setarg(paramPos, i++, ch);
					}
				}
				stringPos--;
				setarg(paramPos, i, '\0');
			}
			default:
			{
				continue;
			}
		}
		while (string[stringPos] && string[stringPos] != delim && string[stringPos] > ' ')
		{
			stringPos++;
		}
		while (string[stringPos] && (string[stringPos] == delim || string[stringPos] <= ' '))
		{
			stringPos++;
		}
		paramPos++;
	}
	do
	{
		if ((delim = format[formatPos++]) > ' ')
		{
			if (delim == '\'')
			{
				while ((delim = format[formatPos++]) && delim != '\'') {}
			}
			else if (delim != 'z')
			{
				return delim;
			}
		}
	}
	while (delim > ' ');
	return 0;
}

public CloseLspdGate()
{
	MoveDynamicObject(lspdgate, 1588.5617, -1638.0871, 12.7200, 1);
	GateOpen = 0;
	return 1;
}

public NearByMessageEx(playerid, color, string[], Float: range)
{
	new Float: PlayerX, Float: PlayerY, Float: PlayerZ;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnectedEx(i) && IsPlayerSpawned(i))
	   	{
	   		GetPlayerPos(playerid, PlayerX, PlayerY, PlayerZ);
	   		if(IsPlayerInRangeOfPoint(i, range, PlayerX, PlayerY, PlayerZ))
	   		{
			    if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i))
	    	    {
	    			SendClientMessage(i, color, string);
	    		}
	    	}
		}
	}
}

public SavePlayerData(playerid)
{
	if(Player[playerid][Authenticated] == 1)
	{
	    GetPlayerPos(playerid, Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ]);
		GetPlayerHealth(playerid, Player[playerid][LastHealth]);
		GetPlayerArmour(playerid, Player[playerid][LastArmour]);
		Player[playerid][LastInterior] = GetPlayerInterior(playerid);
		
	    new string[128];
	    
	    if(Player[playerid][AdminDuty] >= 1)
	    {
	        format(string, sizeof(string), "Accounts/%s.ini", Player[playerid][NormalName]);
	    }
	    else
	    {
	    	format(string, sizeof(string), "Accounts/%s.ini", GetName(playerid));
	    }
	    
	    if(!fexist(string))
	    {
	        dini_Create(string);
	    }

    	dini_Set(string, "Password", Player[playerid][Password]);
    	dini_IntSet(string, "AdminLevel", Player[playerid][AdminLevel]);
    	dini_FloatSet(string, "LastX", Player[playerid][LastX]);
    	dini_FloatSet(string, "LastY", Player[playerid][LastY]);
   		dini_FloatSet(string, "LastZ", Player[playerid][LastZ]);
    	dini_IntSet(string, "LastWorld", Player[playerid][LastWorld]);
    	dini_IntSet(string, "LastInterior", Player[playerid][LastInterior]);
    	
    	if(Player[playerid][AdminDuty] == 0)
    	{
    		dini_IntSet(string, "LastSkin", GetPlayerSkin(playerid));
    	}
    	
    	dini_FloatSet(string, "LastHealth", Player[playerid][LastHealth]);
    	dini_FloatSet(string, "LastArmour", Player[playerid][LastArmour]);
    	dini_IntSet(string, "LastLoginMinute", Player[playerid][LastLoginMinute]);
    	dini_IntSet(string, "LastLoginHour", Player[playerid][LastLoginHour]);
   		dini_IntSet(string, "LastLoginDay", Player[playerid][LastLoginDay]);
    	dini_IntSet(string, "LastLoginMonth", Player[playerid][LastLoginMonth]);
    	dini_IntSet(string, "LastLoginYear", Player[playerid][LastLoginYear]);
    	dini_Set(string, "LastIP", Player[playerid][LastIP]);
    	dini_IntSet(string, "Group", Player[playerid][Group]);
    	dini_IntSet(string, "GroupRank", Player[playerid][GroupRank]);
	   	dini_IntSet(string, "House", Player[playerid][House]);
    	dini_IntSet(string, "Banned", Player[playerid][Banned]);
	   	dini_IntSet(string, "Muted", Player[playerid][Muted]);
	   	dini_IntSet(string, "Money", Player[playerid][Money]);
	   	dini_IntSet(string, "WepSlot1", Player[playerid][WepSlot1]);
	   	dini_IntSet(string, "WepSlot2", Player[playerid][WepSlot2]);
	   	dini_IntSet(string, "WepSlot3", Player[playerid][WepSlot3]);
	   	dini_IntSet(string, "WepSlot4", Player[playerid][WepSlot4]);
	   	dini_IntSet(string, "WepSlot5", Player[playerid][WepSlot5]);
   		dini_IntSet(string, "WepSlot6", Player[playerid][WepSlot6]);
   		dini_IntSet(string, "WepSlot7", Player[playerid][WepSlot7]);
   		dini_IntSet(string, "WepSlot8", Player[playerid][WepSlot8]);
  		dini_IntSet(string, "WepSlot9", Player[playerid][WepSlot9]);
   		dini_IntSet(string, "WepSlot10", Player[playerid][WepSlot10]);
   		dini_IntSet(string, "WepSlot11", Player[playerid][WepSlot11]);
  	 	dini_IntSet(string, "WepSlot0", Player[playerid][WepSlot0]);
   		dini_Set(string, "Warning1", Player[playerid][Warning1]);
   		dini_Set(string, "Warning2", Player[playerid][Warning2]);
  	 	dini_Set(string, "Warning3", Player[playerid][Warning3]);
  		dini_IntSet(string, "Identity", Player[playerid][Identity]);
  		dini_IntSet(string, "Age", Player[playerid][Age]);
   		dini_IntSet(string, "ContractPrice", Player[playerid][ContractPrice]);
  	 	dini_Set(string, "Contract", Player[playerid][Contract]);
  	 	dini_IntSet(string, "PrisonDuration", Player[playerid][PrisonDuration]);
        dini_IntSet(string, "PrisonID", Player[playerid][PrisonID]);
        dini_IntSet(string, "Tutorial", Player[playerid][Tutorial]);
        dini_IntSet(string, "Hospitalized", Player[playerid][Hospitalized]);
        dini_IntSet(string, "CriminalOffences", Player[playerid][CriminalOffences]);
        dini_Set(string, "Offence1", Player[playerid][Offence1]);
        dini_Set(string, "Offence2", Player[playerid][Offence2]);
        dini_Set(string, "Offence3", Player[playerid][Offence3]);
        dini_Set(string, "Offence4", Player[playerid][Offence4]);
        dini_Set(string, "Offence5", Player[playerid][Offence5]);
        dini_Set(string, "Offence6", Player[playerid][Offence6]);
        dini_IntSet(string, "Gender", Player[playerid][Gender]);
        dini_IntSet(string, "Job", Player[playerid][Job]);
        dini_IntSet(string, "Materials", Player[playerid][Materials]);
        dini_IntSet(string, "AdminActions", Player[playerid][AdminActions]);
        dini_IntSet(string, "SecondsLoggedIn", Player[playerid][SecondsLoggedIn]);
        dini_IntSet(string, "BankMoney", Player[playerid][BankMoney]);
        dini_IntSet(string, "Crack", Player[playerid][Cocaine]);
        dini_IntSet(string, "Pot", Player[playerid][Pot]);
        dini_IntSet(string, "nMuted", Player[playerid][nMuted]);
        dini_IntSet(string, "Business", Player[playerid][Business]);
        dini_IntSet(string, "PhoneN", Player[playerid][PhoneN]);
        dini_IntSet(string, "PlayingHours", Player[playerid][PlayingHours]);
        dini_IntSet(string, "PhoneBook", Player[playerid][PhoneBook]);
        dini_IntSet(string, "InabilityToMatrun", Player[playerid][InabilityToMatrun]);
        dini_IntSet(string, "InabilityToDropCar", Player[playerid][InabilityToDropCar]);
        dini_IntSet(string, "CantFish", Player[playerid][CantFish]);
        dini_IntSet(string, "CollectedFish", Player[playerid][CollectedFish]);
        dini_FloatSet(string, "CarX", Player[playerid][CarX]);
        dini_FloatSet(string, "CarY", Player[playerid][CarY]);
        dini_FloatSet(string, "CarZ", Player[playerid][CarZ]);
        dini_FloatSet(string, "CarZAngle", Player[playerid][CarZAngle]);
        dini_IntSet(string, "CarModel", Player[playerid][PlayerCarModel]);
        dini_IntSet(string, "CarCol1", Player[playerid][CarCol1]);
        dini_IntSet(string, "CarCol2", Player[playerid][CarCol2]);
        dini_IntSet(string, "Rope", Player[playerid][Rope]);
        dini_IntSet(string, "Rags", Player[playerid][Rags]);
        dini_IntSet(string, "FailedHits", Player[playerid][FailedHits]);
        dini_IntSet(string, "SuccessfulHits", Player[playerid][SuccessfulHits]);
        dini_IntSet(string, "CarLock", Player[playerid][LockedCar]);
        dini_IntSet(string, "Radio", Player[playerid][HasRadio]);
        dini_IntSet(string, "CollegeMedia", Player[playerid][CollegeMedia]);
        dini_IntSet(string, "CollegeLaw", Player[playerid][CollegeLaw]);
        dini_IntSet(string, "CollegeEng", Player[playerid][CollegeEng]);
        dini_IntSet(string, "CollegeMath", Player[playerid][CollegeMath]);
        dini_IntSet(string, "CollegeChem", Player[playerid][CollegeChem]);
        dini_Set(string, "MarriedTo", Player[playerid][MarriedTo]);
        dini_IntSet(string, "FightBox", Player[playerid][FightBox]);
        dini_IntSet(string, "FightKungfu", Player[playerid][FightKungfu]);
        dini_IntSet(string, "FightGrabkick", Player[playerid][FightGrabkick]);
        dini_IntSet(string, "FightKneehead", Player[playerid][FightKneehead]);
        dini_IntSet(string, "FightElbow", Player[playerid][FightElbow]);
        dini_IntSet(string, "VipRank", Player[playerid][VipRank]);
        dini_IntSet(string, "WalkieTalkie", Player[playerid][WalkieTalkie]);
        dini_IntSet(string, "BankStatus", Player[playerid][BankStatus]);
        dini_IntSet(string, "PhoneCredit", Player[playerid][PhoneCredit]);
        dini_IntSet(string, "PlayerSkinSlot1", Player[playerid][PlayerSkinSlot1]);
        dini_IntSet(string, "PlayerSkinSlot2", Player[playerid][PlayerSkinSlot2]);
        dini_IntSet(string, "PlayerSkinSlot3", Player[playerid][PlayerSkinSlot3]);
        dini_IntSet(string, "AdminPIN", Player[playerid][AdminPIN]);
        dini_IntSet(string, "OwnedCarModSlot0", Player[playerid][OwnedCarModSlot0]);
        dini_IntSet(string, "OwnedCarModSlot1", Player[playerid][OwnedCarModSlot1]);
        dini_IntSet(string, "OwnedCarModSlot2", Player[playerid][OwnedCarModSlot2]);
        dini_IntSet(string, "OwnedCarModSlot3", Player[playerid][OwnedCarModSlot3]);
        dini_IntSet(string, "OwnedCarModSlot4", Player[playerid][OwnedCarModSlot4]);
        dini_IntSet(string, "OwnedCarModSlot5", Player[playerid][OwnedCarModSlot5]);
        dini_IntSet(string, "OwnedCarModSlot6", Player[playerid][OwnedCarModSlot6]);
        dini_IntSet(string, "OwnedCarModSlot7", Player[playerid][OwnedCarModSlot7]);
        dini_IntSet(string, "OwnedCarModSlot8", Player[playerid][OwnedCarModSlot8]);
        dini_IntSet(string, "OwnedCarModSlot9", Player[playerid][OwnedCarModSlot9]);
        dini_IntSet(string, "OwnedCarModSlot10", Player[playerid][OwnedCarModSlot10]);
        dini_IntSet(string, "OwnedCarModSlot11", Player[playerid][OwnedCarModSlot11]);
        dini_IntSet(string, "OwnedCarModSlot12", Player[playerid][OwnedCarModSlot12]);
        dini_IntSet(string, "OwnedCarModSlot13", Player[playerid][OwnedCarModSlot13]);
        dini_Set(string, "AdminName", Player[playerid][AdminName]);
        dini_Set(string, "NormalName", Player[playerid][NormalName]);
        dini_IntSet(string, "AdminSkin", Player[playerid][AdminSkin]);
        dini_Set(string, "Accent", Player[playerid][Accent]);
        dini_IntSet(string, "WalkieFrequency", Player[playerid][WalkieFrequency]);
        dini_IntSet(string, "PortableRadio", Player[playerid][PortableRadio]);
        dini_Set(string, "Note", Player[playerid][Note]);
        dini_IntSet(string, "CarPaintJobID", Player[playerid][CarPaintJobID]);
        dini_IntSet(string, "MeActions", Player[playerid][MeActions]);
        dini_IntSet(string, "AdsPlaced", Player[playerid][AdsPlaced]);
        dini_IntSet(string, "MatrunsExecuted", Player[playerid][MatrunsExecuted]);
        dini_IntSet(string, "HasMapApp", Player[playerid][HasMapApp]);
        dini_IntSet(string, "HasAdApp", Player[playerid][HasAdApp]);
        dini_IntSet(string, "HasPagesApp", Player[playerid][HasPagesApp]);
        dini_IntSet(string, "HasRadioApp", Player[playerid][HasRadioApp]);
        dini_IntSet(string, "AnsweredQuizQuestions", Player[playerid][AnsweredQuizQuestions]);
        dini_IntSet(string, "AchievementRank", Player[playerid][AchievementRank]);
        dini_IntSet(string, "Tester", Player[playerid][Tester]);
        dini_IntSet(string, "oMuted", Player[playerid][oMuted]);
        dini_IntSet(string, "Car2OwnedCarModSlot0", Player[playerid][Car2OwnedCarModSlot0]);
        dini_IntSet(string, "Car2OwnedCarModSlot1", Player[playerid][Car2OwnedCarModSlot1]);
        dini_IntSet(string, "Car2OwnedCarModSlot2", Player[playerid][Car2OwnedCarModSlot2]);
        dini_IntSet(string, "Car2OwnedCarModSlot3", Player[playerid][Car2OwnedCarModSlot3]);
        dini_IntSet(string, "Car2OwnedCarModSlot4", Player[playerid][Car2OwnedCarModSlot4]);
        dini_IntSet(string, "Car2OwnedCarModSlot5", Player[playerid][Car2OwnedCarModSlot5]);
        dini_IntSet(string, "Car2OwnedCarModSlot6", Player[playerid][Car2OwnedCarModSlot6]);
        dini_IntSet(string, "Car2OwnedCarModSlot7", Player[playerid][Car2OwnedCarModSlot7]);
        dini_IntSet(string, "Car2OwnedCarModSlot8", Player[playerid][Car2OwnedCarModSlot8]);
        dini_IntSet(string, "Car2OwnedCarModSlot9", Player[playerid][Car2OwnedCarModSlot9]);
        dini_IntSet(string, "Car2OwnedCarModSlot10", Player[playerid][Car2OwnedCarModSlot10]);
        dini_IntSet(string, "Car2OwnedCarModSlot11", Player[playerid][Car2OwnedCarModSlot11]);
        dini_IntSet(string, "Car2OwnedCarModSlot12", Player[playerid][Car2OwnedCarModSlot12]);
        dini_IntSet(string, "Car2OwnedCarModSlot13", Player[playerid][Car2OwnedCarModSlot13]);
        dini_IntSet(string, "Car3OwnedCarModSlot0", Player[playerid][Car3OwnedCarModSlot0]);
        dini_IntSet(string, "Car3OwnedCarModSlot1", Player[playerid][Car3OwnedCarModSlot1]);
        dini_IntSet(string, "Car3OwnedCarModSlot2", Player[playerid][Car3OwnedCarModSlot2]);
        dini_IntSet(string, "Car3OwnedCarModSlot3", Player[playerid][Car3OwnedCarModSlot3]);
        dini_IntSet(string, "Car3OwnedCarModSlot4", Player[playerid][Car3OwnedCarModSlot4]);
        dini_IntSet(string, "Car3OwnedCarModSlot5", Player[playerid][Car3OwnedCarModSlot5]);
        dini_IntSet(string, "Car3OwnedCarModSlot6", Player[playerid][Car3OwnedCarModSlot6]);
        dini_IntSet(string, "Car3OwnedCarModSlot7", Player[playerid][Car3OwnedCarModSlot7]);
        dini_IntSet(string, "Car3OwnedCarModSlot8", Player[playerid][Car3OwnedCarModSlot8]);
        dini_IntSet(string, "Car3OwnedCarModSlot9", Player[playerid][Car3OwnedCarModSlot9]);
        dini_IntSet(string, "Car3OwnedCarModSlot10", Player[playerid][Car3OwnedCarModSlot10]);
        dini_IntSet(string, "Car3OwnedCarModSlot11", Player[playerid][Car3OwnedCarModSlot11]);
        dini_IntSet(string, "Car3OwnedCarModSlot12", Player[playerid][Car3OwnedCarModSlot12]);
        dini_IntSet(string, "Car3OwnedCarModSlot13", Player[playerid][Car3OwnedCarModSlot13]);
        dini_IntSet(string, "PlayerCarModel2", Player[playerid][PlayerCarModel2]);
        dini_IntSet(string, "PlayerCarModel3", Player[playerid][PlayerCarModel3]);
        dini_FloatSet(string, "Car2ZAngle", Player[playerid][Car2ZAngle]);
        dini_FloatSet(string, "Car3ZAngle", Player[playerid][Car3ZAngle]);
        dini_IntSet(string, "Car2Col1", Player[playerid][Car2Col1]);
        dini_IntSet(string, "Car2Col2", Player[playerid][Car2Col2]);
        dini_IntSet(string, "Car3Col1", Player[playerid][Car3Col1]);
        dini_IntSet(string, "Car3Col2", Player[playerid][Car3Col2]);
        dini_IntSet(string, "Car2PaintJobID", Player[playerid][Car2PaintJobID]);
        dini_IntSet(string, "Car3PaintJobID", Player[playerid][Car3PaintJobID]);
		dini_FloatSet(string, "Car2X", Player[playerid][Car2X]);
		dini_FloatSet(string, "Car2Y", Player[playerid][Car2Y]);
		dini_FloatSet(string, "Car2Z", Player[playerid][Car2Z]);
		dini_FloatSet(string, "Car3X", Player[playerid][Car3X]);
		dini_FloatSet(string, "Car3Y", Player[playerid][Car3Y]);
		dini_FloatSet(string, "Car3Z", Player[playerid][Car3Z]);
		dini_IntSet(string, "CheckBalance", Player[playerid][CheckBalance]);
		dini_IntSet(string, "LockedCar2", Player[playerid][LockedCar2]);
		dini_IntSet(string, "LockedCar3", Player[playerid][LockedCar3]);
		dini_IntSet(string, "ReportBanStatus", Player[playerid][ReportBanStatus]);
		dini_IntSet(string, "AdminDuty", Player[playerid][AdminDuty]);
	}
	return 1;
}

public SetPlayerPosEx(playerid, Float: posx, Float: posy, Float: posz, interior, virtualworld)
{
	if(GetPlayerState(playerid) == 2)
	{
	    SetPlayerVirtualWorld(playerid, virtualworld);
	    SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), virtualworld);
	    LinkVehicleToInterior(GetPlayerVehicleID(playerid), interior);
	    SetPlayerInterior(playerid, interior);
	    SetVehiclePos(GetPlayerVehicleID(playerid), posx, posy, posz);
	    return 1;
	}
	else
	{
	    SetPlayerVirtualWorld(playerid, virtualworld);
	    SetPlayerInterior(playerid, interior);
	    SetPlayerPos(playerid, posx, posy, posz);
	    return 1;
	}
}

public RegisterPlayer(playerid, password[])
{
	new string[128], Year, Month, Day, Minute, Hour, Second, Name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, Name, sizeof(Name));
	format(string, sizeof(string), "Accounts/%s.ini", Name);
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);

	if(!fexist(string))
	{
	    MaxRegistered++;
	    dini_Create(string);
	    dini_Set(string, "Password", password);
	    dini_IntSet(string, "AdminLevel", 0);
	    dini_FloatSet(string, "LastX", 0.0);
	    format(Player[playerid][Password], 128, "%s", password);
	    dini_FloatSet(string, "LastY", 0.0);
	   	dini_FloatSet(string, "LastZ", 0.0);
	    dini_IntSet(string, "LastWorld", 0);
	    dini_IntSet(string, "LastInterior", 0);
	    dini_FloatSet(string, "LastHealth", Player[playerid][LastHealth]);
	    dini_FloatSet(string, "LastArmour", Player[playerid][LastArmour]);
	    dini_IntSet(string, "LastSkin", Player[playerid][LastSkin]);
	    dini_IntSet(string, "LastLoginMinute", Minute);
	    dini_IntSet(string, "LastLoginHour", Hour);
	    dini_IntSet(string, "LastLoginDay", Day);
	    dini_IntSet(string, "LastLoginMonth", Month);
	    dini_IntSet(string, "LastLoginYear", Year);
	    dini_Set(string, "LastIP", Player[playerid][LastIP]);
	    dini_IntSet(string, "Group", Player[playerid][Group]);
	    dini_IntSet(string, "GroupRank", Player[playerid][GroupRank]);
	    dini_IntSet(string, "House", Player[playerid][House]);
	    dini_IntSet(string, "Banned", Player[playerid][Banned]);
	    dini_IntSet(string, "Muted", Player[playerid][Muted]);
	    dini_IntSet(string, "Money", Player[playerid][Money]);
	    dini_IntSet(string, "WepSlot1", Player[playerid][WepSlot1]);
	    dini_IntSet(string, "WepSlot2", Player[playerid][WepSlot2]);
	    dini_IntSet(string, "WepSlot3", Player[playerid][WepSlot3]);
	    dini_IntSet(string, "WepSlot4", Player[playerid][WepSlot4]);
	    dini_IntSet(string, "WepSlot5", Player[playerid][WepSlot5]);
	    dini_IntSet(string, "WepSlot6", Player[playerid][WepSlot6]);
	    dini_IntSet(string, "WepSlot7", Player[playerid][WepSlot7]);
	    dini_IntSet(string, "WepSlot8", Player[playerid][WepSlot8]);
	    dini_IntSet(string, "WepSlot9", Player[playerid][WepSlot9]);
	    dini_IntSet(string, "WepSlot10", Player[playerid][WepSlot10]);
	    dini_IntSet(string, "WepSlot11", Player[playerid][WepSlot11]);
	    dini_IntSet(string, "WepSlot0", Player[playerid][WepSlot0]);
	    dini_Set(string, "Warning1", Player[playerid][Warning1]);
	    dini_Set(string, "Warning2", Player[playerid][Warning2]);
	    dini_Set(string, "Warning3", Player[playerid][Warning3]);
	    dini_IntSet(string, "Identity", Player[playerid][Identity]);
	    dini_IntSet(string, "Age", Player[playerid][Age]);
	    dini_IntSet(string, "ContractPrice", Player[playerid][ContractPrice]);
	    dini_Set(string, "Contract", Player[playerid][Contract]);
  	 	dini_IntSet(string, "PrisonDuration", Player[playerid][PrisonDuration]);
        dini_IntSet(string, "PrisonID", Player[playerid][PrisonID]);
        dini_IntSet(string, "Tutorial", Player[playerid][Tutorial]);
        dini_IntSet(string, "Hospitalized", Player[playerid][Hospitalized]);
        dini_IntSet(string, "CriminalOffences", Player[playerid][CriminalOffences]);
        dini_Set(string, "Offence1", Player[playerid][Offence1]);
        dini_Set(string, "Offence2", Player[playerid][Offence2]);
        dini_Set(string, "Offence3", Player[playerid][Offence3]);
        dini_Set(string, "Offence4", Player[playerid][Offence4]);
        dini_Set(string, "Offence5", Player[playerid][Offence5]);
        dini_Set(string, "Offence6", Player[playerid][Offence6]);
        dini_IntSet(string, "Gender", Player[playerid][Gender]);
        dini_IntSet(string, "Job", Player[playerid][Job]);
        dini_IntSet(string, "Materials", Player[playerid][Materials]);
        dini_IntSet(string, "AdminActions", Player[playerid][AdminActions]);
        dini_IntSet(string, "SecondsLoggedIn", Player[playerid][SecondsLoggedIn]);
        dini_IntSet(string, "BankMoney", Player[playerid][BankMoney]);
        dini_IntSet(string, "Crack", 0);
        dini_IntSet(string, "Pot", 0);
        dini_IntSet(string, "nMuted", Player[playerid][nMuted]);
        dini_IntSet(string, "Business", Player[playerid][Business]);
        dini_IntSet(string, "PhoneN", Player[playerid][PhoneN]);
        dini_IntSet(string, "PlayingHours", Player[playerid][PlayingHours]);
        dini_IntSet(string, "PhoneBook", Player[playerid][PhoneBook]);
        dini_IntSet(string, "InabilityToMatrun", Player[playerid][InabilityToMatrun]);
        dini_IntSet(string, "InabilityToDropCar", Player[playerid][InabilityToDropCar]);
        dini_IntSet(string, "CantFish", Player[playerid][CantFish]);
        dini_IntSet(string, "CollectedFish", Player[playerid][CollectedFish]);
        dini_FloatSet(string, "CarX", Player[playerid][CarX]);
        dini_FloatSet(string, "CarY", Player[playerid][CarY]);
        dini_FloatSet(string, "CarZ", Player[playerid][CarZ]);
        dini_FloatSet(string, "CarZAngle", Player[playerid][CarZAngle]);
        dini_IntSet(string, "CarModel", Player[playerid][PlayerCarModel]);
        dini_IntSet(string, "CarCol1", Player[playerid][CarCol1]);
        dini_IntSet(string, "CarCol2", Player[playerid][CarCol2]);
        dini_IntSet(string, "Rope", Player[playerid][Rope]);
        dini_IntSet(string, "Rags", Player[playerid][Rags]);
        dini_IntSet(string, "FailedHits", Player[playerid][FailedHits]);
        dini_IntSet(string, "SuccessfulHits", Player[playerid][SuccessfulHits]);
        dini_IntSet(string, "CarLock", Player[playerid][LockedCar]);
        dini_IntSet(string, "Radio", Player[playerid][HasRadio]);
        dini_IntSet(string, "CollegeMedia", Player[playerid][CollegeMedia]);
        dini_IntSet(string, "CollegeLaw", Player[playerid][CollegeLaw]);
        dini_IntSet(string, "CollegeEng", Player[playerid][CollegeEng]);
        dini_IntSet(string, "CollegeMath", Player[playerid][CollegeMath]);
        dini_IntSet(string, "CollegeChem", Player[playerid][CollegeChem]);
        dini_Set(string, "MarriedTo", Player[playerid][MarriedTo]);
        dini_IntSet(string, "FightBox", Player[playerid][FightBox]);
        dini_IntSet(string, "FightKungfu", Player[playerid][FightKungfu]);
        dini_IntSet(string, "FightGrabkick", Player[playerid][FightGrabkick]);
        dini_IntSet(string, "FightKneehead", Player[playerid][FightKneehead]);
        dini_IntSet(string, "FightElbow", Player[playerid][FightElbow]);
        dini_IntSet(string, "VipRank", Player[playerid][VipRank]);
        dini_IntSet(string, "WalkieTalkie", Player[playerid][WalkieTalkie]);
        dini_IntSet(string, "BankStatus", Player[playerid][BankStatus]);
        dini_IntSet(string, "PhoneCredit", Player[playerid][PhoneCredit]);
        dini_IntSet(string, "PlayerSkinSlot1", Player[playerid][PlayerSkinSlot1]);
        dini_IntSet(string, "PlayerSkinSlot2", Player[playerid][PlayerSkinSlot2]);
        dini_IntSet(string, "PlayerSkinSlot3", Player[playerid][PlayerSkinSlot3]);
        dini_IntSet(string, "AdminPIN", Player[playerid][AdminPIN]);
        dini_IntSet(string, "OwnedCarModSlot0", Player[playerid][OwnedCarModSlot0]);
        dini_IntSet(string, "OwnedCarModSlot1", Player[playerid][OwnedCarModSlot1]);
        dini_IntSet(string, "OwnedCarModSlot2", Player[playerid][OwnedCarModSlot2]);
        dini_IntSet(string, "OwnedCarModSlot3", Player[playerid][OwnedCarModSlot3]);
        dini_IntSet(string, "OwnedCarModSlot4", Player[playerid][OwnedCarModSlot4]);
        dini_IntSet(string, "OwnedCarModSlot5", Player[playerid][OwnedCarModSlot5]);
        dini_IntSet(string, "OwnedCarModSlot6", Player[playerid][OwnedCarModSlot6]);
        dini_IntSet(string, "OwnedCarModSlot7", Player[playerid][OwnedCarModSlot7]);
        dini_IntSet(string, "OwnedCarModSlot8", Player[playerid][OwnedCarModSlot8]);
        dini_IntSet(string, "OwnedCarModSlot9", Player[playerid][OwnedCarModSlot9]);
        dini_IntSet(string, "OwnedCarModSlot10", Player[playerid][OwnedCarModSlot10]);
        dini_IntSet(string, "OwnedCarModSlot11", Player[playerid][OwnedCarModSlot11]);
        dini_IntSet(string, "OwnedCarModSlot12", Player[playerid][OwnedCarModSlot12]);
        dini_IntSet(string, "OwnedCarModSlot13", Player[playerid][OwnedCarModSlot13]);
        dini_Set(string, "AdminName", Player[playerid][AdminName]);
        dini_Set(string, "NormalName", Player[playerid][NormalName]);
        dini_IntSet(string, "AdminSkin", Player[playerid][AdminSkin]);
        dini_Set(string, "Accent", Player[playerid][Accent]);
        dini_IntSet(string, "WalkieFrequency", Player[playerid][WalkieFrequency]);
        dini_IntSet(string, "PortableRadio", Player[playerid][PortableRadio]);
        dini_Set(string, "Note", Player[playerid][Note]);
        dini_IntSet(string, "CarPaintJobID", Player[playerid][CarPaintJobID]);
		dini_IntSet(string, "MeActions", Player[playerid][MeActions]);
        dini_IntSet(string, "AdsPlaced", Player[playerid][AdsPlaced]);
        dini_IntSet(string, "MatrunsExecuted", Player[playerid][MatrunsExecuted]);
        dini_IntSet(string, "HasMapApp", Player[playerid][HasMapApp]);
        dini_IntSet(string, "HasAdApp", Player[playerid][HasAdApp]);
        dini_IntSet(string, "HasPagesApp", Player[playerid][HasPagesApp]);
        dini_IntSet(string, "HasRadioApp", Player[playerid][HasRadioApp]);
        dini_IntSet(string, "AnsweredQuizQuestions", Player[playerid][AnsweredQuizQuestions]);
        dini_IntSet(string, "AchievementRank", Player[playerid][AchievementRank]);
        dini_IntSet(string, "Tester", Player[playerid][Tester]);
        dini_IntSet(string, "oMuted", Player[playerid][oMuted]);
        dini_IntSet(string, "Car2OwnedCarModSlot0", Player[playerid][Car2OwnedCarModSlot0]);
        dini_IntSet(string, "Car2OwnedCarModSlot1", Player[playerid][Car2OwnedCarModSlot1]);
        dini_IntSet(string, "Car2OwnedCarModSlot2", Player[playerid][Car2OwnedCarModSlot2]);
        dini_IntSet(string, "Car2OwnedCarModSlot3", Player[playerid][Car2OwnedCarModSlot3]);
        dini_IntSet(string, "Car2OwnedCarModSlot4", Player[playerid][Car2OwnedCarModSlot4]);
        dini_IntSet(string, "Car2OwnedCarModSlot5", Player[playerid][Car2OwnedCarModSlot5]);
        dini_IntSet(string, "Car2OwnedCarModSlot6", Player[playerid][Car2OwnedCarModSlot6]);
        dini_IntSet(string, "Car2OwnedCarModSlot7", Player[playerid][Car2OwnedCarModSlot7]);
        dini_IntSet(string, "Car2OwnedCarModSlot8", Player[playerid][Car2OwnedCarModSlot8]);
        dini_IntSet(string, "Car2OwnedCarModSlot9", Player[playerid][Car2OwnedCarModSlot9]);
        dini_IntSet(string, "Car2OwnedCarModSlot10", Player[playerid][Car2OwnedCarModSlot10]);
        dini_IntSet(string, "Car2OwnedCarModSlot11", Player[playerid][Car2OwnedCarModSlot11]);
        dini_IntSet(string, "Car2OwnedCarModSlot12", Player[playerid][Car2OwnedCarModSlot12]);
        dini_IntSet(string, "Car2OwnedCarModSlot13", Player[playerid][Car2OwnedCarModSlot13]);
        dini_IntSet(string, "Car3OwnedCarModSlot0", Player[playerid][Car3OwnedCarModSlot0]);
        dini_IntSet(string, "Car3OwnedCarModSlot1", Player[playerid][Car3OwnedCarModSlot1]);
        dini_IntSet(string, "Car3OwnedCarModSlot2", Player[playerid][Car3OwnedCarModSlot2]);
        dini_IntSet(string, "Car3OwnedCarModSlot3", Player[playerid][Car3OwnedCarModSlot3]);
        dini_IntSet(string, "Car3OwnedCarModSlot4", Player[playerid][Car3OwnedCarModSlot4]);
        dini_IntSet(string, "Car3OwnedCarModSlot5", Player[playerid][Car3OwnedCarModSlot5]);
        dini_IntSet(string, "Car3OwnedCarModSlot6", Player[playerid][Car3OwnedCarModSlot6]);
        dini_IntSet(string, "Car3OwnedCarModSlot7", Player[playerid][Car3OwnedCarModSlot7]);
        dini_IntSet(string, "Car3OwnedCarModSlot8", Player[playerid][Car3OwnedCarModSlot8]);
        dini_IntSet(string, "Car3OwnedCarModSlot9", Player[playerid][Car3OwnedCarModSlot9]);
        dini_IntSet(string, "Car3OwnedCarModSlot10", Player[playerid][Car3OwnedCarModSlot10]);
        dini_IntSet(string, "Car3OwnedCarModSlot11", Player[playerid][Car3OwnedCarModSlot11]);
        dini_IntSet(string, "Car3OwnedCarModSlot12", Player[playerid][Car3OwnedCarModSlot12]);
        dini_IntSet(string, "Car3OwnedCarModSlot13", Player[playerid][Car3OwnedCarModSlot13]);
        dini_IntSet(string, "PlayerCarModel2", Player[playerid][PlayerCarModel2]);
        dini_IntSet(string, "PlayerCarModel3", Player[playerid][PlayerCarModel3]);
        dini_FloatSet(string, "Car2ZAngle", Player[playerid][Car2ZAngle]);
        dini_FloatSet(string, "Car3ZAngle", Player[playerid][Car3ZAngle]);
        dini_IntSet(string, "Car2Col1", Player[playerid][Car2Col1]);
        dini_IntSet(string, "Car2Col2", Player[playerid][Car2Col2]);
        dini_IntSet(string, "Car3Col1", Player[playerid][Car3Col1]);
        dini_IntSet(string, "Car3Col2", Player[playerid][Car3Col2]);
        dini_IntSet(string, "Car2PaintJobID", Player[playerid][Car2PaintJobID]);
        dini_IntSet(string, "Car3PaintJobID", Player[playerid][Car3PaintJobID]);
		dini_FloatSet(string, "Car2X", Player[playerid][Car2X]);
		dini_FloatSet(string, "Car2Y", Player[playerid][Car2Y]);
		dini_FloatSet(string, "Car2Z", Player[playerid][Car2Z]);
		dini_FloatSet(string, "Car3X", Player[playerid][Car3X]);
		dini_FloatSet(string, "Car3Y", Player[playerid][Car3Y]);
		dini_FloatSet(string, "Car3Z", Player[playerid][Car3Z]);
		dini_IntSet(string, "CheckBalance", Player[playerid][CheckBalance]);
		dini_IntSet(string, "LockedCar2", Player[playerid][LockedCar2]);
		dini_IntSet(string, "LockedCar3", Player[playerid][LockedCar3]);
		dini_IntSet(string, "ReportBanStatus", Player[playerid][ReportBanStatus]);
		dini_IntSet(string, "AdminDuty", Player[playerid][AdminDuty]);
		
	    Player[playerid][BankMoney] = NoobCash;
	    Player[playerid][Money] = NoobCash / 3;
	    ResetPlayerMoney(playerid);
	    GivePlayerMoney(playerid, Player[playerid][Money]);
	    
	    Player[playerid][LastLoginMinute] = Minute;
	    Player[playerid][LastLoginHour] = Hour;
	    Player[playerid][LastLoginDay] = Day;
	    Player[playerid][LastLoginMonth] = Month;
	    Player[playerid][LastLoginYear] = Year;
	    
	    if(strlen(Player[playerid][Accent]) < 1)
		{
			format(Player[playerid][Accent], 128, "American");
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "That account already exists! Login!");
	}
	return 1;
}

stock SpawnOwnedCar(playerid, slotid)
{
	if(IsPlayerConnectedEx(playerid))
	{
		switch(slotid)
		{
		    case 1:
		    {
		        if(Player[playerid][PlayerCarModel] >= 1)
		        {
		            if(Player[playerid][CarLinkID] >= 1)
		            {
		                DestroyVehicle(Player[playerid][CarLinkID]);
	                    Player[playerid][CarLinkID] = 0;
		            }

				    CarCount++;
				    OwnedCarCount++;
				    Player[playerid][CarLinkID] = CreateVehicle(Player[playerid][PlayerCarModel], Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ], Player[playerid][CarZAngle], Player[playerid][CarCol1], Player[playerid][CarCol2], -1);
				    SendClientMessage(playerid, WHITE, "Your first owned vehicle has been spawned. If you can't find it, please use the /callcar command.");

					if(GetVehicleModel(Player[playerid][CarLinkID]) != Player[playerid][PlayerCarModel])
					{
		                DestroyVehicle(Player[playerid][CarLinkID]);
               			Player[playerid][CarLinkID] = 0;
					    Player[playerid][CarLinkID] = CreateVehicle(Player[playerid][PlayerCarModel], Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ], Player[playerid][CarZAngle], Player[playerid][CarCol1], Player[playerid][CarCol2], -1);
					}

				    ChangeVehiclePaintjob(Player[playerid][CarLinkID], Player[playerid][CarPaintJobID]);

					if(Player[playerid][OwnedCarModSlot0] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot0]);
				    }

					if(Player[playerid][OwnedCarModSlot1] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot1]);
				    }

					if(Player[playerid][OwnedCarModSlot2] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot2]);
				    }

					if(Player[playerid][OwnedCarModSlot3] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot3]);
				    }

					if(Player[playerid][OwnedCarModSlot4] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot4]);
				    }

					if(Player[playerid][OwnedCarModSlot5] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot5]);
				    }

					if(Player[playerid][OwnedCarModSlot6] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot6]);
				    }

					if(Player[playerid][OwnedCarModSlot7] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot7]);
				    }

					if(Player[playerid][OwnedCarModSlot9] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot9]);
				    }

					if(Player[playerid][OwnedCarModSlot10] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot10]);
				    }

					if(Player[playerid][OwnedCarModSlot11] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot11]);
				    }

					if(Player[playerid][OwnedCarModSlot12] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot12]);
				    }

					if(Player[playerid][OwnedCarModSlot13] > 0)
				    {
				        AddVehicleComponent(Player[playerid][CarLinkID], Player[playerid][OwnedCarModSlot13]);
				    }
			    }
		    }
		    case 2:
		    {
		        if(Player[playerid][PlayerCarModel2] >= 1)
		        {
		            if(Player[playerid][Car2LinkID] >= 1)
		            {
		                DestroyVehicle(Player[playerid][Car2LinkID]);
		                Player[playerid][Car2LinkID] = 0;
		            }
		            
				    CarCount++;
				    OwnedCarCount++;
				    Player[playerid][Car2LinkID] = CreateVehicle(Player[playerid][PlayerCarModel2], Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z], Player[playerid][Car2ZAngle], Player[playerid][Car2Col1], Player[playerid][Car2Col2], -1);
				    SendClientMessage(playerid, WHITE, "Your second owned vehicle has been spawned. If you can't find it, please use the /callcar command.");

					if(GetVehicleModel(Player[playerid][Car2LinkID]) != Player[playerid][PlayerCarModel2])
					{
		                DestroyVehicle(Player[playerid][Car2LinkID]);
		                Player[playerid][Car2LinkID] = 0;
					    Player[playerid][Car2LinkID] = CreateVehicle(Player[playerid][PlayerCarModel2], Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z], Player[playerid][Car2ZAngle], Player[playerid][Car2Col1], Player[playerid][Car2Col2], -1);
					}

				    ChangeVehiclePaintjob(Player[playerid][Car2LinkID], Player[playerid][Car2PaintJobID]);

					if(Player[playerid][Car2OwnedCarModSlot0] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot0]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot1] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot1]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot2] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot2]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot3] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot3]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot4] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot4]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot5] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot5]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot6] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot6]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot7] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot7]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot9] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot9]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot10] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot10]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot11] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot11]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot12] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot12]);
				    }

					if(Player[playerid][Car2OwnedCarModSlot13] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car2LinkID], Player[playerid][Car2OwnedCarModSlot13]);
				    }
		    	}
		    }
		    case 3:
		    {
		        if(Player[playerid][PlayerCarModel3] >= 1)
		        {
				    CarCount++;
				    OwnedCarCount++;
				    Player[playerid][Car3LinkID] = CreateVehicle(Player[playerid][PlayerCarModel3], Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z], Player[playerid][Car3ZAngle], Player[playerid][Car3Col1], Player[playerid][Car3Col2], -1);
				    SendClientMessage(playerid, WHITE, "Your third owned vehicle has been spawned. If you can't find it, please use the /callcar command.");

					if(GetVehicleModel(Player[playerid][Car3LinkID]) != Player[playerid][PlayerCarModel3])
					{
		                DestroyVehicle(Player[playerid][Car3LinkID]);
		                Player[playerid][Car3LinkID] = 0;
					    Player[playerid][Car3LinkID] = CreateVehicle(Player[playerid][PlayerCarModel3], Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z], Player[playerid][Car3ZAngle], Player[playerid][Car3Col1], Player[playerid][Car3Col2], -1);
					}
					
				    ChangeVehiclePaintjob(Player[playerid][Car3LinkID], Player[playerid][Car3PaintJobID]);

					if(Player[playerid][Car3OwnedCarModSlot0] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot0]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot1] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot1]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot2] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot2]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot3] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot3]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot4] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot4]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot5] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot5]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot6] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot6]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot7] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot7]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot9] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot9]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot10] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot10]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot11] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot11]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot12] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot12]);
				    }

					if(Player[playerid][Car3OwnedCarModSlot13] > 0)
				    {
				        AddVehicleComponent(Player[playerid][Car3LinkID], Player[playerid][Car3OwnedCarModSlot13]);
				    }
				}
		    }
		}
	}
}

public GetOwnedCarMods(playerid)
{
	Player[playerid][OwnedCarModSlot0] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 0);
	Player[playerid][OwnedCarModSlot1] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 1);
	Player[playerid][OwnedCarModSlot2] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 2);
	Player[playerid][OwnedCarModSlot3] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 3);
	Player[playerid][OwnedCarModSlot4] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 4);
	Player[playerid][OwnedCarModSlot5] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 5);
	Player[playerid][OwnedCarModSlot6] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 6);
	Player[playerid][OwnedCarModSlot7] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 7);
	Player[playerid][OwnedCarModSlot8] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 8);
	Player[playerid][OwnedCarModSlot9] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 9);
	Player[playerid][OwnedCarModSlot10] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 10);
	Player[playerid][OwnedCarModSlot11] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 11);
	Player[playerid][OwnedCarModSlot12] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 12);
	Player[playerid][OwnedCarModSlot13] = GetVehicleComponentInSlot(Player[playerid][CarLinkID], 13);

	Player[playerid][Car2OwnedCarModSlot0] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 0);
	Player[playerid][Car2OwnedCarModSlot1] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 1);
	Player[playerid][Car2OwnedCarModSlot2] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 2);
	Player[playerid][Car2OwnedCarModSlot3] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 3);
	Player[playerid][Car2OwnedCarModSlot4] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 4);
	Player[playerid][Car2OwnedCarModSlot5] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 5);
	Player[playerid][Car2OwnedCarModSlot6] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 6);
	Player[playerid][Car2OwnedCarModSlot7] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 7);
	Player[playerid][Car2OwnedCarModSlot8] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 8);
	Player[playerid][Car2OwnedCarModSlot9] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 9);
	Player[playerid][Car2OwnedCarModSlot10] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 10);
	Player[playerid][Car2OwnedCarModSlot11] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 11);
	Player[playerid][Car2OwnedCarModSlot12] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 12);
	Player[playerid][Car2OwnedCarModSlot13] = GetVehicleComponentInSlot(Player[playerid][Car2LinkID], 13);

	Player[playerid][Car3OwnedCarModSlot0] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 0);
	Player[playerid][Car3OwnedCarModSlot1] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 1);
	Player[playerid][Car3OwnedCarModSlot2] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 2);
	Player[playerid][Car3OwnedCarModSlot3] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 3);
	Player[playerid][Car3OwnedCarModSlot4] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 4);
	Player[playerid][Car3OwnedCarModSlot5] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 5);
	Player[playerid][Car3OwnedCarModSlot6] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 6);
	Player[playerid][Car3OwnedCarModSlot7] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 7);
	Player[playerid][Car3OwnedCarModSlot8] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 8);
	Player[playerid][Car3OwnedCarModSlot9] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 9);
	Player[playerid][Car3OwnedCarModSlot10] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 10);
	Player[playerid][Car3OwnedCarModSlot11] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 11);
	Player[playerid][Car3OwnedCarModSlot12] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 12);
	Player[playerid][Car3OwnedCarModSlot13] = GetVehicleComponentInSlot(Player[playerid][Car3LinkID], 13);

	return 1;
}

public OnPlayerLoginAttempt(playerid, password[])
{
	new string[128], Year, Month, Day, Minute, Hour, Second, Name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, Name, sizeof(Name));
	format(string, sizeof(string), "Accounts/%s.ini", Name);
	
	if(Player[playerid][LoginAttempts] == 3)
	{
	    new hour, minute, second, day, year, month;
        gettime(hour, minute, second);
        getdate(year, month, day);
        #pragma unused second
	    new IP[21];
	    GetPlayerIp(playerid, IP, sizeof(IP));
		format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | THREE FAILED PASSWORD ATTEMPTS | System", day, month, year, hour, minute, IP, Name);
		BanLog(string);
	    SendClientMessage(playerid, ADMINORANGE, "You have used your three attempts.");
	    Ban(playerid);
	}
	
	getdate(Year, Month, Day);
	gettime(Hour, Minute, Second);
	
	if(fexist(string))
	{
	    if(strcmp(dini_Get(string, "Password"), password, false) == 0)
	    {
	        MaxLoggedIn++;
	        Player[playerid][Authenticated] = 1;
	        Player[playerid][Password] = dini_Get(string, "Password");
	        Player[playerid][AdminLevel] = dini_Int(string, "AdminLevel");
	        Player[playerid][LastX] = dini_Float(string, "LastX");
	        Player[playerid][LastY] = dini_Float(string, "LastY");
	        Player[playerid][LastZ] = dini_Float(string, "LastZ");
	        Player[playerid][LastWorld] = dini_Int(string, "LastWorld");
	        Player[playerid][LastInterior] = dini_Int(string, "LastInterior");
	        Player[playerid][LastSkin] = dini_Int(string, "LastSkin");
	        Player[playerid][LastHealth] = dini_Float(string, "LastHealth");
	        Player[playerid][LastArmour] = dini_Float(string, "LastArmour");
	        Player[playerid][LastLoginYear] = dini_Int(string, "LastLoginYear");
	        Player[playerid][LastLoginMonth] = dini_Int(string, "LastLoginMonth");
	        Player[playerid][LastLoginDay] = dini_Int(string, "LastLoginDay");
	        Player[playerid][Group] = dini_Int(string, "Group");
	        Player[playerid][GroupRank] = dini_Int(string, "GroupRank");
	        Player[playerid][House] = dini_Int(string, "House");
	        Player[playerid][Banned] = dini_Int(string, "Banned");
	        Player[playerid][Muted] = dini_Int(string, "Muted");
	        Player[playerid][Money] = dini_Int(string, "Money");
	        Player[playerid][WepSlot1] = dini_Int(string, "WepSlot1");
	        Player[playerid][WepSlot2] = dini_Int(string, "WepSlot2");
	        Player[playerid][WepSlot3] = dini_Int(string, "WepSlot3");
	        Player[playerid][WepSlot4] = dini_Int(string, "WepSlot4");
	        Player[playerid][WepSlot5] = dini_Int(string, "WepSlot5");
	        Player[playerid][WepSlot6] = dini_Int(string, "WepSlot6");
	        Player[playerid][WepSlot7] = dini_Int(string, "WepSlot7");
	        Player[playerid][WepSlot8] = dini_Int(string, "WepSlot8");
	        Player[playerid][WepSlot9] = dini_Int(string, "WepSlot9");
	        Player[playerid][WepSlot10] = dini_Int(string, "WepSlot10");
	        Player[playerid][WepSlot11] = dini_Int(string, "WepSlot11");
	        Player[playerid][WepSlot0] = dini_Int(string, "WepSlot0");
	        Player[playerid][Warning1] = dini_Get(string, "Warning1");
	        Player[playerid][Warning2] = dini_Get(string, "Warning2");
	        Player[playerid][Warning3] = dini_Get(string, "Warning3");
	        Player[playerid][Identity] = dini_Int(string, "Identity");
	        Player[playerid][Age] = dini_Int(string, "Age");
	    	Player[playerid][ContractPrice] = dini_Int(string, "ContractPrice");
	    	Player[playerid][Contract] = dini_Get(string, "Contract");
  	 		Player[playerid][PrisonDuration] = dini_Int(string, "PrisonDuration");
        	Player[playerid][PrisonID] = dini_Int(string, "PrisonID");
        	Player[playerid][Tutorial] = dini_Int(string, "Tutorial");
        	Player[playerid][Hospitalized] = dini_Int(string, "Hospitalized");
        	Player[playerid][CriminalOffences] = dini_Int(string, "CriminalOffences");
        	Player[playerid][Offence1] = dini_Get(string, "Offence1");
        	Player[playerid][Offence2] = dini_Get(string, "Offence2");
        	Player[playerid][Offence3] = dini_Get(string, "Offence3");
        	Player[playerid][Offence4] = dini_Get(string, "Offence4");
        	Player[playerid][Offence5] = dini_Get(string, "Offence5");
        	Player[playerid][Offence6] = dini_Get(string, "Offence6");
        	Player[playerid][Gender] = dini_Int(string, "Gender");
        	Player[playerid][Job] = dini_Int(string, "Job");
        	Player[playerid][Materials] = dini_Int(string, "Materials");
        	Player[playerid][AdminActions] = dini_Int(string, "AdminActions");
        	Player[playerid][SecondsLoggedIn] = dini_Int(string, "SecondsLoggedIn");
        	Player[playerid][BankMoney] = dini_Int(string, "BankMoney");
        	Player[playerid][Cocaine] = dini_Int(string, "Crack");
        	Player[playerid][Pot] = dini_Int(string, "Pot");
        	Player[playerid][nMuted] = dini_Int(string, "nMuted");
        	Player[playerid][Business] = dini_Int(string, "Business");
        	Player[playerid][PhoneN] = dini_Int(string, "PhoneN");
        	Player[playerid][PlayingHours] = dini_Int(string, "PlayingHours");
        	Player[playerid][PhoneBook] = dini_Int(string, "PhoneBook");
        	Player[playerid][InabilityToMatrun] = dini_Int(string, "InabilityToMatrun");
        	Player[playerid][InabilityToDropCar] = dini_Int(string, "InabilityToDropCar");
        	Player[playerid][CantFish] = dini_Int(string, "CantFish");
        	Player[playerid][CollectedFish] = dini_Int(string, "CollectedFish");
        	Player[playerid][CarX] = dini_Float(string, "CarX");
            Player[playerid][CarY] = dini_Float(string, "CarY");
            Player[playerid][CarZ] = dini_Float(string, "CarZ");
            Player[playerid][PlayerCarModel] = dini_Int(string, "CarModel");
            Player[playerid][CarZAngle] = dini_Float(string, "CarZAngle");
            Player[playerid][CarCol1] = dini_Int(string, "CarCol1");
            Player[playerid][CarCol2] = dini_Int(string, "CarCol2");
			Player[playerid][Rope] = dini_Int(string, "Rope");
			Player[playerid][Rags] = dini_Int(string, "Rags");
        	Player[playerid][FailedHits] = dini_Int(string, "FailedHits");
         	Player[playerid][SuccessfulHits] = dini_Int(string, "SuccessfulHits");
         	Player[playerid][LockedCar] = dini_Int(string, "CarLock");
         	Player[playerid][HasRadio] = dini_Int(string, "Radio");
    		Player[playerid][CollegeMedia] = dini_Int(string, "CollegeMedia");
		    Player[playerid][CollegeLaw] = dini_Int(string, "CollegeLaw");
		    Player[playerid][CollegeEng] = dini_Int(string, "CollegeEng");
		    Player[playerid][CollegeMath] = dini_Int(string, "CollegeMath");
			Player[playerid][CollegeChem] = dini_Int(string, "CollegeChem");
			Player[playerid][MarriedTo] = dini_Get(string, "MarriedTo");
			Player[playerid][FightBox] = dini_Int(string, "FightBox");
			Player[playerid][FightKungfu] = dini_Int(string, "FightKungfu");
			Player[playerid][FightKneehead] = dini_Int(string, "FightKneehead");
			Player[playerid][FightGrabkick] = dini_Int(string, "FightGrabkick");
			Player[playerid][FightElbow] = dini_Int(string, "FightElbow");
			Player[playerid][VipRank] = dini_Int(string, "VipRank");
			Player[playerid][WalkieTalkie] = dini_Int(string, "WalkieTalkie");
			Player[playerid][BankStatus] = dini_Int(string, "BankStatus");
			Player[playerid][PhoneCredit] = dini_Int(string, "PhoneCredit");
			Player[playerid][PlayerSkinSlot1] = dini_Int(string, "PlayerSkinSlot1");
			Player[playerid][PlayerSkinSlot2] = dini_Int(string, "PlayerSkinSlot2");
			Player[playerid][PlayerSkinSlot3] = dini_Int(string, "PlayerSkinSlot3");
			Player[playerid][AdminPIN] = dini_Int(string, "AdminPIN");
			Player[playerid][OwnedCarModSlot0] = dini_Int(string, "OwnedCarModSlot0");
			Player[playerid][OwnedCarModSlot1] = dini_Int(string, "OwnedCarModSlot1");
			Player[playerid][OwnedCarModSlot2] = dini_Int(string, "OwnedCarModSlot2");
			Player[playerid][OwnedCarModSlot3] = dini_Int(string, "OwnedCarModSlot3");
			Player[playerid][OwnedCarModSlot4] = dini_Int(string, "OwnedCarModSlot4");
			Player[playerid][OwnedCarModSlot5] = dini_Int(string, "OwnedCarModSlot5");
			Player[playerid][OwnedCarModSlot6] = dini_Int(string, "OwnedCarModSlot6");
			Player[playerid][OwnedCarModSlot7] = dini_Int(string, "OwnedCarModSlot7");
			Player[playerid][OwnedCarModSlot8] = dini_Int(string, "OwnedCarModSlot8");
			Player[playerid][OwnedCarModSlot9] = dini_Int(string, "OwnedCarModSlot9");
			Player[playerid][OwnedCarModSlot10] = dini_Int(string, "OwnedCarModSlot10");
			Player[playerid][OwnedCarModSlot11] = dini_Int(string, "OwnedCarModSlot11");
			Player[playerid][OwnedCarModSlot12] = dini_Int(string, "OwnedCarModSlot12");
			Player[playerid][OwnedCarModSlot13] = dini_Int(string, "OwnedCarModSlot13");
            Player[playerid][AdminName] = dini_Get(string, "AdminName");
            Player[playerid][NormalName] = dini_Get(string, "NormalName");
            Player[playerid][AdminSkin] = dini_Int(string, "AdminSkin");
            Player[playerid][Accent] = dini_Get(string, "Accent");
            Player[playerid][WalkieFrequency] = dini_Int(string, "WalkieFrequency");
            Player[playerid][PortableRadio] = dini_Int(string, "PortableRadio");
            Player[playerid][Note] = dini_Get(string, "Note");
            Player[playerid][CarPaintJobID] = dini_Int(string, "CarPaintJobID");
            Player[playerid][MeActions] = dini_Int(string, "MeActions");
	        Player[playerid][AdsPlaced] = dini_Int(string, "AdsPlaced");
	        Player[playerid][MatrunsExecuted] = dini_Int(string, "MatrunsExecuted");
        	Player[playerid][HasMapApp] = dini_Int(string, "HasMapApp");
        	Player[playerid][HasAdApp] = dini_Int(string, "HasAdApp");
        	Player[playerid][HasPagesApp] = dini_Int(string, "HasPagesApp");
        	Player[playerid][HasRadioApp] = dini_Int(string, "HasRadioApp");
        	Player[playerid][AnsweredQuizQuestions] = dini_Int(string, "AnsweredQuizQuestions");
            Player[playerid][AchievementRank] = dini_Int(string, "AchievementRank");
            Player[playerid][Tester] = dini_Int(string, "Tester");
            Player[playerid][oMuted] = dini_Int(string, "oMuted");
            Player[playerid][Car2OwnedCarModSlot0] = dini_Int(string, "Car2OwnedCarModSlot0");
            Player[playerid][Car2OwnedCarModSlot1] = dini_Int(string, "Car2OwnedCarModSlot1");
            Player[playerid][Car2OwnedCarModSlot2] = dini_Int(string, "Car2OwnedCarModSlot2");
            Player[playerid][Car2OwnedCarModSlot3] = dini_Int(string, "Car2OwnedCarModSlot3");
            Player[playerid][Car2OwnedCarModSlot4] = dini_Int(string, "Car2OwnedCarModSlot4");
            Player[playerid][Car2OwnedCarModSlot5] = dini_Int(string, "Car2OwnedCarModSlot5");
            Player[playerid][Car2OwnedCarModSlot6] = dini_Int(string, "Car2OwnedCarModSlot6");
            Player[playerid][Car2OwnedCarModSlot7] = dini_Int(string, "Car2OwnedCarModSlot7");
            Player[playerid][Car2OwnedCarModSlot8] = dini_Int(string, "Car2OwnedCarModSlot8");
            Player[playerid][Car2OwnedCarModSlot9] = dini_Int(string, "Car2OwnedCarModSlot9");
            Player[playerid][Car2OwnedCarModSlot10] = dini_Int(string, "Car2OwnedCarModSlot10");
            Player[playerid][Car2OwnedCarModSlot11] = dini_Int(string, "Car2OwnedCarModSlot11");
            Player[playerid][Car2OwnedCarModSlot12] = dini_Int(string, "Car2OwnedCarModSlot12");
            Player[playerid][Car2OwnedCarModSlot13] = dini_Int(string, "Car2OwnedCarModSlot13");
            Player[playerid][Car3OwnedCarModSlot0] = dini_Int(string, "Car3OwnedCarModSlot0");
            Player[playerid][Car3OwnedCarModSlot1] = dini_Int(string, "Car3OwnedCarModSlot1");
            Player[playerid][Car3OwnedCarModSlot2] = dini_Int(string, "Car3OwnedCarModSlot2");
            Player[playerid][Car3OwnedCarModSlot3] = dini_Int(string, "Car3OwnedCarModSlot3");
            Player[playerid][Car3OwnedCarModSlot4] = dini_Int(string, "Car3OwnedCarModSlot4");
            Player[playerid][Car3OwnedCarModSlot5] = dini_Int(string, "Car3OwnedCarModSlot5");
            Player[playerid][Car3OwnedCarModSlot6] = dini_Int(string, "Car3OwnedCarModSlot6");
            Player[playerid][Car3OwnedCarModSlot7] = dini_Int(string, "Car3OwnedCarModSlot7");
            Player[playerid][Car3OwnedCarModSlot8] = dini_Int(string, "Car3OwnedCarModSlot8");
            Player[playerid][Car3OwnedCarModSlot9] = dini_Int(string, "Car3OwnedCarModSlot9");
            Player[playerid][Car3OwnedCarModSlot10] = dini_Int(string, "Car3OwnedCarModSlot10");
            Player[playerid][Car3OwnedCarModSlot11] = dini_Int(string, "Car3OwnedCarModSlot11");
            Player[playerid][Car3OwnedCarModSlot12] = dini_Int(string, "Car3OwnedCarModSlot12");
            Player[playerid][Car3OwnedCarModSlot13] = dini_Int(string, "Car3OwnedCarModSlot13");
            Player[playerid][PlayerCarModel3] = dini_Int(string, "PlayerCarModel3");
            Player[playerid][PlayerCarModel2] = dini_Int(string, "PlayerCarModel2");
            Player[playerid][Car2X] = dini_Float(string, "Car2X");
            Player[playerid][Car2Y] = dini_Float(string, "Car2Y");
            Player[playerid][Car2Z] = dini_Float(string, "Car2Z");
            Player[playerid][Car3X] = dini_Float(string, "Car3X");
            Player[playerid][Car3Y] = dini_Float(string, "Car3Y");
            Player[playerid][Car3Z] = dini_Float(string, "Car3Z");
            Player[playerid][Car2PaintJobID] = dini_Int(string, "Car2PaintJobID");
            Player[playerid][Car3PaintJobID] = dini_Int(string, "Car3PaintJobID");
            Player[playerid][Car2ZAngle] = dini_Int(string, "Car2ZAngle");
            Player[playerid][Car3ZAngle] = dini_Int(string, "Car3ZAngle");
            Player[playerid][Car2Col1] = dini_Int(string, "Car2Col1");
            Player[playerid][Car2Col2] = dini_Int(string, "Car2Col2");
            Player[playerid][Car3Col1] = dini_Int(string, "Car3Col1");
            Player[playerid][Car3Col2] = dini_Int(string, "Car3Col2");
            Player[playerid][CheckBalance] = dini_Int(string, "CheckBalance");
            Player[playerid][LockedCar2] = dini_Int(string, "LockedCar2");
			Player[playerid][LockedCar3] = dini_Int(string, "LockedCar3");
			Player[playerid][ReportBanStatus] = dini_Int(string, "ReportBanStatus");
			Player[playerid][AdminDuty] = dini_Int(string, "AdminDuty");
			
			if(Player[playerid][AdminDuty] == 1)
			{
			    if(strlen(Player[playerid][AdminName]) >= 1 || strcmp(Player[playerid][AdminName], "Nothing", true) == 0)
			    {
			        SendClientMessage(playerid, WHITE, "You are now on admin duty. You will appear on the /admins list and you'll be able to view reports.");
			        Player[playerid][AdminDuty] = 1;

			        if(Player[playerid][AdminLevel] >= 3)
			        {
			        	SetPlayerHealth(playerid, 500000);
			        }

			        format(Player[playerid][NormalName], 255, "%s", GetName(playerid));

			        SetPlayerName(playerid, Player[playerid][AdminName]);
			        SetPlayerSkin(playerid, Player[playerid][AdminSkin]);

			        if(Player[playerid][HospitalTime] >= 1)
			        {
			            Player[playerid][HospitalTime] = 0;
			            SetCameraBehindPlayer(playerid);
			            SetPlayerPos(playerid, SpawnX, SpawnY, SpawnZ);
			            SetPlayerDrunkLevel(playerid, 0);
			            SendClientMessage(playerid, WHITE, "You have been de-hospitalized.");
			        }

			        format(string, sizeof(string), "%s (%s) is now on Admin Duty (just authenticated, but logged on duty).", Player[playerid][AdminName], Player[playerid][NormalName]);
			        SendToAdmins(ADMINORANGE, string, 0);
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You haven't set an administrators' name yet.");
		        }
			}

            if(strlen(Player[playerid][AdminName]) < 1)
            {
                format(Player[playerid][AdminName], 128, "Nothing");
            }
            
            if(strlen(Player[playerid][NormalName]) < 1)
            {
                format(Player[playerid][NormalName], 255, "%s", GetName(playerid));
            }
            
            if(strfind(Player[playerid][Note], "Nothing", false))
            {
                if(strlen(Player[playerid][Note]) == 0)
                {
                    format(Player[playerid][Note], 128, "Nothing");
                }
                else
                {
	                format(string, sizeof(string), "OFFLINE NOTE FROM AN ADMIN: %s", Player[playerid][Note]);
	                SendClientMessage(playerid, ADMINORANGE, string);
	                
	                format(Player[playerid][Note], 128, "Nothing");
                }
            }
            else
            {
                format(Player[playerid][Note], 128, "Nothing");
            }

            if(strlen(Player[playerid][Password]) < 1)
            {
                ShowPlayerDialog(playerid, 3666, DIALOG_STYLE_PASSWORD, "Password", "Please change your password.", "Login", "Cancel");
            }

			if(Player[playerid][GroupRank] >= 1 && Player[playerid][Group] < 1)
			{
			    Player[playerid][GroupRank] = 0;
			}
			
			if(Player[playerid][AdminLevel] == -1)
			{
			    SendClientMessage(playerid, WHITE, "You are no longer an administrator.");
			    Player[playerid][AdminLevel] = 0;
			}
			
			if(Player[playerid][Banned] == -1)
			{
			    SendClientMessage(playerid, WHITE, "Unban Successful.");
			    Player[playerid][Banned] = 0;
			}

			SpawnOwnedCar(playerid, 1);
			SpawnOwnedCar(playerid, 2);
			SpawnOwnedCar(playerid, 3);

	        if(Player[playerid][Banned] == 1 || Player[playerid][Banned] == 2 || Player[playerid][Banned] == 4)
	        {
	    		new hour, minute, second, day, year, month;
        		gettime(hour, minute, second);
        		getdate(year, month, day);
	            new IP[21];
	    		GetPlayerIp(playerid, IP, sizeof(IP));
				format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | CONNECTING ON A BANNED ACCOUNT | System", day, month, year, hour, minute, IP, Name);
				BanLog(string);
	            SendClientMessage(playerid, ANNOUNCEMENT, "You are banned from this server!");
	            format(string, sizeof(string), "Ban: %s has been auto-banned, defined reason: Attempted Ban Evasion.", Name);
	            printf("[system] %s has been auto-banned for attempting to login on a banned account.", Name);
				Ban(playerid);
	            SendClientMessageToAll(LIGHTRED, string);
	            return 1;
			}

			if(Player[playerid][AdminLevel] >= 1)
			{
				format(string, sizeof(string), "%s has authenticated (authenticating using their character password).", Name);
				SendToAdmins(ADMINORANGE, string, 0);
			}
			
			if(strlen(Player[playerid][Accent]) < 1)
			{
			    SendClientMessage(playerid, WHITE, "You currently don't have an accent set, it has been set to 'American' by default (use /accent).");
				format(Player[playerid][Accent], 128, "American");
			}

         	if(Player[playerid][Group] >= 1)
         	{
			    format(string, sizeof(string), "%s from your group has logged in.", Name);
			    GroupMessage(playerid, ANNOUNCEMENT, string);

		        format(string, sizeof(string), "Group MOTD: %s", Groups[Player[playerid][Group]][MOTD]);
		        SendClientMessage(playerid, ANNOUNCEMENT, string);
         	}

			GivePlayerMoney(playerid, Player[playerid][Money]);
			
			if(Player[playerid][AdminLevel] >= 1)
			{
			    if(Player[playerid][AdminPIN] == 0)
			    {
			        TogglePlayerControllable(playerid, false);
			        SendClientMessage(playerid, WHITE, "You don't have an admin PIN set. Please now set one, it must be numeric only and 6 characters in length.");
			        ShowPlayerDialog(playerid, 9843, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your desired PIN.", "Done", "Cancel");
			    }
			    else
			    {
			        Player[playerid][PINUnauthedTime] = 1;
			        SendClientMessage(playerid, WHITE, "You have 10 seconds to login before you are auto-kicked.");
			        TogglePlayerControllable(playerid, false);
					ShowPlayerDialog(playerid, 9842, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your additional admin PIN to continue.", "Login", "Cancel");
				}
			}

	        if(Player[playerid][Tutorial] < 1)
	        {
		    	SetSpawnInfo(playerid, 0, Player[playerid][LastSkin], Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ], 0, 0, 0, 0, 0, 0, 0);
		    	SpawnPlayer(playerid);

		    	Player[playerid][ResetTimer] = 1;

		    	SetPlayerInterior(playerid, Player[playerid][LastInterior]);
		    	SetPlayerVirtualWorld(playerid, Player[playerid][LastWorld]);

				new Flaw = floatround(Player[playerid][LastHealth], floatround_ceil);
		    	SetPlayerHealth(playerid, Flaw);

				Flaw = floatround(Player[playerid][LastArmour], floatround_ceil);
		    	SetPlayerArmour(playerid, Flaw);

		    	if(strcmp(Player[playerid][Offence1], "None", true) != 0)
		    	{
		    	    SetPlayerWantedLevel(playerid, 1);
		    	}
		    	if(strcmp(Player[playerid][Offence2], "None", true) != 0)
		    	{
		    	    SetPlayerWantedLevel(playerid, 2);
		    	}
		    	if(strcmp(Player[playerid][Offence3], "None", true) != 0)
		    	{
		    	    SetPlayerWantedLevel(playerid, 3);
		    	}
		    	if(strcmp(Player[playerid][Offence4], "None", true) != 0)
		    	{
		    	    SetPlayerWantedLevel(playerid, 4);
		    	}
		    	if(strcmp(Player[playerid][Offence5], "None", true) != 0)
		    	{
		    	    SetPlayerWantedLevel(playerid, 5);
		    	}
		    	if(strcmp(Player[playerid][Offence6], "None", true) != 0)
		    	{
		    	    SetPlayerWantedLevel(playerid, 6);
		    	}
	    	}
	    	else
	    	{
	    	    PutPlayerInTutorial(playerid, 0);
	    	}

	    	if(Day == Player[playerid][LastLoginDay] && Month == Player[playerid][LastLoginMonth] && Year == Player[playerid][LastLoginYear])
	    	{
    	        format(string, sizeof(string), "Welcome back, %s. You last logged in earlier today at %d:%d (-5 GMT).", Name, Player[playerid][LastLoginHour], Player[playerid][LastLoginMinute]);
    	        SendClientMessage(playerid, WHITE, string);
	    	}
	    	else
	    	{
	    		format(string, sizeof(string), "Welcome back, %s. You last logged in on %d/%d/%d at %d:%d (-5 GMT).", Name, Player[playerid][LastLoginDay], Player[playerid][LastLoginMonth], Player[playerid][LastLoginYear], Player[playerid][LastLoginHour], Player[playerid][LastLoginMinute]);
	    		SendClientMessage(playerid, WHITE, string);
	    	}

	    	Player[playerid][LastLoginMinute] = Minute;
	    	Player[playerid][LastLoginHour] = Hour;
	    	Player[playerid][LastLoginDay] = Day;
	    	Player[playerid][LastLoginMonth] = Month;
	    	Player[playerid][LastLoginYear] = Year;

	    	SetPlayerSkin(playerid, Player[playerid][LastSkin]);
	    }
	    else
	    {
	        new Sum;
	        Sum = 3-Player[playerid][LoginAttempts];
	        SendClientMessage(playerid, ADMINORANGE, "The password you have entered does not match your account. Please try again or use the forums.");
	        Player[playerid][LoginAttempts]++;
			format(string, sizeof(string), "You have %d remaining login attempts, before you are auto-banned.", Sum);
			SendClientMessage(playerid, WHITE, string);
			ShowPlayerDialog(playerid, 3894, DIALOG_STYLE_PASSWORD, "Authentication", "Welcome to Vortex Roleplay\n\nYou have an account, please enter your password to authenticate.", "Login", "Help");

			if(Player[playerid][LoginAttempts] == 3)
			{
			    new hour, minute, second, day, year, month;
			    gettime(hour, minute, second);
			    getdate(year, month, day);
			    #pragma unused second
			    new IP[21];
			    GetPlayerIp(playerid, IP, sizeof(IP));
				format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | THREE FAILED PASSWORD ATTEMPTS | System", day, month, year, hour, minute, IP, GetName(playerid));
				BanLog(string);
			    SendClientMessage(playerid, ADMINORANGE, "You have used your three attempts.");
			    Ban(playerid);
			}

		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You must register first.");
	}
	return 1;
}

stock QuickSave(playerid)
{
	Player[playerid][LastWorld] = GetPlayerVirtualWorld(playerid);
	Player[playerid][LastInterior] = GetPlayerInterior(playerid);
	
	GetOwnedCarMods(playerid);

	SavePlayerData(playerid);
	return true;
}

stock LoadFilesIntoVars()
{
	//----------------------------------------------------------------------------------------
	if(fexist("Spawn.ini"))
	{
	    print("[system] Loading Spawn.ini");
	    SpawnX = dini_Float("Spawn.ini", "SpawnX");
	    SpawnY = dini_Float("Spawn.ini", "SpawnY");
	    SpawnZ = dini_Float("Spawn.ini", "SpawnZ");
	    SpawnInt = dini_Int("Spawn.ini", "SpawnInt");
	    SpawnWorld = dini_Int("Spawn.ini", "SpawnWorld");
	    print("[system] Loaded file Spawn.ini! Proceeding..");
	}
	else
	{
	    print("Terminating server.. File 'Spawn.ini' missing.");
	    SendRconCommand("exit");
	}
	//----------------------------------------------------------------------------------------
	if(fexist("Ranks.ini"))
	{
	    print("[system] Loading Ranks.ini");
	    OOCRanks[Rank1] = dini_Get("Ranks.ini", "Rank1");
	   	OOCRanks[Rank2] = dini_Get("Ranks.ini", "Rank2");
	   	OOCRanks[Rank3] = dini_Get("Ranks.ini", "Rank3");
	   	OOCRanks[Rank4] = dini_Get("Ranks.ini", "Rank4");
	   	OOCRanks[Rank5] = dini_Get("Ranks.ini", "Rank5");
	    print("[system] Loaded file Ranks.ini! Proceeding..");
	}
	else
	{
	    print("Terminating server.. File 'Ranks.ini' missing.");
	    SendRconCommand("exit");
	}
	//----------------------------------------------------------------------------------------
	if(fexist("Configuration.ini"))
	{
	    print("[system] Loading Configuration.ini");
	    Anticheat = 1;
	    print("[system] Loaded file Configuration.ini! Proceeding..");
	}
	else
	{
	    print("Terminating server.. File 'Configuration.ini' missing.");
	    SendRconCommand("exit");
	}
	//----------------------------------------------------------------------------------------
	if(fexist("VisitorAnalysis.ini"))
	{
	    MaxVisitors = dini_Int("VisitorAnalysis.ini", "MaxVisitors");
	    MaxRegistered = dini_Int("VisitorAnalysis.ini", "MaxRegistered");
	    MaxLoggedIn = dini_Int("VisitorAnalysis.ini", "MaxLoggedIn");
		TotalConnections = dini_Int("VisitorAnalysis.ini", "TotalConnections");
	}
	else
	{
	    dini_Create("VisitorAnalysis.ini");
	    dini_IntSet("VisitorAnalysis.ini", "MaxVisitors", 0);
	    dini_IntSet("VisitorAnalysis.ini", "MaxRegistered", 0);
	    dini_IntSet("VisitorAnalysis.ini", "MaxLoggedIn", 0);
		dini_IntSet("VisitorAnalysis.ini", "TotalConnections", 0);
	}
	//----------------------------------------------------------------------------------------
	if(fexist("Assets.ini"))
	{
	    print("[system] Loading Assets.ini");
	    Prison1X = dini_Float("Assets.ini", "Prison1X");
	    Prison1Y = dini_Float("Assets.ini", "Prison1Y");
	    Prison1Z = dini_Float("Assets.ini", "Prison1Z");
	    Prison1Int = dini_Int("Assets.ini", "Prison1Int");
	    Prison1World = dini_Int("Assets.ini", "Prison1World");
	    Prison2X = dini_Float("Assets.ini", "Prison2X");
	    Prison2Y = dini_Float("Assets.ini", "Prison2Y");
	    Prison2Z = dini_Float("Assets.ini", "Prison2Z");
	    Prison2Int = dini_Int("Assets.ini", "Prison2Int");
	    Prison2World = dini_Int("Assets.ini", "Prison2World");
	    LockerPosX = dini_Float("Assets.ini", "LockerPosX");
	    LockerPosY = dini_Float("Assets.ini", "LockerPosY");
	    LockerPosZ = dini_Float("Assets.ini", "LockerPosZ");
	    LockerPosInt = dini_Int("Assets.ini", "LockerPosInt");
	    HospitalSpawnX = dini_Float("Assets.ini", "HospitalSpawnX");
	    HospitalSpawnY = dini_Float("Assets.ini", "HospitalSpawnY");
	    HospitalSpawnZ = dini_Float("Assets.ini", "HospitalSpawnZ");
	    HospitalInt = dini_Int("Assets.ini", "HospitalInt");
	    ArrestPosX = dini_Float("Assets.ini", "ArrestPosX");
	    ArrestPosY = dini_Float("Assets.ini", "ArrestPosY");
	    ArrestPosZ = dini_Float("Assets.ini", "ArrestPosZ");
	    BankIntX = dini_Float("Assets.ini", "BankIntX");
	    BankIntY = dini_Float("Assets.ini", "BankIntY");
	    BankIntZ = dini_Float("Assets.ini", "BankIntZ");
	    BankIntID = dini_Int("Assets.ini", "BankIntID");
	    BankExtX = dini_Float("Assets.ini", "BankExtX");
	    BankExtY = dini_Float("Assets.ini", "BankExtY");
	    BankExtZ = dini_Float("Assets.ini", "BankExtZ");
	    DropCarX = dini_Float("Assets.ini", "DropCarX");
	    DropCarY = dini_Float("Assets.ini", "DropCarY");
	    DropCarZ = dini_Float("Assets.ini", "DropCarZ");
	    FishX = dini_Float("Assets.ini", "FishX");
	    FishY = dini_Float("Assets.ini", "FishY");
	    FishZ = dini_Float("Assets.ini", "FishZ");
	    OwnedCarSpawnX = dini_Float("Assets.ini", "OwnedCarSpawnX");
	    OwnedCarSpawnY = dini_Float("Assets.ini", "OwnedCarSpawnY");
	    OwnedCarSpawnZ = dini_Float("Assets.ini", "OwnedCarSpawnZ");
	    HospitalSpawnX2 = dini_Float("Assets.ini", "HospitalSpawnX2");
	    HospitalSpawnY2 = dini_Float("Assets.ini", "HospitalSpawnY2");
	    HospitalSpawnZ2 = dini_Float("Assets.ini", "HospitalSpawnZ2");
	    HospitalInt2 = dini_Int("Assets.ini", "HospitalInt2");
 	    Harvest1X = dini_Float("Assets.ini", "Harvest1X");
	    Harvest1Y = dini_Float("Assets.ini", "Harvest1Y");
	    Harvest1Z = dini_Float("Assets.ini", "Harvest1Z");
 	    Harvest2X = dini_Float("Assets.ini", "Harvest2X");
	    Harvest2Y = dini_Float("Assets.ini", "Harvest2Y");
	    Harvest2Z = dini_Float("Assets.ini", "Harvest2Z");
	    Harvest3X = dini_Float("Assets.ini", "Harvest3X");
	    Harvest3Y = dini_Float("Assets.ini", "Harvest3Y");
	    Harvest3Z = dini_Float("Assets.ini", "Harvest3Z");
	    Harvest4X = dini_Float("Assets.ini", "Harvest4X");
	    Harvest4Y = dini_Float("Assets.ini", "Harvest4Y");
	    Harvest4Z = dini_Float("Assets.ini", "Harvest4Z");
	    Harvest5X = dini_Float("Assets.ini", "Harvest5X");
	    Harvest5Y = dini_Float("Assets.ini", "Harvest5Y");
	    Harvest5Z = dini_Float("Assets.ini", "Harvest5Z");
	    Tax = dini_Int("Assets.ini", "TaxRate");
	    LockerPos2X = dini_Float("Assets.ini", "LockerPos2X");
	    LockerPos2Y = dini_Float("Assets.ini", "LockerPos2Y");
	    LockerPos2Z = dini_Float("Assets.ini", "LockerPos2Z");
	    LockerPos2Int = dini_Int("Assets.ini", "LockerPos2Int");
	    
	    if(dini_Isset("Assets.ini", "WAPNews"))
	    {
	        dini_Set("Assets.ini", "WAPNews", "There's a new application interface, enjoy!");
	    }

	    BankPickupID = CreateDynamicPickup(1239, 23, BankExtX, BankExtY, BankExtZ, 0, -1, -1, 150.0);
	    ArrestPosPickup = CreateDynamicPickup(1239, 23, ArrestPosX, ArrestPosY, ArrestPosZ, 0, -1, -1, 150.0);
	    print("[system] Loaded file Assets.ini! Proceeding..");
	}
	else
	{
	    print("Terminating server.. File 'Assets.ini' missing.");
	    SendRconCommand("exit");
	}
	//----------------------------------------------------------------------------------------
	return 1;
}

public IsDateInThePast(day, month, year)
{
	new curday, curmonth, curyear;
	getdate(curyear, curmonth, curday);
	
	if(curyear > year)
	{
	    return 1;
	}
	else
	{
	    if(curyear == year)
	    {
	        if(curmonth > month)
	        {
	        	return 1;
	        }
	        else
	        {
	            if(curday > day)
	            {
	                return 1;
	            }
	            else
	            {
	                return 0;
	            }
	        }
	    }
	    else
	    {
	        return 1;
	    }
	}
}

public UntazePlayer(playerid)
{
	if(IsPlayerConnectedEx(playerid))
	{
	    if(Player[playerid][Tazed] == 1)
	    {
	        TogglePlayerControllable(playerid, true);
	        Player[playerid][Tazed] = 0;
	    }
	}
	return 1;
}

public SaveGeneralData()
{
	SaveGroups();
	UpdateAnalysis();
	SaveJobs();
	SaveHouses();
	SaveBusinesses();
	
	if(CurGMX == 1)
	{
	    SendClientMessageToAll(WHITE, "Any changes made now will not be saved until the server has fully rebooted.");

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    TogglePlayerControllable(i, false);
		    QuickSave(i);
		}
		
		CurGMX = 2;
		
	}
	else
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
	    	SavePlayerData(i);
		}
	}
	
	return 1;
}

public DoGMX()
{
	SendRconCommand("gmx");
	return 1;
}

stock GetPlayerID(string[])
{
    for(new i = 0; i <= MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i) == 1)
		{
            new testname[MAX_PLAYER_NAME];
	    	GetPlayerName(i, testname, sizeof(testname));
	    	if(strcmp(testname, string, true, strlen(string))  == 0)
	    	{
	        	return i;
	    	}
		}
    }
    return INVALID_PLAYER_ID;
}

public GMXPrep(playerid, reason[])
{
	new string[128];
	format(string, sizeof(string), "Admin %s has initiated a server restart, it will occur in the next 30 seconds, reason: %s", GetName(playerid), reason);
	SendClientMessageToAll(LIGHTRED, string);
	SetTimer("DoGMX", 30000, false);
	SetTimer("SaveGeneralData", 26000, false);
	CurGMX = 1;
	return 1;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(dialogid)
		{
		    case 364:
		    {
		        new string[128];
		        
		        switch(listitem)
		        {
		            case 0:
		            {
		                SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");

						if(Player[playerid][MeActions] >= 100)
						{
						    format(string, sizeof(string), "TYPE: /me actions | Executions of /me: %d | Award for: 100 | Status: Achieved.", Player[playerid][MeActions]);
						    SendClientMessage(playerid, WHITE, string);
						}
						else
						{
						    format(string, sizeof(string), "TYPE: /me actions | Executions of /me: %d | Award for: 100 | Status: Unachieved.", Player[playerid][MeActions]);
						    SendClientMessage(playerid, GREY, string);
						}

						if(Player[playerid][MeActions] >= 200)
						{
						    format(string, sizeof(string), "TYPE: /me actions | Executions of /me: %d | Award for: 200 | Status: Achieved.", Player[playerid][MeActions]);
						    SendClientMessage(playerid, WHITE, string);
						}
						else
						{
						    format(string, sizeof(string), "TYPE: /me actions | Executions of /me: %d | Award for: 200 | Status: Unachieved.", Player[playerid][MeActions]);
						    SendClientMessage(playerid, GREY, string);
						}
						
		                SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
		            }
		            case 1:
		            {
		                SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
		                
						if(Player[playerid][AnsweredQuizQuestions] >= 100)
						{
						    format(string, sizeof(string), "TYPE: Correctly Answered Quiz Questions | Submitted: %d | Award for: 100 | Status: Achieved.", Player[playerid][AnsweredQuizQuestions]);
						    SendClientMessage(playerid, WHITE, string);
						}
						else
						{
						    format(string, sizeof(string), "TYPE: Correctly Answered Quiz Questions | Submitted: %d | Award for: 100 | Status: Unachieved.", Player[playerid][AnsweredQuizQuestions]);
						    SendClientMessage(playerid, GREY, string);
						}

						if(Player[playerid][AnsweredQuizQuestions] >= 200)
						{
						    format(string, sizeof(string), "TYPE: Correctly Answered Quiz Questions | Submitted: %d | Status: Achieved.", Player[playerid][AnsweredQuizQuestions]);
						    SendClientMessage(playerid, WHITE, string);
						}
						else
						{
						    format(string, sizeof(string), "TYPE: Correctly Answered Quiz Questions | Submitted: %d | Award for: 200 | Status: Unachieved.", Player[playerid][AnsweredQuizQuestions]);
						    SendClientMessage(playerid, GREY, string);
						}
						
						SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
		            }
		            case 2:
		            {
		                SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");

						if(Player[playerid][AdsPlaced] >= 100)
						{
						    format(string, sizeof(string), "TYPE: Advertisements Placed | Placed: %d | Award for: 100 | Status: Achieved.", Player[playerid][AdsPlaced]);
						    SendClientMessage(playerid, WHITE, string);
						}
						else
						{
						    format(string, sizeof(string), "TYPE: Advertisements Placed | Placed: %d | Award for: 100 | Status: Unachieved.", Player[playerid][AdsPlaced]);
						    SendClientMessage(playerid, GREY, string);
						}

						if(Player[playerid][AdsPlaced] >= 200)
						{
						    format(string, sizeof(string), "TYPE: Advertisements Placed | Placed: %d | Award for: 200 | Status: Achieved.", Player[playerid][AdsPlaced]);
						    SendClientMessage(playerid, WHITE, string);
						}
						else
						{
						    format(string, sizeof(string), "TYPE: Advertisements Placed | Placed: %d | Award for: 200 | Status: Unachieved.", Player[playerid][AdsPlaced]);
						    SendClientMessage(playerid, GREY, string);
						}

						SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
		            }
		            case 3:
		            {
		                SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");

						if(Player[playerid][MatrunsExecuted] >= 100)
						{
						    format(string, sizeof(string), "TYPE: Matruns Completed | Completed: %d | Award for: 100 | Status: Achieved.", Player[playerid][MatrunsExecuted]);
						    SendClientMessage(playerid, WHITE, string);
						}
						else
						{
						    format(string, sizeof(string), "TYPE: Matruns Completed | Completed: %d | Award for: 100 | Status: Unachieved.", Player[playerid][MatrunsExecuted]);
						    SendClientMessage(playerid, GREY, string);
						}

						if(Player[playerid][MatrunsExecuted] >= 200)
						{
						    format(string, sizeof(string), "TYPE: Matruns Completed | Completed: %d | Award for: 200 | Status: Achieved.", Player[playerid][MatrunsExecuted]);
						    SendClientMessage(playerid, WHITE, string);
						}
						else
						{
						    format(string, sizeof(string), "TYPE: Matruns Completed | Completed: %d | Award for: 200 | Status: Unachieved.", Player[playerid][MatrunsExecuted]);
						    SendClientMessage(playerid, GREY, string);
						}

						SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
		            }
		        }
		    }
		    case 594:
		    {
		        if(response == 0)
		        {
		            SendClientMessage(playerid, WHITE, "Fine, have it your way!");
		            Kick(playerid);
		        }
		        else
		        {
			        if(strlen(inputtext) >= 3 && strlen(inputtext) < 20)
			        {
			            new string[128];
			            format(string, sizeof(string), "Accounts/%s.ini", inputtext);
			            
			            if(fexist(string))
			            {
			                ShowPlayerDialog(playerid, 594, DIALOG_STYLE_INPUT, "Roleplay Name", "Please select a new, valid roleplaying name.", "Change", "Cancel");
			                SendClientMessage(playerid, WHITE, "Sorry, that name is taken.");
			            }
			            else
			            {
			                if(strfind(inputtext, "_") != -1)
			                {
					            SetPlayerName(playerid, inputtext);
					            SendClientMessage(playerid, YELLOW, "Your name has been changed!");
								ShowPlayerDialog(playerid, 3895, DIALOG_STYLE_PASSWORD, "Registration", "Please enter your password to register your account.", "Register", "Cancel");
								SendClientMessage(playerid, ANNOUNCEMENT, "You will automatically be logged in, once you have registered.");
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "You must include an underscore.");
				                ShowPlayerDialog(playerid, 594, DIALOG_STYLE_INPUT, "Roleplay Name", "Please select a new, valid roleplaying name.", "Change", "Cancel");
				            }
			            }
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "Sorry - that's not valid either.");
			            ShowPlayerDialog(playerid, 594, DIALOG_STYLE_INPUT, "Roleplay Name", "Please select a new, valid roleplaying name.", "Change", "Cancel");
			        }
		        }
		    }
		    case 16:
		    {
				switch(listitem)
				{
				    case 0:
				    {
				        if(Player[playerid][GivingSlot] == 1)
				        {
				            if(Player[playerid][CarLinkID] >= 1)
				            {
				                DestroyVehicle(Player[playerid][CarLinkID]);
				                Player[playerid][CarLinkID] = 0;
				                Player[playerid][PlayerCarModel] = 0;
				            }
				            
				            GetVehiclePos(Player[Player[playerid][PendingCarReceival]][CarLinkID], Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
				            
				            DestroyVehicle(Player[Player[playerid][PendingCarReceival]][CarLinkID]);
				            Player[Player[playerid][PendingCarReceival]][CarLinkID] = 0;
				            
				            Player[playerid][PlayerCarModel] = Player[Player[playerid][PendingCarReceival]][PlayerCarModel];
				            
				            Player[playerid][PendingCarReceival] = -1;
				            SpawnOwnedCar(playerid, 1);
				            
				            Player[Player[playerid][PendingCarReceival]][PlayerCarModel] = 0;
				        }
				        
				        if(Player[playerid][GivingSlot] == 2)
				        {
				            if(Player[playerid][CarLinkID] >= 1)
				            {
				                DestroyVehicle(Player[playerid][CarLinkID]);
				                Player[playerid][CarLinkID] = 0;
				                Player[playerid][PlayerCarModel] = 0;
				            }
				            
				            GetVehiclePos(Player[Player[playerid][PendingCarReceival]][Car2LinkID], Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);

				            DestroyVehicle(Player[Player[playerid][PendingCarReceival]][Car2LinkID]);
				            Player[Player[playerid][PendingCarReceival]][Car2LinkID] = 0;

				            Player[playerid][PlayerCarModel] = Player[Player[playerid][PendingCarReceival]][PlayerCarModel2];

				            Player[playerid][PendingCarReceival] = -1;
				            
				            SpawnOwnedCar(playerid, 1);
				            
				            Player[Player[playerid][PendingCarReceival]][PlayerCarModel2] = 0;
				        }
				        
				        if(Player[playerid][GivingSlot] == 3)
				        {
				            if(Player[playerid][CarLinkID] >= 1)
				            {
				                DestroyVehicle(Player[playerid][CarLinkID]);
				                Player[playerid][CarLinkID] = 0;
				                Player[playerid][PlayerCarModel] = 0;
				            }
				            
				            GetVehiclePos(Player[Player[playerid][PendingCarReceival]][Car3LinkID], Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);

				            DestroyVehicle(Player[Player[playerid][PendingCarReceival]][Car3LinkID]);
				            Player[Player[playerid][PendingCarReceival]][Car3LinkID] = 0;

				            Player[playerid][PlayerCarModel] = Player[Player[playerid][PendingCarReceival]][PlayerCarModel3];

				            Player[playerid][PendingCarReceival] = -1;
				            
				            SpawnOwnedCar(playerid, 1);
				            
				            Player[Player[playerid][PendingCarReceival]][PlayerCarModel3] = 0;
				        }
				    }
				    case 1:
				    {
				        if(Player[playerid][GivingSlot] == 1)
				        {
				            if(Player[playerid][Car2LinkID] >= 1)
				            {
				                DestroyVehicle(Player[playerid][Car2LinkID]);
				                Player[playerid][Car2LinkID] = 0;
				                Player[playerid][PlayerCarModel2] = 0;
				            }
				            
				            GetVehiclePos(Player[Player[playerid][PendingCarReceival]][CarLinkID], Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);

				            DestroyVehicle(Player[Player[playerid][PendingCarReceival]][CarLinkID]);
				            Player[Player[playerid][PendingCarReceival]][CarLinkID] = 0;

				            Player[playerid][PlayerCarModel2] = Player[Player[playerid][PendingCarReceival]][PlayerCarModel];

				            Player[playerid][PendingCarReceival] = -1;
				            
				            SpawnOwnedCar(playerid, 2);
				            
				            Player[Player[playerid][PendingCarReceival]][PlayerCarModel] = 0;
				        }

				        if(Player[playerid][GivingSlot] == 2)
				        {
				            if(Player[playerid][Car2LinkID] >= 1)
				            {
				                DestroyVehicle(Player[playerid][Car2LinkID]);
				                Player[playerid][Car2LinkID] = 0;
				                Player[playerid][PlayerCarModel2] = 0;
				            }
				            
				            GetVehiclePos(Player[Player[playerid][PendingCarReceival]][Car2LinkID], Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);

				            DestroyVehicle(Player[Player[playerid][PendingCarReceival]][Car2LinkID]);
				            Player[Player[playerid][PendingCarReceival]][Car2LinkID] = 0;

				            Player[playerid][PlayerCarModel2] = Player[Player[playerid][PendingCarReceival]][PlayerCarModel2];

				            Player[playerid][PendingCarReceival] = -1;
				            
				            SpawnOwnedCar(playerid, 2);
				            
				            Player[Player[playerid][PendingCarReceival]][PlayerCarModel2] = 0;
				        }

				        if(Player[playerid][GivingSlot] == 3)
				        {
				            if(Player[playerid][Car2LinkID] >= 1)
				            {
				                DestroyVehicle(Player[playerid][Car2LinkID]);
				                Player[playerid][Car2LinkID] = 0;
				                Player[playerid][PlayerCarModel2] = 0;
				            }
				            
				            GetVehiclePos(Player[Player[playerid][PendingCarReceival]][Car3LinkID], Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);

				            DestroyVehicle(Player[Player[playerid][PendingCarReceival]][Car3LinkID]);
				            Player[Player[playerid][PendingCarReceival]][Car3LinkID] = 0;

				            Player[playerid][PlayerCarModel2] = Player[Player[playerid][PendingCarReceival]][PlayerCarModel3];

				            Player[playerid][PendingCarReceival] = -1;
				            
				            SpawnOwnedCar(playerid, 2);
				            
				            Player[Player[playerid][PendingCarReceival]][PlayerCarModel3] = 0;
				        }
				    }
				    case 2:
				    {
				        if(Player[playerid][GivingSlot] == 1)
				        {
				            if(Player[playerid][Car3LinkID] >= 1)
				            {
				                DestroyVehicle(Player[playerid][Car3LinkID]);
				                Player[playerid][Car3LinkID] = 0;
				                Player[playerid][PlayerCarModel3] = 0;
				            }
				            
				            GetVehiclePos(Player[Player[playerid][PendingCarReceival]][CarLinkID], Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);

				            DestroyVehicle(Player[Player[playerid][PendingCarReceival]][CarLinkID]);
				            Player[Player[playerid][PendingCarReceival]][CarLinkID] = 0;

				            Player[playerid][PlayerCarModel3] = Player[Player[playerid][PendingCarReceival]][PlayerCarModel];

				            Player[playerid][PendingCarReceival] = -1;

				            SpawnOwnedCar(playerid, 3);
				            
				            Player[Player[playerid][PendingCarReceival]][PlayerCarModel] = 0;
				        }

				        if(Player[playerid][GivingSlot] == 2)
				        {
				            if(Player[playerid][Car3LinkID] >= 1)
				            {
				                DestroyVehicle(Player[playerid][Car3LinkID]);
				                Player[playerid][Car3LinkID] = 0;
				                Player[playerid][PlayerCarModel3] = 0;
				            }
				            
				            GetVehiclePos(Player[Player[playerid][PendingCarReceival]][Car2LinkID], Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);

				            DestroyVehicle(Player[Player[playerid][PendingCarReceival]][Car2LinkID]);
				            Player[Player[playerid][PendingCarReceival]][Car2LinkID] = 0;

				            Player[playerid][PlayerCarModel3] = Player[Player[playerid][PendingCarReceival]][PlayerCarModel2];

				            Player[playerid][PendingCarReceival] = -1;

				            SpawnOwnedCar(playerid, 3);
				            
				            Player[Player[playerid][PendingCarReceival]][PlayerCarModel2] = 0;
				        }

				        if(Player[playerid][GivingSlot] == 3)
				        {
				            if(Player[playerid][Car3LinkID] >= 1)
				            {
				                DestroyVehicle(Player[playerid][Car3LinkID]);
				                Player[playerid][Car3LinkID] = 0;
				                Player[playerid][PlayerCarModel3] = 0;
				            }
				            
				            GetVehiclePos(Player[Player[playerid][PendingCarReceival]][Car3LinkID], Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);

				            DestroyVehicle(Player[Player[playerid][PendingCarReceival]][Car3LinkID]);
				            Player[Player[playerid][PendingCarReceival]][Car3LinkID] = 0;

				            Player[playerid][PlayerCarModel3] = Player[Player[playerid][PendingCarReceival]][PlayerCarModel3];

				            Player[playerid][PendingCarReceival] = -1;

				            SpawnOwnedCar(playerid, 3);
				            
				            Player[Player[playerid][PendingCarReceival]][PlayerCarModel3] = 0;
				        }
				    }
				}
		    }
		    case 94:
		    {
		        if(Player[playerid][CarBeingCarried] >= 1)
		        {
		            switch(listitem)
		            {
		                case 0:
		                {
		                    if(Player[playerid][Money] >= Player[playerid][CarPriceBeingCarried])
		                    {
			                    PurchaseCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried], 1);
					        	Businesses[Player[playerid][InBusiness]][bVault] += Player[playerid][CarPriceBeingCarried];
				        	}
				        	else
				        	{
				        	    SendClientMessage(playerid, WHITE, "You don't have enough money on you.");
				        	}
		                }
		                case 1:
		                {
		                    if(Player[playerid][Money] >= Player[playerid][CarPriceBeingCarried])
		                    {
			                    PurchaseCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried], 2);
					        	Businesses[Player[playerid][InBusiness]][bVault] += Player[playerid][CarPriceBeingCarried];
				        	}
				        	else
				        	{
				        	    SendClientMessage(playerid, WHITE, "You don't have enough money on you.");
				        	}
		                }
		                case 2:
		                {
		                    if(Player[playerid][Money] >= Player[playerid][CarPriceBeingCarried])
		                    {
			                    PurchaseCar(playerid, Player[playerid][CarBeingCarried], Player[playerid][CarPriceBeingCarried], 3);
					        	Businesses[Player[playerid][InBusiness]][bVault] += Player[playerid][CarPriceBeingCarried];
				        	}
				        	else
				        	{
				        	    SendClientMessage(playerid, WHITE, "You don't have enough money on you.");
				        	}
		                }
		            }
		        }
		    }
		    case 104:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                PutPlayerInTutorial(playerid, 1);
				    }
				    case 1:
				    {
				        PutPlayerInTutorial(playerid, 2);
				        SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
				    }
				    case 2:
				    {
				        PutPlayerInTutorial(playerid, 1);
				    }
			    }
		    }
		    case 105:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                SendClientMessage(playerid, WHITE, "Alright, let's get stuck in then. ");
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                SendClientMessage(playerid, WHITE, "INTRODUCTION");
		                SendClientMessage(playerid, WHITE, "Welcome to the server tutorial. This tutorial was created to help you around the server, so you know where things");
		                SendClientMessage(playerid, WHITE, "are, and the basic parts of game play on our server - we have quite a few very unique features you may not be used to.");
		                SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");

		                Player[playerid][ServerTut] = 1;
		            }
		            case 1:
		            {
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                ShowPlayerDialog(playerid, 106, DIALOG_STYLE_LIST, "Please Specify Your Gender", "Male\nFemale", "Select", "Cancel");
		                SendClientMessage(playerid, WHITE, "Roger that, so let's get a bit of vital information before you can spawn!");
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		            }
		        }
		    }
		    case 106:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                Player[playerid][Gender] = 1;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                ShowPlayerDialog(playerid, 107, DIALOG_STYLE_LIST, "Please Specify Your Age", "18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40", "Select", "Cancel");
		                SendClientMessage(playerid, WHITE, "Okay, so you're a dude. Let's just get your character's age and then you can spawn!");
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		            }
		            case 1:
		            {
		                Player[playerid][Gender] = 2;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                ShowPlayerDialog(playerid, 107, DIALOG_STYLE_LIST, "Please Specify Your Age", "18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40", "Select", "Cancel");
		                SendClientMessage(playerid, WHITE, "Okay, so you're a chick. Let's just get your character's age and then you can spawn!");
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		            }
		        }
		    }
		    case 107:
		    {
		        new string[128];
		        listitem += 18;
		        Player[playerid][Age] = listitem;
		        Player[playerid][Tutorial] = 0;
		        SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		        format(string, sizeof(string), "Okay, so your character is %d.", Player[playerid][Age]);
		        SendClientMessage(playerid, WHITE, string);
		        SendClientMessage(playerid, WHITE, "Now, we can let you spawn. We hope that you enjoy your experience here and play here regularly.");
		        SendClientMessage(playerid, WHITE, "If you have any server-related questions, please use /n. If you wish to just have a chat, please use /o");
                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
                
                PutPlayerInTutorial(playerid, 99);
		    }
		    case 1195:
			{
			    if(strcmp(inputtext, "yes", true) == 0)
				{
					ShowPlayerDialog(playerid, 3895, DIALOG_STYLE_INPUT, "Registration", "Please enter your password to register your account.", "Register", "Cancel");
					SendClientMessage(playerid, ANNOUNCEMENT, "You will automatically be logged in, once you have registered.");
				}
				else
				{
				    SendClientMessage(playerid, WHITE, "Incorrect - You may not play.");
				    Kick(playerid);
				}
		    }
		    case 346:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(BonusCar >= 1)
		                {
		                    new string[128];
		                    format(string, sizeof(string), "Blista Compact ($8,000)\nClover ($4,300)\nStallion ($5,700)\nTampa ($3,800)\n%s\n", VehicleNames[BonusCar-400]);
		                	ShowPlayerDialog(playerid, 347, DIALOG_STYLE_LIST, "Vehicle Dealership - Special Deals", string, "Select", "Cancel");
						}
						else
						{
						    ShowPlayerDialog(playerid, 347, DIALOG_STYLE_LIST, "Vehicle Dealership - Special Deals", "Blista Compact ($8,000)\nClover ($4,300)\nStallion ($5,700)\nTampa ($3,800)\n", "Select", "Cancel");
						}
					}
		            case 1:
		            {
		                ShowPlayerDialog(playerid, 348, DIALOG_STYLE_LIST, "Vehicle Dealership - Low-Riders", "Blade ($22,000)\nRemington ($28,000)\nSavanna ($30,000)\nSlamvan ($32,000)\nTornado ($24,500)\n", "Select", "Cancel");
		            }
		            case 2:
		            {
		                ShowPlayerDialog(playerid, 349, DIALOG_STYLE_LIST, "Vehicle Dealership - Saloon Cars", "Elegant ($34,000)\nPremier ($30,000)\nSentinel ($45,000)\nStretch ($55,000)\nSunrise ($33,000)\nWashington ($38,000)\n", "Select", "Cancel");
		            }
		            case 3:
		            {
		                ShowPlayerDialog(playerid, 350, DIALOG_STYLE_LIST, "Vehicle Dealership - 4x4 / Off-Roaders / Pickups", "Huntley ($48,000)\nLandstalker ($37,000)\nMesa ($35,000)\nRancher ($43,000)\nSandking ($60,000)\nYosemite ($10,000)\n", "Select", "Cancel");
		            }
		            case 4:
		            {
		                ShowPlayerDialog(playerid, 310, DIALOG_STYLE_LIST, "Vehicle Dealership - Bikes", "Wayfarer ($15,000)\nFCR-900 ($20,000)\nPCJ-600 ($20,000)\nFreeway ($21,000)\n", "Select", "Cancel");
		            }
		            case 5:
		            {
		                ShowPlayerDialog(playerid, 351, DIALOG_STYLE_LIST, "Vehicle Dealership - Sports / Muscle / Supercars", "Banshee ($120,000)\nBuffalo ($57,000)\nComet ($80,000)\nPhoenix ($90,000)\nSultan ($85,000)\n", "Select", "Cancel");
		            }
		            case 6:
		            {
		                ShowPlayerDialog(playerid, 352, DIALOG_STYLE_LIST, "Vehicle Dealership - VIP Models", "Cheetah ($10,000)\nBullet ($10,000)\nInfernus ($10,000)\nNRG-500 ($10,000)\nTurismo ($10,000)\nMaverick ($10,000)\nSanchez ($10,000)\nQuadbike ($10,000)\n", "Select", "Cancel");
		            }
		        }
		    }
		    case 310:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
				        if(Player[playerid][Money] >= 15000)
				        {
				            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				            Player[playerid][CarBeingCarried] = 586;
				            Player[playerid][CarPriceBeingCarried] = 15000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 1:
		            {
				        if(Player[playerid][Money] >= 20000)
				        {
				            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				            Player[playerid][CarBeingCarried] = 521;
				            Player[playerid][CarPriceBeingCarried] = 20000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 2:
		            {
				        if(Player[playerid][Money] >= 20000)
				        {
				            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				            Player[playerid][CarBeingCarried] = 461;
				            Player[playerid][CarPriceBeingCarried] = 20000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 3:
		            {
				        if(Player[playerid][Money] >= 21000)
				        {
				            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				            Player[playerid][CarBeingCarried] = 463;
				            Player[playerid][CarPriceBeingCarried] = 21000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		        }
		    }
		    case 352:
		    {
		        switch(listitem)
		        {
		            case 0:
					{
				        if(Player[playerid][Money] >= 10000)
				        {
				            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				            Player[playerid][CarBeingCarried] = 415;
				            Player[playerid][CarPriceBeingCarried] = 10000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
					}
		            case 1:
					{
				        if(Player[playerid][Money] >= 10000)
				        {
				            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				            Player[playerid][CarBeingCarried] = 541;
				            Player[playerid][CarPriceBeingCarried] = 10000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
					}
		            case 2:
					{
				        if(Player[playerid][Money] >= 10000)
				        {
				            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				            Player[playerid][CarBeingCarried] = 411;
				            Player[playerid][CarPriceBeingCarried] = 10000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
					}
		            case 3:
					{
				        if(Player[playerid][Money] >= 10000)
				        {
				            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				            Player[playerid][CarBeingCarried] = 522;
				            Player[playerid][CarPriceBeingCarried] = 10000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
					}
					case 4:
					{
				        if(Player[playerid][Money] >= 10000)
				        {
				            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				            Player[playerid][CarBeingCarried] = 451;
				            Player[playerid][CarPriceBeingCarried] = 10000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
					}
		            case 5:
					{
				        if(Player[playerid][Money] >= 10000)
				        {
				            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				            Player[playerid][CarBeingCarried] = 487;
				            Player[playerid][CarPriceBeingCarried] = 10000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
					}
					case 6:
					{
				        if(Player[playerid][Money] >= 10000)
				        {
				            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				            Player[playerid][CarBeingCarried] = 468;
				            Player[playerid][CarPriceBeingCarried] = 10000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
					}
					case 7:
					{
				        if(Player[playerid][Money] >= 10000)
				        {
				            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				            Player[playerid][CarBeingCarried] = 471;
				            Player[playerid][CarPriceBeingCarried] = 10000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
					}
		        }
		    }
		    case 347:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
				        if(Player[playerid][Money] >= 8000)
				        {
				            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				            Player[playerid][CarBeingCarried] = 496;
				            Player[playerid][CarPriceBeingCarried] = 8000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 1:
		            {
				        if(Player[playerid][Money] >= 4300)
				        {
				            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				            Player[playerid][CarBeingCarried] = 542;
				            Player[playerid][CarPriceBeingCarried] = 4300;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 2:
		            {
				        if(Player[playerid][Money] >= 5700)
				        {
				            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				            Player[playerid][CarBeingCarried] = 439;
				            Player[playerid][CarPriceBeingCarried] = 5700;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 3:
		            {
				        if(Player[playerid][Money] >= 3800)
				        {
				            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				            Player[playerid][CarBeingCarried] = 549;
				            Player[playerid][CarPriceBeingCarried] = 3800;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 4:
		            {
			        	PurchaseCar(playerid, BonusCar, 0, 1);
		            }
		        }
		    }
		    case 348:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
				        if(Player[playerid][Money] >= 22000)
				        {
				            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				            Player[playerid][CarBeingCarried] = 536;
				            Player[playerid][CarPriceBeingCarried] = 22000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 1:
		            {
				        if(Player[playerid][Money] >= 28000)
				        {
				            ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				            Player[playerid][CarBeingCarried] = 534;
				            Player[playerid][CarPriceBeingCarried] = 28000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 2:
		            {
				        if(Player[playerid][Money] >= 30000)
				        {
				        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				        	Player[playerid][CarBeingCarried] = 567;
				        	Player[playerid][CarPriceBeingCarried] = 30000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 3:
		            {
				        if(Player[playerid][Money] >= 32000)
				        {
				        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				        	Player[playerid][CarBeingCarried] = 535;
				        	Player[playerid][CarPriceBeingCarried] = 32000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 4:
		            {
				        if(Player[playerid][Money] >= 24500)
				        {
				        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				        	Player[playerid][CarBeingCarried] = 576;
				        	Player[playerid][CarPriceBeingCarried] = 24500;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		        }
		    }
		    case 349:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
				        if(Player[playerid][Money] >= 34000)
				        {
				        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				        	Player[playerid][CarBeingCarried] = 507;
				        	Player[playerid][CarPriceBeingCarried] = 34000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 1:
		            {
				        if(Player[playerid][Money] >= 30000)
				        {
				        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				        	Player[playerid][CarBeingCarried] = 526;
				        	Player[playerid][CarPriceBeingCarried] = 30000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 2:
		            {
				        if(Player[playerid][Money] >= 45000)
				        {
				        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				        	Player[playerid][CarBeingCarried] = 405;
				        	Player[playerid][CarPriceBeingCarried] = 45000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 3:
		            {
				        if(Player[playerid][Money] >= 55000)
				        {
				        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				        	Player[playerid][CarBeingCarried] = 409;
				        	Player[playerid][CarPriceBeingCarried] = 55000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 4:
		            {
				        if(Player[playerid][Money] >= 33000)
				        {
				        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				        	Player[playerid][CarBeingCarried] = 550;
				        	Player[playerid][CarPriceBeingCarried] = 33000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 5:
		            {
				        if(Player[playerid][Money] >= 38000)
				        {
				        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				        	Player[playerid][CarBeingCarried] = 421;
				        	Player[playerid][CarPriceBeingCarried] = 38000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		    	}
		    }
		    case 350:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
				        if(Player[playerid][Money] >= 48000)
				        {
				        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				        	Player[playerid][CarBeingCarried] = 579;
				        	Player[playerid][CarPriceBeingCarried] = 48000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 1:
		            {
				        if(Player[playerid][Money] >= 37000)
				        {
				        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				        	Player[playerid][CarBeingCarried] = 400;
				        	Player[playerid][CarPriceBeingCarried] = 37000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 2:
		            {
				        if(Player[playerid][Money] >= 35000)
				        {
				        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				        	Player[playerid][CarBeingCarried] = 500;
				        	Player[playerid][CarPriceBeingCarried] = 35000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 3:
		            {
				        if(Player[playerid][Money] >= 43000)
				        {
				        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				        	Player[playerid][CarBeingCarried] = 489;
				        	Player[playerid][CarPriceBeingCarried] = 43000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 4:
		            {
				        if(Player[playerid][Money] >= 60000)
				        {
				        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				        	Player[playerid][CarBeingCarried] = 495;
				        	Player[playerid][CarPriceBeingCarried] = 60000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 5:
		            {
				        if(Player[playerid][Money] >= 10000)
				        {
				        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				        	Player[playerid][CarBeingCarried] = 554;
				        	Player[playerid][CarPriceBeingCarried] = 10000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		        }
		    }
		    case 351:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
				        if(Player[playerid][Money] >= 120000)
				        {
				        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				        	Player[playerid][CarBeingCarried] = 429;
				        	Player[playerid][CarPriceBeingCarried] = 120000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 1:
		            {
				        if(Player[playerid][Money] >= 57000)
				        {
				        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				        	Player[playerid][CarBeingCarried] = 402;
				        	Player[playerid][CarPriceBeingCarried] = 57000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 2:
		            {
				        if(Player[playerid][Money] >= 80000)
				        {
				        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				        	Player[playerid][CarBeingCarried] = 480;
				        	Player[playerid][CarPriceBeingCarried] = 80000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 3:
		            {
				        if(Player[playerid][Money] >= 90000)
				        {
				        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				        	Player[playerid][CarBeingCarried] = 603;
				        	Player[playerid][CarPriceBeingCarried] = 90000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		            case 4:
		            {
				        if(Player[playerid][Money] >= 85000)
				        {
				        	ShowPlayerDialog(playerid, 94, DIALOG_STYLE_LIST, "Select a Slot", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3", "Select", "Cancel");
				        	Player[playerid][CarBeingCarried] = 560;
				        	Player[playerid][CarPriceBeingCarried] = 85000;
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You don't have enough.");
				        }
		            }
		        }
		    }
		    case 81:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1])
		                {
		                    if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
		                    {
		                        SendClientMessage(playerid, WHITE, "You have purchased a bottle of Sprunk.");
		                        Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
		                        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
		                        Player[playerid][HadSprunk] = 1;
		                        TextDrawShowForPlayer(playerid, SprunkTextDraw);
			                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
			                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "This business is out of stock.");
			                }
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "Insufficient money available.");
		                }
		            }
		            case 1:
		            {
		                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice2])
		                {
		                    if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
		                    {
		                        SendClientMessage(playerid, WHITE, "You have purchased a Vegetarian Surprise.");
		                        Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;

								new Float: Health, HealthI;

								GetPlayerHealth(playerid, Health);
		                        HealthI = floatround(Health, floatround_ceil);
		                        
		                        if(HealthI < 85)
		                        {
		                            SetPlayerHealth(playerid, HealthI+15);
		                        }
		                        
			                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice2];
			                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice2];
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "This business is out of stock.");
			                }
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "Insufficient money available.");
		                }
		            }
		            case 2:
		            {
		                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice3])
		                {
		                    if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
		                    {
		                        SendClientMessage(playerid, WHITE, "You have purchased a Meat Feast Pizza.");
		                        Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;

								new Float: Health, HealthI;

								GetPlayerHealth(playerid, Health);
		                        HealthI = floatround(Health, floatround_ceil);

		                        if(HealthI < 75)
		                        {
		                            SetPlayerHealth(playerid, HealthI+25);
		                        }

			                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice3];
			                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice3];
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "This business is out of stock.");
			                }
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "Insufficient money available.");
		                }
		            }
		        }
		    }
		    case 4541:
		    {
		        if(strlen(inputtext) >= 1 && strlen(inputtext) < 70)
		        {
		            format(QuizQuestion, 128, "%s", inputtext);
		            SendClientMessage(playerid, WHITE, "You have set the question.");
			        ShowPlayerDialog(playerid, 4542, DIALOG_STYLE_INPUT, "Quiz Answer", "Set a VERY specific answer.", "Done", "Cancel");
			    }
		    }
		    case 4542:
		    {
		        if(strlen(inputtext) >= 1 && strlen(inputtext) < 70)
		        {
		            new string[128];
		            format(QuizAnswer, 255, "%s", inputtext);
		            SendClientMessage(playerid, WHITE, "You have set the answer.");
					ActiveQuiz = 1;
					format(string, sizeof(string), "QUIZ ROUND: %s", QuizQuestion);
					QuizText(string);
					QuizText("Type /answerq along with your answer to answer the question!");
			    }
		    }
		    case 8561:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1])
		                {
		                    if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 5)
		                    {
		                        SendClientMessage(playerid, WHITE, "You have purchased 5 grams of Pot.");
		                        Businesses[Player[playerid][InBusiness]][bSupplies] -= 5;
		                        Player[playerid][Pot] += 5;
			                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
			                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "This business is out of stock.");
			                }
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "Insufficient money available.");
		                }
		            }
		            case 1:
		            {
		                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice2])
		                {
		                    if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 5)
		                    {
		                        SendClientMessage(playerid, WHITE, "You have purchased 5 grams of Cocaine.");
		                        Businesses[Player[playerid][InBusiness]][bSupplies] -= 5;
		                        Player[playerid][Cocaine] += 5;
			                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice2];
			                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice2];
			                }
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "Insufficient money available.");
		                }
		            }
		        }
		    }
		    case 3666:
		    {
		        new string[128];
		        
		        if(strlen(inputtext) >= 1)
		        {
			    	format(Player[playerid][Password], 255, "%s", inputtext);
			    	format(string, sizeof(string), "Password changed to '%s'.", inputtext);
			    	SendClientMessage(playerid, WHITE, string);
		    	}
		    }
		    case 1621:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                Player[playerid][SupplyT] = 1;
		                SendClientMessage(playerid, WHITE, "You have collected grocery supplies. Deliver these to a 24/7.");
		                SendClientMessage(playerid, GREY, "You'll have to enter the interior of the business and /sellsupplies.");
		            }
		            case 1:
		            {
		                Player[playerid][SupplyT] = 2;
		                SendClientMessage(playerid, WHITE, "You have collected clothes supplies. Deliver these to a Clothes Shop.");
		                SendClientMessage(playerid, GREY, "You'll have to enter the interior of the business and /sellsupplies.");
		            }
		            case 2:
		            {
		                Player[playerid][SupplyT] = 3;
		                SendClientMessage(playerid, WHITE, "You have collected alcohol supplies. Deliver these to a Bar / Club.");
		                SendClientMessage(playerid, GREY, "You'll have to enter the interior of the business and /sellsupplies.");
		            }
		            case 3:
		            {
		                Player[playerid][SupplyT] = 5;
		                SendClientMessage(playerid, WHITE, "You have collected adult toy supplies. Deliver these to an Adult Shop.");
		                SendClientMessage(playerid, GREY, "You'll have to enter the interior of the business and /sellsupplies.");
		            }
		            case 4:
		            {
		                Player[playerid][SupplyT] = 12;
		                SendClientMessage(playerid, WHITE, "You have collected food supplies. Deliver these to an Restraunt.");
		                SendClientMessage(playerid, GREY, "You'll have to enter the interior of the business and /sellsupplies.");
		            }
		        }
		    }
		    case 57361:
		    {
		        if(strlen(inputtext) < 1 && strlen(inputtext) >= MAX_PLAYER_NAME)
		        {
		            SendClientMessage(playerid, WHITE, "Names must be above 1 to 23.");
		            ShowPlayerDialog(playerid, 57361, DIALOG_STYLE_INPUT, "Administrators' Name", "Please set your administrators' name!", "Set Name", "Cancel");
		        }
		        else
		        {
		            new string[50];
		            format(Player[playerid][AdminName], 255, "%s", inputtext);
		            format(string, sizeof(string), "You have set your name to %s.", inputtext);
		            SendClientMessage(playerid, WHITE, string);
		        }
		    }
		    case 9843:
		    {
		        if(strlen(inputtext) == 6)
		        {
		            if(IsNumeric(inputtext))
		            {
			            new pin = strval(inputtext), string[128];
			            format(string, sizeof(string), "You have set your admin PIN to %d.", pin);
			            SendClientMessage(playerid, WHITE, string);

			            Player[playerid][AdminPIN] = pin;
			            Player[playerid][PINAuth] = 1;
			            
			            if(strlen(Player[playerid][AdminName]) == 0 || strcmp(Player[playerid][AdminName], "Nothing", true) == 0)
			            {
			                ShowPlayerDialog(playerid, 57361, DIALOG_STYLE_INPUT, "Administrators' Name", "Please set your administrators' name!", "Set Name", "Cancel");
			            }
			            
		            }
		            else
		            {
			        	ShowPlayerDialog(playerid, 9843, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your desired PIN.", "Done", "Cancel");
		                SendClientMessage(playerid, WHITE, "PINs have to be numeric.");
		            }
		        }
		        else
		        {
			        ShowPlayerDialog(playerid, 9843, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your desired PIN.", "Done", "Cancel");
		            SendClientMessage(playerid, WHITE, "Invalid PIN. It has to be 6 digits long.");
		        }
		    }
		    case 9842:
			{
			    if(strlen(inputtext) == 6)
			    {
				    if(IsNumeric(inputtext))
				    {
 						new pin = strval(inputtext);
				        if(pin == Player[playerid][AdminPIN])
				        {
				            new string[128];
				            SendClientMessage(playerid, WHITE, "You have successfully authenticated with your admin PIN!");
				            Player[playerid][PINAuth] = 1;
				            format(string, sizeof(string), "%s has authenticated (authenticating using their PIN).", GetName(playerid));
				            SendToAdmins(ADMINORANGE, string, 0);
				        }
				        else
				        {
			        		ShowPlayerDialog(playerid, 9842, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your additional admin PIN to continue.", "Login", "Cancel");
					        new Sum, string[128];
					        Sum = 3-Player[playerid][LoginAttempts];
					        SendClientMessage(playerid, ADMINORANGE, "The PIN you have entered does not match your account. Please try again or use the forums.");
					        Player[playerid][LoginAttempts]++;
							format(string, sizeof(string), "You have %d remaining login attempts, before you are auto-banned.", Sum);
							SendClientMessage(playerid, WHITE, string);
							ShowPlayerDialog(playerid, 9842, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your additional admin PIN to continue.", "Login", "Cancel");

							if(Player[playerid][LoginAttempts] == 3)
							{
							    new hour, minute, second, day, year, month;
							    gettime(hour, minute, second);
							    getdate(year, month, day);
							    #pragma unused second
							    new IP[21];
							    GetPlayerIp(playerid, IP, sizeof(IP));
								format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | THREE FAILED PIN ATTEMPTS | System", day, month, year, hour, minute, IP, GetName(playerid));
								BanLog(string);
							    SendClientMessage(playerid, ADMINORANGE, "You have used your three attempts.");
							    Ban(playerid);
							}

						}
				    }
			    }
			    else
			    {
			        ShowPlayerDialog(playerid, 9842, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your additional admin PIN to continue.", "Login", "Cancel");
					new Sum, string[128];
					Sum = 3-Player[playerid][LoginAttempts];
					SendClientMessage(playerid, ADMINORANGE, "The PIN you have entered does not match your account. Please try again or use the forums.");
					Player[playerid][LoginAttempts]++;
					format(string, sizeof(string), "You have %d remaining login attempts, before you are auto-banned.", Sum);
					SendClientMessage(playerid, WHITE, string);
					ShowPlayerDialog(playerid, 9842, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your additional admin PIN to continue.", "Login", "Cancel");

					if(Player[playerid][LoginAttempts] == 3)
					{
					    new hour, minute, second, day, year, month;
					    gettime(hour, minute, second);
					    getdate(year, month, day);
					    #pragma unused second
					    new IP[21];
					    GetPlayerIp(playerid, IP, sizeof(IP));
						format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | THREE FAILED PIN ATTEMPTS | System", day, month, year, hour, minute, IP, GetName(playerid));
						BanLog(string);
					    SendClientMessage(playerid, ADMINORANGE, "You have used your three attempts.");
					    Ban(playerid);
					}
			    }
		    }
		    case 2489:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(Player[playerid][HasMapApp] >= 1)
		                {
		  			        ShowPlayerDialog(playerid, 6125, DIALOG_STYLE_LIST, "Select a Location", "Bank\nMechanic Job\nGuard Job\nDetective Job\nLSPD HQ\nVehicle Dealership\nLawyer Job\nCollege\nDelivery Job\n", "Select", "Cancel");
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "You do not currently own the map application. Do you wish to buy it? It costs $10.");
		                    ShowPlayerDialog(playerid, 6441, DIALOG_STYLE_LIST, "Application Purchase", "Yes, please.\nNo, thanks.", "Proceed", "Cancel");
		                }
		            }
		            case 1:
		            {
		                if(Player[playerid][HasAdApp] >= 1)
		                {
		  			        SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
		  			        SendClientMessage(playerid, WHITE, "Advertisement");
		  			        SendClientMessage(playerid, GREY, "To place a public advertisement, you can use this method via your WAP connection, please note that placing an ad");
		  			        SendClientMessage(playerid, GREY, "Will cost you $501, out of your phone credit. This is an expensive service.");
		  			        SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
		  			        ShowPlayerDialog(playerid, 4515, DIALOG_STYLE_INPUT, "Advertisement", "Please enter your advertisement dialog.", "Submit", "Cancel");
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "You do not currently own the map application. Do you wish to buy it? It costs $10.");
		                    ShowPlayerDialog(playerid, 6442, DIALOG_STYLE_LIST, "Application Purchase", "Yes - I wish to purchase this!\nNo - I do not wish to purchase this!\n", "Proceed", "Cancel");
		                }
		            }
		            case 2:
		            {
		                if(Player[playerid][HasPagesApp] >= 1)
		                {
		                    ShowPlayerDialog(playerid, 6443, DIALOG_STYLE_LIST, "Directory Application", "White Pages (people directory)\nYellow Pages (business directory)\n", "Proceed", "Cancel");
		                }
						else
						{
		                    SendClientMessage(playerid, WHITE, "You do not currently own the map application. Do you wish to buy it? It costs $10.");
		                    ShowPlayerDialog(playerid, 9342, DIALOG_STYLE_LIST, "Application Purchase", "Yes - I wish to purchase this!\nNo - I do not wish to purchase this!\n", "Proceed", "Cancel");
						}
		            }
		            case 3:
		            {
		                if(Player[playerid][HasRadioApp] >= 1)
		                {
				  			if(Player[playerid][PortableRadio] == 0)
				  			{
						  		SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
						  		SendClientMessage(playerid, WHITE, "Portable Radio - You have switched your radio ON!");
						  		SendClientMessage(playerid, GREY, "With your phone, you recieve an in-built radio. Due to the WAP connection, the phone is able to connect to the radio.");
						  		SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
					  			Player[playerid][PortableRadio] = 1;
				  			}
				  			else
				  			{
				  			    SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
					  			SendClientMessage(playerid, WHITE, "Portable Radio - You have switched your radio OFF!");
					  			SendClientMessage(playerid, GREY, "With your phone, you recieve an in-built radio. Due to the WAP connection, the phone is able to connect to the radio.");
					  			SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
				  				Player[playerid][PortableRadio] = 0;
				  			}
		                }
						else
						{
		                    SendClientMessage(playerid, WHITE, "You do not currently own the map application. Do you wish to buy it? It costs $10.");
		                    ShowPlayerDialog(playerid, 3252, DIALOG_STYLE_LIST, "Application Purchase", "Yes - I wish to purchase this!\nNo - I do not wish to purchase this!\n", "Proceed", "Cancel");
						}
		            }
		        }
		    }
		    case 3252:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(Player[playerid][PhoneCredit] >= 10)
		                {
		                    Player[playerid][HasRadioApp]++;
		                    Player[playerid][PhoneCredit] -= 10;
		                    SendClientMessage(playerid, WHITE, "You have now purchased the Radio Application.");
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "You do not have $10 phone credit to purchase this application.");
		                }
		            }
		            case 1:
					{
					    SendClientMessage(playerid, WHITE, "You're missing out! It's $10 for permanent use!");
					}
		        }
		    }
		    case 9342:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(Player[playerid][PhoneCredit] >= 10)
		                {
		                    Player[playerid][HasPagesApp]++;
		                    Player[playerid][PhoneCredit] -= 10;
		                    SendClientMessage(playerid, WHITE, "You have now purchased the Directory Application.");
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "You do not have $10 phone credit to purchase this application.");
		                }
		            }
		            case 1:
					{
					    SendClientMessage(playerid, WHITE, "You're missing out! It's $10 for permanent use!");
					}
		        }
		    }
			case 6443:
			{
			    switch(listitem)
			    {
			        case 0:
			        {
	  			        ShowPlayerDialog(playerid, 4516, DIALOG_STYLE_INPUT, "White Pages", "Please enter the name of the person you're searching for.", "Search", "Cancel");
			        }
			        case 1:
			        {
	  			        ShowPlayerDialog(playerid, 4517, DIALOG_STYLE_LIST, "Yellow Pages - Type of Business?", "24/7\nClothing\nClubs\nAdvertisement\nAdult Shop\nVehicle Dealerships\nColleges\nCharities\nChurches\nGyms\nChemists\n", "Select", "Cancel");
			        }
			    }
			}
		    case 6442:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(Player[playerid][PhoneCredit] >= 10)
		                {
		                    Player[playerid][HasAdApp]++;
		                    Player[playerid][PhoneCredit] -= 10;
		                    SendClientMessage(playerid, WHITE, "You have now purchased the Advertisement Application.");
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "You do not have $10 phone credit to purchase this application.");
		                }
		            }
		            case 1:
					{
					    SendClientMessage(playerid, WHITE, "You're missing out! It's $10 for permanent use!");
					}
		        }
		    }
		    case 6441:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(Player[playerid][PhoneCredit] >= 10)
		                {
		                    Player[playerid][HasMapApp]++;
		                    Player[playerid][PhoneCredit] -= 10;
		                    SendClientMessage(playerid, WHITE, "You have now purchased the Map Application.");
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "You do not have $10 phone credit to purchase this application.");
		                }
		            }
		            case 1:
					{
					    SendClientMessage(playerid, WHITE, "You're missing out! It's $10 for permanent use!");
					}
		        }
		    }
		    case 4512:
		    {
  				switch(listitem)
  				{
	  			    case 0:
	  			    {
	  			        ShowPlayerDialog(playerid, 4513, DIALOG_STYLE_LIST, "E Top Up", "$5\n$10\n$15\n$20\n$30\n$40\n$50\n$75\n$100\n$250\n$500", "Select", "Cancel");
	  			        SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
	  			        SendClientMessage(playerid, WHITE, "E Top Up");
	  			        SendClientMessage(playerid, GREY, "Please enter the amount of phone credit you desire to purchase.");
	  			        SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
	  			    }
	  			    case 1:
	  			    {
                        ShowPlayerDialog(playerid, 2489, DIALOG_STYLE_LIST, "Applications Menu", "Map\nAdvertisements\nDirectory (white/yellow pages)\nRadio\n", "Select", "Cancel");
	  			    }
	  			    case 2:
	  			    {
	  			        SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
	  			        SendClientMessage(playerid, GREY, "The software fault with applications has been fixed!");
	  			        SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
	  			    }
  			    }
	        }
	        case 4513:
	        {
	            switch(listitem)
	            {
	                case 0:
	                {
	                    if(Player[playerid][BankMoney] >= 5)
	                    {
	                        Player[playerid][BankMoney] -= 5;
	                        Player[playerid][PhoneCredit] += 5;
	                        Businesses[44][bVault] += 5;
	                        SendClientMessage(playerid, WHITE, "You have successfully topped up your phone, with another $5 credit.");
	                    }
	                    else
	                    {
	                        SendClientMessage(playerid, WHITE, "You have insufficient funds available in your bank account.");
	                    }
	                }
	                case 1:
	                {
	                    if(Player[playerid][BankMoney] >= 10)
	                    {
	                        Player[playerid][BankMoney] -= 10;
	                        Player[playerid][PhoneCredit] += 10;
	                        Businesses[44][bVault] += 10;
	                        SendClientMessage(playerid, WHITE, "You have successfully topped up your phone, with another $10 credit.");
	                    }
	                    else
	                    {
	                        SendClientMessage(playerid, WHITE, "You have insufficient funds available in your bank account.");
	                    }
	                }
	                case 2:
	                {
	                    if(Player[playerid][BankMoney] >= 15)
	                    {
	                        Player[playerid][BankMoney] -= 15;
	                        Player[playerid][PhoneCredit] += 15;
	                        Businesses[44][bVault] += 15;
	                        SendClientMessage(playerid, WHITE, "You have successfully topped up your phone, with another $15 credit.");
	                    }
	                    else
	                    {
	                        SendClientMessage(playerid, WHITE, "You have insufficient funds available in your bank account.");
	                    }
	                }
	                case 3:
	                {
	                    if(Player[playerid][BankMoney] >= 20)
	                    {
	                        Player[playerid][BankMoney] -= 20;
	                        Player[playerid][PhoneCredit] += 20;
	                        Businesses[44][bVault] += 20;
	                        SendClientMessage(playerid, WHITE, "You have successfully topped up your phone, with another $20 credit.");
	                    }
	                    else
	                    {
	                        SendClientMessage(playerid, WHITE, "You have insufficient funds available in your bank account.");
	                    }
	                }
	                case 4:
	                {
	                    if(Player[playerid][BankMoney] >= 30)
	                    {
	                        Player[playerid][BankMoney] -= 30;
	                        Player[playerid][PhoneCredit] += 30;
	                        Businesses[44][bVault] += 30;
	                        SendClientMessage(playerid, WHITE, "You have successfully topped up your phone, with another $30 credit.");
	                    }
	                    else
	                    {
	                        SendClientMessage(playerid, WHITE, "You have insufficient funds available in your bank account.");
	                    }
	                }
	                case 5:
	                {
	                    if(Player[playerid][BankMoney] >= 40)
	                    {
	                        Player[playerid][BankMoney] -= 40;
	                        Player[playerid][PhoneCredit] += 40;
	                        Businesses[44][bVault] += 40;
	                        SendClientMessage(playerid, WHITE, "You have successfully topped up your phone, with another $40 credit.");
	                    }
	                    else
	                    {
	                        SendClientMessage(playerid, WHITE, "You have insufficient funds available in your bank account.");
	                    }
	                }
	                case 6:
	                {
	                    if(Player[playerid][BankMoney] >= 50)
	                    {
	                        Player[playerid][BankMoney] -= 50;
	                        Player[playerid][PhoneCredit] += 50;
	                        Businesses[44][bVault] += 50;
	                        SendClientMessage(playerid, WHITE, "You have successfully topped up your phone, with another $50 credit.");
	                    }
	                    else
	                    {
	                        SendClientMessage(playerid, WHITE, "You have insufficient funds available in your bank account.");
	                    }
	                }
	                case 7:
	                {
	                    if(Player[playerid][BankMoney] >= 75)
	                    {
	                        Player[playerid][BankMoney] -= 75;
	                        Player[playerid][PhoneCredit] += 75;
	                        Businesses[44][bVault] += 75;
	                        SendClientMessage(playerid, WHITE, "You have successfully topped up your phone, with another $75 credit.");
	                    }
	                    else
	                    {
	                        SendClientMessage(playerid, WHITE, "You have insufficient funds available in your bank account.");
	                    }
	                }
	                case 8:
	                {
	                    if(Player[playerid][BankMoney] >= 100)
	                    {
	                        Player[playerid][BankMoney] -= 100;
	                        Player[playerid][PhoneCredit] += 100;
	                        Businesses[44][bVault] += 100;
	                        SendClientMessage(playerid, WHITE, "You have successfully topped up your phone, with another $100 credit.");
	                    }
	                    else
	                    {
	                        SendClientMessage(playerid, WHITE, "You have insufficient funds available in your bank account.");
	                    }
	                }
	                case 9:
	                {
	                    if(Player[playerid][BankMoney] >= 250)
	                    {
	                        Player[playerid][BankMoney] -= 250;
	                        Player[playerid][PhoneCredit] += 250;
	                        Businesses[44][bVault] += 250;
	                        SendClientMessage(playerid, WHITE, "You have successfully topped up your phone, with another $250 credit.");
	                    }
	                    else
	                    {
	                        SendClientMessage(playerid, WHITE, "You have insufficient funds available in your bank account.");
	                    }
	                }
	                case 10:
	                {
	                    if(Player[playerid][BankMoney] >= 500)
	                    {
	                        Player[playerid][BankMoney] -= 500;
	                        Player[playerid][PhoneCredit] += 500;
	                        Businesses[44][bVault] += 500;
	                        SendClientMessage(playerid, WHITE, "You have successfully topped up your phone, with another $500 credit.");
	                    }
	                    else
	                    {
	                        SendClientMessage(playerid, WHITE, "You have insufficient funds available in your bank account.");
	                    }
	                }
	            }
	        }
	        case 4515:
	        {
	            if(strlen(inputtext) < 1)
	            {
	                SendClientMessage(playerid, WHITE, "You haven't entered anything. Your WAP connection has closed.");
	            }
	            else
	            {
	                if(Player[playerid][PhoneCredit] >= 501)
	                {
			            if(AdCanBePlaced == 50)
			            {
			                new string[128];
					        format(string, sizeof(string), "Advertisement: %s", inputtext);
							SendClientMessageToAll(GREEN, string);
							format(string, sizeof(string), "Advertisement placed by %s - Phone Number: %d, from the WAPads service.", GetName(playerid), Player[playerid][PhoneN]);
							SendClientMessageToAll(GREY, string);
							Player[playerid][PhoneCredit] -= 501;
							Businesses[44][bVault] += 501;
							AdCanBePlaced = 1;
							SendClientMessage(playerid, WHITE, "You have placed an advertisement and been charged $501.");

							Player[playerid][AdsPlaced]++;

							switch(Player[playerid][AdsPlaced])
							{
							    case 100:
							    {
								    SendClientMessage(playerid, WHITE, "You have unlocked a new achievement!");
								    SendClientMessage(playerid, GREY, "You have placed 100 advertisements.");
                                    Player[playerid][AchievementRank]++;
								}
							    case 200:
							    {
								    SendClientMessage(playerid, WHITE, "You have unlocked a new achievement!");
								    SendClientMessage(playerid, GREY, "You have placed 200 advertisements.");
								    Player[playerid][AchievementRank]++;
							    }
							}
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "You're unable to place an advertisement right now, please wait 50 seconds!");
						}
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "You don't have enough phone credit.");
					}
	            }
	        }
	        case 4516:
	        {
		    	new id;
		        if(sscanf(inputtext, "u", id))
		        {
		            ShowPlayerDialog(playerid, 4516, DIALOG_STYLE_INPUT, "Yellow Pages", "Please enter the name of the person you're searching for.", "Search", "Cancel");
					SendClientMessage(playerid, WHITE, "Nobody with that name was found. Please try again.");
				}
				else
				{
				    if(IsPlayerConnectedEx(id))
				    {
				        new string[128];
						SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "Result(s) found!");

						if(Player[id][Gender] == 1)
						{
							format(string, sizeof(string), "Name: %s | Age: %d | Gender: Male", GetName(id), Player[id][Age]);
						}
						else
						{
						    format(string, sizeof(string), "Name: %s | Age: %d | Gender: Female", GetName(id), Player[id][Age]);
						}

                        SendClientMessage(playerid, GREY, string);
						SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
				    }
				    else
				    {
			            ShowPlayerDialog(playerid, 4516, DIALOG_STYLE_INPUT, "Yellow Pages", "Please enter the name of the person you're searching for.", "Search", "Cancel");
						SendClientMessage(playerid, WHITE, "Nobody with that name was found. Please try again (( Not logged in )) .");
				    }
				}
	        }
	        case 4517:
	        {
	            new string[128];
	            SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
	            switch(listitem)
	            {
	                case 0:
	                {
	                    for(new i = 1; i < MAX_BUSINESSES; i++)
	                    {
	                        if(Businesses[i][bType] == 1)
	                        {
	                            format(string, sizeof(string), "24/7 (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
	                            SendClientMessage(playerid, WHITE, string);
	                        }
	                    }
	                }
	                case 1:
	                {
	                    for(new i = 1; i < MAX_BUSINESSES; i++)
	                    {
	                        if(Businesses[i][bType] == 2)
	                        {
	                            format(string, sizeof(string), "Clothing (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
	                            SendClientMessage(playerid, WHITE, string);
	                        }
	                    }
	                }
	                case 2:
	                {
	                    for(new i = 1; i < MAX_BUSINESSES; i++)
	                    {
	                        if(Businesses[i][bType] == 3)
	                        {
	                            format(string, sizeof(string), "Clubs (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
	                            SendClientMessage(playerid, WHITE, string);
	                        }
	                    }
	                }
	                case 3:
	                {
	                    for(new i = 1; i < MAX_BUSINESSES; i++)
	                    {
	                        if(Businesses[i][bType] == 4)
	                        {
	                            format(string, sizeof(string), "Advertisement (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
	                            SendClientMessage(playerid, WHITE, string);
	                        }
	                    }
	                }
	                case 4:
	                {
	                    for(new i = 1; i < MAX_BUSINESSES; i++)
	                    {
	                        if(Businesses[i][bType] == 5)
	                        {
	                            format(string, sizeof(string), "Adult (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
	                            SendClientMessage(playerid, WHITE, string);
	                        }
	                    }
	                }
	                case 5:
	                {
	                    for(new i = 1; i < MAX_BUSINESSES; i++)
	                    {
	                        if(Businesses[i][bType] == 6)
	                        {
	                            format(string, sizeof(string), "Vehicle Dealership (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
	                            SendClientMessage(playerid, WHITE, string);
	                        }
	                    }
	                }
	                case 6:
	                {
	                    for(new i = 1; i < MAX_BUSINESSES; i++)
	                    {
	                        if(Businesses[i][bType] == 7)
	                        {
	                            format(string, sizeof(string), "College (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
	                            SendClientMessage(playerid, WHITE, string);
	                        }
	                    }
	                }
	                case 7:
	                {
	                    for(new i = 1; i < MAX_BUSINESSES; i++)
	                    {
	                        if(Businesses[i][bType] == 8)
	                        {
	                            format(string, sizeof(string), "Charity (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
	                            SendClientMessage(playerid, WHITE, string);
	                        }
	                    }
	                }
	                case 8:
	                {
	                    for(new i = 1; i < MAX_BUSINESSES; i++)
	                    {
	                        if(Businesses[i][bType] == 9)
	                        {
	                            format(string, sizeof(string), "Church (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
	                            SendClientMessage(playerid, WHITE, string);
	                        }
	                    }
	                }
	                case 9:
	                {
	                    for(new i = 1; i < MAX_BUSINESSES; i++)
	                    {
	                        if(Businesses[i][bType] == 10)
	                        {
	                            format(string, sizeof(string), "Gym (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
	                            SendClientMessage(playerid, WHITE, string);
	                        }
	                    }
	                }
	                case 10:
	                {
	                    for(new i = 1; i < MAX_BUSINESSES; i++)
	                    {
	                        if(Businesses[i][bType] == 11)
	                        {
	                            format(string, sizeof(string), "Chemists (%d) - Business Name: %s | Owner: %s", i, Businesses[i][bName], Businesses[i][bOwner]);
	                            SendClientMessage(playerid, WHITE, string);
	                        }
	                    }
	                }
	            }
	            SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
	        }
			case 4592:
		    {
		        switch(listitem)
		        {
			        case 0:
			        {
			            if(Player[playerid][FightBox] == 1)
			            {
			                SetPlayerFightingStyle(playerid, FIGHT_STYLE_BOXING);
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "Please purchase this style from a Gym first.");
			            }
			        }
			        case 1:
			        {
			            if(Player[playerid][FightKungfu] == 1)
			            {
			                SetPlayerFightingStyle(playerid, FIGHT_STYLE_KUNGFU);
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "Please purchase this style from a Gym first.");
			            }
			        }
			        case 2:
			        {
			            if(Player[playerid][FightKneehead] == 1)
			            {
			                SetPlayerFightingStyle(playerid, FIGHT_STYLE_KNEEHEAD);
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "Please purchase this style from a Gym first.");
			            }
			        }
			        case 3:
			        {
			            if(Player[playerid][FightGrabkick] == 1)
			            {
			                SetPlayerFightingStyle(playerid, FIGHT_STYLE_GRABKICK);
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "Please purchase this style from a Gym first.");
			            }
			        }
			        case 4:
			        {
			            if(Player[playerid][FightElbow] == 1)
			            {
			                SetPlayerFightingStyle(playerid, FIGHT_STYLE_ELBOW);
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "Please purchase this style from a Gym first.");
			            }
			        }
			        case 5:
			        {
		                SetPlayerFightingStyle(playerid, FIGHT_STYLE_NORMAL);
			        }
			    }
			}
		    case 4591:
		    {
		        switch(listitem)
		        {
			        case 0:
			        {
			            if(Player[playerid][FightBox] == 0)
			            {
				            if(Player[playerid][Money] >= 500)
				            {
				                Player[playerid][Money] -= 500;
				                Player[playerid][FightBox] = 1;
				                Businesses[Player[playerid][InBusiness]][bVault] += 500;
				                SendClientMessage(playerid, WHITE, "You have purchased the Boxing Fighting Style (type /usefightstyle).");
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "You do not have enough money.");
				            }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You already have this style.");
			            }
	          		}
			        case 1:
			        {
			            if(Player[playerid][FightKungfu] == 0)
			            {
				            if(Player[playerid][Money] >= 600)
				            {
				                Player[playerid][Money] -= 600;
				                Player[playerid][FightKungfu] = 1;
				                Businesses[Player[playerid][InBusiness]][bVault] += 600;
				                SendClientMessage(playerid, WHITE, "You have purchased the Kungfu Fighting Style (type /usefightstyle).");
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "You do not have enough money.");
				            }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You already have this style.");
			            }
					}
			        case 2:
			        {
			            if(Player[playerid][FightKneehead] == 0)
			            {
				            if(Player[playerid][Money] >= 700)
				            {
				                Player[playerid][Money] -= 700;
				                Player[playerid][FightKneehead] = 1;
				                Businesses[Player[playerid][InBusiness]][bVault] +=700;
				                SendClientMessage(playerid, WHITE, "You have purchased the Kneehead Fighting Style (type /usefightstyle).");
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "You do not have enough money.");
				            }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You already have this style.");
			            }
			        }
			        case 3:
			        {
			            if(Player[playerid][FightGrabkick] == 0)
			            {
				            if(Player[playerid][Money] >= 800)
				            {
				                Player[playerid][Money] -= 800;
				                Player[playerid][FightGrabkick] = 1;
				                Businesses[Player[playerid][InBusiness]][bVault] += 800;
				                SendClientMessage(playerid, WHITE, "You have purchased the Grabkick Fighting Style (type /usefightstyle).");
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "You do not have enough money.");
				            }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You already have this style.");
			            }
			        }
			        case 4:
			        {
			            if(Player[playerid][FightElbow] == 0)
			            {
				            if(Player[playerid][Money] >= 900)
				            {
				                Player[playerid][Money] -= 900;
				                Player[playerid][FightElbow] = 1;
				                Businesses[Player[playerid][InBusiness]][bVault] += 900;
				                SendClientMessage(playerid, WHITE, "You have purchased the Elbow Fighting Style (type /usefightstyle).");
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "You do not have enough money.");
				            }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You already have this style.");
			            }
			        }
			    }
		    }
		    case 1230:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1])
		                {
		                    if(Player[playerid][CollegeMedia] == 0)
		                    {
			                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
			                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
			                    Player[playerid][CollegeMedia] = 1;
			                    SendClientMessage(playerid, WHITE, "You are now qualified in Media Studies.");
		                	}
		                	else
		                	{
		                	    SendClientMessage(playerid, WHITE, "You already have a degree in Media Studies.");
		                	}
		                }
		            }
		            case 1:
		            {
		                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice2])
		                {
		                    if(Player[playerid][CollegeLaw] == 0)
		                    {
			                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice2];
			                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice2];
			                    Player[playerid][CollegeLaw] = 1;
			                    SendClientMessage(playerid, WHITE, "You are now qualified in Civil Law Studies.");
		                	}
		                	else
		                	{
		                	    SendClientMessage(playerid, WHITE, "You already have a degree in Civil Law Studies.");
		                	}
		                }
		            }
		            case 2:
		            {
		                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice3])
		                {
		                    if(Player[playerid][CollegeEng] == 0)
		                    {
			                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice3];
			                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice3];
			                    Player[playerid][CollegeEng] = 1;
			                    SendClientMessage(playerid, WHITE, "You are now qualified in Intermediate English.");
		                	}
		                	else
		                	{
		                	    SendClientMessage(playerid, WHITE, "You already have a degree in Intermediate English.");
		                	}
		                }
		            }
		            case 3:
		            {
		                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice4])
		                {
		                    if(Player[playerid][CollegeMath] == 0)
		                    {
			                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice4];
			                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice4];
			                    Player[playerid][CollegeMath] = 1;
			                    SendClientMessage(playerid, WHITE, "You are now qualified in Intermediate Mathematics.");
		                	}
		                	else
		                	{
		                	    SendClientMessage(playerid, WHITE, "You already have a degree in Intermediate Mathematics.");
		                	}
		                }
		            }
		            case 4:
		            {
		                if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice5])
		                {
		                    if(Player[playerid][CollegeChem] == 0)
		                    {
			                    Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice5];
			                    Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice5];
			                    Player[playerid][CollegeChem] = 1;
			                    SendClientMessage(playerid, WHITE, "You are now qualified in Intermediate Chemistry.");
		                	}
		                	else
		                	{
		                	    SendClientMessage(playerid, WHITE, "You already have a degree in Intermediate Chemistry.");
		                	}
		                }
		            }
		        }
		    }
		    case 4621:
		    {
		        new string[128];

		        switch(listitem)
		        {
		            case 0:
		            {
				        format(string, sizeof(string), "* %s has dropped their Pot.", GetName(playerid));
				        NearByMessage(playerid, NICESKY, string);
				        Player[playerid][Pot] = 0;
				        SendClientMessage(playerid, WHITE, "You have dropped your Pot.");
		            }
		            case 1:
		            {
				        format(string, sizeof(string), "* %s has dropped their Cocaine.", GetName(playerid));
				        NearByMessage(playerid, NICESKY, string);
				        Player[playerid][Cocaine] = 0;
				        SendClientMessage(playerid, WHITE, "You have dropped your Cocaine.");
		            }
		            case 2:
		            {
				        format(string, sizeof(string), "* %s has dropped their Materials.", GetName(playerid));
				        NearByMessage(playerid, NICESKY, string);
				        Player[playerid][Materials] = 0;
				        SendClientMessage(playerid, WHITE, "You have dropped your Materials.");
		            }
		            case 3:
		            {
				        format(string, sizeof(string), "* %s has dropped their Weapons.", GetName(playerid));
				        NearByMessage(playerid, NICESKY, string);
				        ResetPlayerWeaponsEx(playerid);
				        SendClientMessage(playerid, WHITE, "You have dropped your Weapons.");
		            }
		            case 4:
		            {
		                Player[playerid][PhoneN] = -1;
				        format(string, sizeof(string), "* %s has dropped their Phone.", GetName(playerid));
				        NearByMessage(playerid, NICESKY, string);
				        SendClientMessage(playerid, WHITE, "You have dropped your Phone.");
		            }
		            case 5:
		            {
		                Player[playerid][WalkieTalkie] = 0;
				        format(string, sizeof(string), "* %s has dropped their Walkie Talkie.", GetName(playerid));
				        NearByMessage(playerid, NICESKY, string);
				        SendClientMessage(playerid, WHITE, "You have dropped your Walkie Talkie.");
		            }
		        }
		    }
		    case 3895:
		    {
				if(Player[playerid][Authenticated] == 0)
			    {
			        new string[128];
			        format(string, sizeof(string), "Accounts/%s.ini", GetName(playerid));
			        if(!fexist(string))
			        {
			            if(strlen(inputtext) >= 1)
			            {
				    		RegisterPlayer(playerid, inputtext);
				    		Player[playerid][Authenticated] = 1;
			                Player[playerid][Tutorial] = 1;
							PutPlayerInTutorial(playerid, 0);
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "Must be longer than 1 char.");
						}
			    	}
			    	else
			    	{
			    	    SendClientMessage(playerid, WHITE, "Your account already exists.");
			    	}
				}
				else
				{
				    SendClientMessage(playerid, GREY, "You must logout to create a new account.");
				}
		    }
		    case 3894:
		    {
				if(strlen(inputtext) > 128 || strlen(inputtext) < 1)
			    {
			        new Sum, string[128];
			        Sum = 3-Player[playerid][LoginAttempts];
			        SendClientMessage(playerid, ADMINORANGE, "The password you have entered does not match your account. Please try again or use the forums.");
			        Player[playerid][LoginAttempts]++;
					format(string, sizeof(string), "You have %d remaining login attempts, before you are auto-banned.", Sum);
					SendClientMessage(playerid, WHITE, string);
					ShowPlayerDialog(playerid, 3894, DIALOG_STYLE_INPUT, "Authentication", "Welcome to Vortex Roleplay\n\nYou have an account, please enter your password to authenticate.", "Login", "Help");
			    }
			    else
			    {
					if(Player[playerid][Authenticated] == 0)
					{
						OnPlayerLoginAttempt(playerid, inputtext);
					}
					else
					{
					    SendClientMessage(playerid, GREY, "You're already authenticated.");
					}
		        }
            }
		    case 1529:
		    {
		        switch(listitem)
		        {
		            case 0: ShowPlayerDialog(playerid, 1530, DIALOG_STYLE_LIST, "House Interiors", "Madd Doggs'\nCJ's House\nRyder's House\nTiger Skin\nColonel Furhbergers\nCrack Den\nDenises' Room\nKaties' Room", "Select", "Cancel");
		            case 1: ShowPlayerDialog(playerid, 1531, DIALOG_STYLE_LIST, "Race-track Interiors", "Dirt Track\nVice Stadium\nBloodbowl Stadium\n8-Track Stadium\nKickstart Stadium", "Select", "Cancel");
		            case 2: ShowPlayerDialog(playerid, 1532, DIALOG_STYLE_LIST, "City Locations", "Los Santos\nSan Fierro\nLas Venturas", "Select", "Cancel");
		            case 3: ShowPlayerDialog(playerid, 1533, DIALOG_STYLE_LIST, "Popular Locations", "Bank (exterior)\nGym (exterior)\nHospital (exterior)\nHospital2 (exterior)\nNewbie Spawn\n", "Select", "Cancel");
		            case 4: ShowPlayerDialog(playerid, 1535, DIALOG_STYLE_LIST, "Gym Interiors", "Ganton Gym (LS)\nCobra Martial Arts (SF)\nBelow the Belt Gym (LV)", "Select", "Cancel");
		            case 5: ShowPlayerDialog(playerid, 1534, DIALOG_STYLE_LIST, "Other Locations", "RC Battlefield\nArea 69\nWarehouse 1\nWarehouse 2\nMeat Factory\nSherman Dam\n", "Select", "Cancel");
		        }
			}
			case 3928:
			{
			    switch(listitem)
			    {
			        case 0:
			        {
		            	SetPlayerInterior(playerid, 0);
			            Player[playerid][InGroupHQ] = 0;
			            SetPlayerPos(playerid, 1572.0029, -1675.4127, 28.3955);
			            SetPlayerVirtualWorld(playerid, 0);
			        }
			        case 1:
			        {
			            Player[playerid][InGroupHQ] = 1;
			            SetPlayerInterior(playerid, 10);
			            SetPlayerVirtualWorld(playerid, 45001);
			            SetPlayerPos(playerid, 276.0980, 122.1232, 1004.6172);
			        }
			        case 2:
			        {
			            Player[playerid][InGroupHQ] = 0;
			            SetPlayerInterior(playerid, 0);
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerPos(playerid, 1568.6676, -1689.9708, 6.2188);
			        }
			    }
			}
			case 9864:
			{
			    switch(listitem)
			    {
			        case 0:
			        {
			            if(Player[playerid][MedicDuty] == 1)
			            {
			                Player[playerid][MedicDuty] = 0;
							SendClientMessage(playerid, WHITE, "You are no longer on medic duty. You won't recieve calls.");
			            }
			            else
			            {
			                Player[playerid][MedicDuty] = 1;
							SendClientMessage(playerid, WHITE, "You are now on medic duty. You will recieve calls.");
			            }
					}
					case 1:
					{
					    ShowPlayerDialog(playerid, 9865, DIALOG_STYLE_LIST, "LSFMD Menu", "Paramedics\nFiremen", "Select", "Cancel");
					}
					case 2:
					{
					    ShowPlayerDialog(playerid, 9868, DIALOG_STYLE_LIST, "LSFMD Menu", "Fire Extinguisher ($30 - Government Fund)\nChainsaw ($100 - Government Fund)\n", "Select", "Cancel");
					}
			    }
			}
			case 9865:
			{
			    switch(listitem)
			    {
			        case 0: ShowPlayerDialog(playerid, 9866, DIALOG_STYLE_LIST, "LSFMD Menu", "Black Paramedic (with white shirt)\nHispanic Paramedic (with blue shirt)\nWhite Paramedic (with green shirt)", "Select", "Cancel");
			        case 1: ShowPlayerDialog(playerid, 9867, DIALOG_STYLE_LIST, "LSFMD Menu", "White Fireman (with yellow suite)\nBlack Fireman (with green suite)\nWhite Fireman (with black suite)", "Select", "Cancel");
				}
			}
			case 9866:
			{
			    switch(listitem)
			    {
			        case 0: SetPlayerSkin(playerid, 274);
			        case 1: SetPlayerSkin(playerid, 275);
			        case 2: SetPlayerSkin(playerid, 276);
			    }
			}
			case 9867:
			{
			    switch(listitem)
			    {
			        case 0: SetPlayerSkin(playerid, 277);
			        case 1: SetPlayerSkin(playerid, 278);
			        case 2: SetPlayerSkin(playerid, 279);
			    }
			}
			case 9868:
			{
			    switch(listitem)
			    {
			        case 0:
					{
					    if(Groups[3][SafeMoney] >= 30)
					    {
							GivePlayerWeaponEx(playerid, 42);
							Groups[3][SafeMoney] -= 30;
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "There are insufficient funds available, in the government vault.");
						}
					}
			        case 1:
					{
					    if(Groups[3][SafeMoney] >= 100)
					    {
							GivePlayerWeaponEx(playerid, 9);
							Groups[3][SafeMoney] -= 100;
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "There are insufficient funds available, in the government vault.");
						}
					}
			    }
			}
			/*case 6125:
			{
			    if(Player[playerid][Checkpoint] == 0)
			    {
				    switch(listitem)
				    {
				        case 0:
				        {
				            SetPlayerCheckpoint(playerid, BankExtX, BankExtY, BankExtZ, 10.0);
				            Player[playerid][Checkpoint] = 1;
				            Player[playerid][Map] = 1;
				            SendClientMessage(playerid, WHITE, "You have requested the location for the Bank, a marker has been set!");
				        }
				        case 1:
				        {
				            SetPlayerCheckpoint(playerid, Jobs[2][JobJoinPosX], Jobs[2][JobJoinPosY], Jobs[2][JobJoinPosZ], 10.0);
				            Player[playerid][Checkpoint] = 1;
				            Player[playerid][Map] = 1;
				            SendClientMessage(playerid, WHITE, "You have requested the location for the Mechanic Job, a marker has been set!");
				        }
				        case 2:
				        {
				            SetPlayerCheckpoint(playerid, Jobs[3][JobJoinPosX], Jobs[3][JobJoinPosY], Jobs[3][JobJoinPosZ], 10.0);
				            Player[playerid][Checkpoint] = 1;
				            Player[playerid][Map] = 1;
				            SendClientMessage(playerid, WHITE, "You have requested the location for the Guard Job, a marker has been set!");
				        }
				        case 3:
				        {
				            SetPlayerCheckpoint(playerid, Jobs[4][JobJoinPosX], Jobs[4][JobJoinPosY], Jobs[4][JobJoinPosZ], 10.0);
				            Player[playerid][Checkpoint] = 1;
				            Player[playerid][Map] = 1;
				            SendClientMessage(playerid, WHITE, "You have requested the location for the Detective Job, a marker has been set!");
				        }
				        case 4:
				        {
				            SetPlayerCheckpoint(playerid, Groups[1][HQExteriorX], Groups[1][HQExteriorY], Groups[1][HQExteriorZ], 10.0);
				            Player[playerid][Checkpoint] = 1;
				            Player[playerid][Map] = 1;
				            SendClientMessage(playerid, WHITE, "You have requested the location for the LSPD HQ, a marker has been set!");
				        }
				        case 5:
				        {
				        
				            new string[128];
				            format(string, sizeof(string), "You have requested the location for the %s, a marker has been set!", Businesses[14][bName]);
				            SetPlayerCheckpoint(playerid, Businesses[14][bExteriorX], Businesses[14][bExteriorY], Businesses[14][bExteriorZ], 10.0);
				            Player[playerid][Checkpoint] = 1;
				            Player[playerid][Map] = 1;
				            SendClientMessage(playerid, WHITE, string);
				        }
				        case 6:
				        {
				            new string[128];
				            format(string, sizeof(string), "You have requested the location for the %s Job, a marker has been set!", Jobs[7][JobName]);
				            SetPlayerCheckpoint(playerid, Jobs[7][JobJoinPosX], Jobs[7][JobJoinPosY], Jobs[7][JobJoinPosZ], 10.0);
				            Player[playerid][Checkpoint] = 1;
				            Player[playerid][Map] = 1;
				            SendClientMessage(playerid, WHITE, string);
				        }
				        case 7:
				        {
				            new string[128];
				            format(string, sizeof(string), "You have requested the location for the %s, a marker has been set!", Businesses[24][bName]);
				            SetPlayerCheckpoint(playerid, Businesses[24][bExteriorX], Businesses[24][bExteriorY], Businesses[24][bExteriorZ], 10.0);
				            Player[playerid][Checkpoint] = 1;
				            Player[playerid][Map] = 1;
				            SendClientMessage(playerid, WHITE, string);
				        }
				        case 8:
				        {
				            SetPlayerCheckpoint(playerid, Jobs[5][JobJoinPosX], Jobs[5][JobJoinPosY], Jobs[5][JobJoinPosZ], 10.0);
				            Player[playerid][Checkpoint] = 1;
				            Player[playerid][Map] = 1;
				            SendClientMessage(playerid, WHITE, "You have requested the location for the Delivery Job, a marker has been set!");
				        }
				        case 9:
				        {
				            new string[128];
				            format(string, sizeof(string), "You have requested the location for the %s, a marker has been set!", Businesses[69][bName]);
				            SetPlayerCheckpoint(playerid, Businesses[69][bExteriorX], Businesses[69][bExteriorY], Businesses[69][bExteriorZ], 10.0);
				            Player[playerid][Checkpoint] = 1;
				            Player[playerid][Map] = 1;
				            SendClientMessage(playerid, WHITE, string);
				        }
				    }
			    }
			}*/
			case 1535:
			{
			    switch(listitem)
			    {
			        case 0:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 5);
			            SetPlayerPos(playerid, 772.111999, -3.898649, 1000.728820);
			        }
			        case 1:
			        {
               			SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 6);
			            SetPlayerPos(playerid, 774.213989, -48.924297, 1000.585937);
			        }
			        case 2:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 7);
			            SetPlayerPos(playerid, 773.579956, -77.096694, 1000.655029);
			        }
			    }
			}
			case 1534:
			{
			    switch(listitem)
			    {
			        case 0:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 10);
			            SetPlayerPos(playerid, -975.975708, 1060.983032, 1345.671875);
			        }
			        case 1:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 0);
			            SetPlayerPos(playerid, 223.431976, 1872.400268, 13.734375);
			        }
			        case 2:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 1);
			            SetPlayerPos(playerid, 1412.639892, -1.787510, 1000.924377);
			        }
			        case 3:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 18);
			            SetPlayerPos(playerid, 1302.519897, -1.787510, 1001.028259);
			        }
			        case 4:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 1);
			            SetPlayerPos(playerid, 963.418762, 2108.292480, 1011.030273);
			        }
			        case 5:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 17);
			            SetPlayerPos(playerid, -959.564392, 1848.576782, 9.000000);
			        }
			    }
			}
			case 1533:
			{
			    switch(listitem)
			    {
			        case 0:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 0);
			            SetPlayerPos(playerid, BankExtX, BankExtY, BankExtZ);
			        }
			        case 1:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 0);
			            SetPlayerPos(playerid, 2222.6714, -1724.8436, 13.5625);
			        }
			        case 2:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 0);
			            SetPlayerPos(playerid, HospitalSpawnX, HospitalSpawnY, HospitalSpawnZ);
			        }
			        case 3:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, HospitalInt2);
			            SetPlayerPos(playerid, HospitalSpawnX2, HospitalSpawnY2, HospitalSpawnZ2);
			        }
			        case 4:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 0);
			            SetPlayerPos(playerid, SpawnX, SpawnY, SpawnZ);
			        }
			    }
			}
			case 1532:
			{
			    switch(listitem)
			    {
			        case 0:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 0);
			            SetPlayerPos(playerid, 1550.2311, -1675.4509, 15.3155);
			        }
			        case 1:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 0);
			            SetPlayerPos(playerid, -1641.9742, 431.1623, 7.1102);
			        }
			        case 2:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 0);
			            SetPlayerPos(playerid, 1699.2, 1435.1, 10.7);
			        }
			    }
			}
			case 1531:
			{
			    switch(listitem)
			    {
			        case 0:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 4);
			            SetPlayerPos(playerid, -1444.645507, -664.526000, 1053.572998);
			        }
			        case 1:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 1);
			            SetPlayerPos(playerid, -1401.829956, 107.051300, 1032.273437);
			        }
			        case 2:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 15);
			            SetPlayerPos(playerid, -1398.103515, 937.631164, 1036.479125);
			        }
			        case 3:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 7);
			            SetPlayerPos(playerid, -1398.065307, -217.028900, 1051.115844);
			        }
			        case 4:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 14);
			            SetPlayerPos(playerid, -1465.268676, 1557.868286, 1052.531250);
			        }
			    }
			}
			case 1530:
			{
			    switch(listitem)
			    {
			        case 0:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 5);
			            SetPlayerPos(playerid, 1267.663208, -781.323242, 1091.906250);
			        }
			        case 1:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 3);
			            SetPlayerPos(playerid, 2496.049804, -1695.238159, 1014.742187);
			        }
			        case 2:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 2);
			            SetPlayerPos(playerid, 2454.717041, -1700.871582, 1013.515197);
			        }
			        case 3:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 3);
			            SetPlayerPos(playerid, 964.106994, -53.205497, 1001.124572);
			        }
			        case 4:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 8);
			            SetPlayerPos(playerid, 2807.619873, -1171.899902, 1025.570312);
			        }
			        case 5:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 5);
			            SetPlayerPos(playerid, 318.564971, 1118.209960, 1083.882812);
			        }
			        case 6:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 1);
			            SetPlayerPos(playerid, 244.411987, 305.032989, 999.148437);
			        }
			        case 7:
			        {
			            SetPlayerVirtualWorld(playerid, 0);
			            SetPlayerInterior(playerid, 2);
			            SetPlayerPos(playerid, 271.884979, 306.631988, 999.148437);
			        }
			    }
			}
		    case 3260:
		    {
		        switch(listitem)
		        {
		            case 0:
					{
					    if(Player[playerid][Tester] >= 1)
					    {
							ShowPlayerDialog(playerid, 322, DIALOG_STYLE_LIST, "Commands", "General\nAnimations\nBank\nBusinesses\nHouses\nOwned Vehicles\nJobs\nGroups\nPhone\nWalkie Talkie\nVIP\nBETA\n", "Select", "Cancel");
			            }
			            else
			            {
			                ShowPlayerDialog(playerid, 322, DIALOG_STYLE_LIST, "Commands", "General\nAnimations\nBank\nBusinesses\nHouses\nOwned Vehicles\nJobs\nGroups\nPhone\nWalkie Talkie\nVIP\n", "Select", "Cancel");
			            }
		            }
					case 1:
		            {
		                SendClientMessage(playerid, WHITE, "--------------------------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "Administrators");
						SendClientMessage(playerid, GREY, "Vortex Roleplay is managed by a team, consisting of around 13 / 14 people who do a fairly great job of managing the server.");
						SendClientMessage(playerid, GREY, "At the moment, we're not currently looking for any more administrators. So don't pester us about becoming one.");
		                SendClientMessage(playerid, WHITE, "--------------------------------------------------------------------------------------------------------------------------------");
		            }
		            case 2:
		            {
		                SendClientMessage(playerid, WHITE, "--------------------------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "Our rules change on a regular basis, we suggest you visit our forum to check them (www.virtualrp.net).");
		                SendClientMessage(playerid, WHITE, "--------------------------------------------------------------------------------------------------------------------------------");
		            }
		            case 4:
		            {
			            SendClientMessage(playerid, WHITE, "--------------------------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "Commands allocated for this business.");

		                switch(Businesses[Player[playerid][InBusiness]][bType])
		                {
		                    case 1: SendClientMessage(playerid, WHITE, "/buy");
		                    case 2: SendClientMessage(playerid, WHITE, "/buyclothes");
		                    case 3: SendClientMessage(playerid, WHITE, "/buydrink");
		                    case 4: SendClientMessage(playerid, WHITE, "/(ad)vertisement");
		                    case 5: SendClientMessage(playerid, WHITE, "/buy");
		                    case 6: SendClientMessage(playerid, WHITE, "/buyvehicle");
		                    case 7: SendClientMessage(playerid, WHITE, "/takecourse");
		                    case 8: SendClientMessage(playerid, WHITE, "/donate");
		                    case 9: SendClientMessage(playerid, WHITE, "/propose");
		                    case 10: SendClientMessage(playerid, WHITE, "/buyfightstyle");
		                    case 11: SendClientMessage(playerid, WHITE, "/buy");
		                    case 12: SendClientMessage(playerid, WHITE, "/buy");
		                }

		                SendClientMessage(playerid, WHITE, "--------------------------------------------------------------------------------------------------------------------------------");
		            }
		        }
		    }
	    case 6676:
		    {
		        if(strlen(inputtext) >= 1 && strlen(inputtext) < 60)
		        {
		            new string[100];
		            format(Player[playerid][ReportText], 128, inputtext);
		            format(string, sizeof(string), "%s (ID: %d) has reported %s (ID: %d): %s", GetName(playerid), playerid, GetName(Player[playerid][ReportingPlayer]), Player[playerid][ReportingPlayer], inputtext);
					SendToAdmins(ADMINORANGE, string, 1);
					format(string, sizeof(string), "You have reported %s (ID: %d): %s", GetName(Player[playerid][ReportingPlayer]), Player[playerid][ReportingPlayer], inputtext);
					SendClientMessage(playerid, WHITE, string);
					
					Player[playerid][ActiveReport] = 1;
					format(Player[playerid][ReportText], 128, "PLAYER REPORT: %s reported %s, for %s.", GetName(playerid), GetName(Player[playerid][ReportingPlayer]), inputtext);
				}
		        else
		        {
		            ShowPlayerDialog(playerid, 6676, DIALOG_STYLE_INPUT, "Player Report", "Enter a valid reason for why you're reporting that player.", "Report", "Cancel");
		            SendClientMessage(playerid, WHITE, "Strings over 60 are ignored.");
		        }
		    }
		    case 7766:
		    {
		        if(strlen(inputtext) > MAX_PLAYER_NAME || strlen(inputtext) < 1)
		        {
		            SendClientMessage(playerid, WHITE, "That string is longer than the SA-MP name limit or is below the allocated string limit of 1.");
		        }
		        else
		        {
		            new id;
		            if(sscanf(inputtext, "u", id))
		            {
		            	ShowPlayerDialog(playerid, 7766, DIALOG_STYLE_INPUT, "Player Report", "Enter the name of the player you wish to report.", "Report", "Cancel");
		            	SendClientMessage(playerid, WHITE, "Invalid character name / ID, please use a valid name to report.");
				    }
				    else
				    {
		            	if(!IsPlayerConnectedEx(id))
		            	{
		            	    ShowPlayerDialog(playerid, 7766, DIALOG_STYLE_INPUT, "Player Report", "Enter the name of the player you wish to report.", "Report", "Cancel");
		            	    SendClientMessage(playerid, WHITE, "Invalid character name / ID, please use a valid name to report.");
		            	}
						else
						{
						    if(IsPlayerConnectedEx(id))
						    {
						        Player[playerid][ReportingPlayer] = id;
						        ShowPlayerDialog(playerid, 6676, DIALOG_STYLE_INPUT, "Player Report", "Enter a valid reason for why you're reporting that player.", "Report", "Cancel");
						    }
					    }
				    }
			    }
		    }
		    case 9331:
		    {
		        new string[128];
		        if(strlen(inputtext) >= MAX_PLAYER_NAME || strlen(inputtext) < 1)
		        {
		            SendClientMessage(playerid, WHITE, "That's over the name limit!");
		        }
		        else
		        {
		            format(string, sizeof(string), "Accounts/%s.ini", inputtext);
		            if(fexist(string))
		            {
		                SendClientMessage(playerid, WHITE, "That account already exists.");
		                ShowPlayerDialog(playerid, 9331, DIALOG_STYLE_INPUT, "Namechange", "Enter your new desired name.", "Report", "Cancel");
		            }
		            else
		            {
	                	format(string, sizeof(string), "%s [ID: %d] is requesting a name-change to %s!", GetName(playerid), playerid, inputtext);
	                    SendToAdmins(ADMINORANGE, string, 1);

						Player[playerid][ActiveReport] = 1;
						format(Player[playerid][ReportText], 128, "NAMECHANGE: %s", inputtext);
					}
		        }
	        }
		    case 6347:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                new Count;
                        for(new i = 0; i < MAX_PLAYERS; i++)
                        {
                            if(IsPlayerConnectedEx(i))
                            {
                                if(Player[i][AdminLevel] >= 4 && Player[i][AdminDuty] >= 1)
                                {
                                    Count++;
                                }
                            }
                        }

                        if(Count >= 1)
                        {
                            SendClientMessage(playerid, WHITE, "Name Changes are free again, but only use this if you have a geniune request, and nothing stupid.");
                            ShowPlayerDialog(playerid, 9331, DIALOG_STYLE_INPUT, "Name Change", "Enter your new desired name. Name Changes are free.", "Report", "Cancel");
                        }
                        else
                        {
                            SendClientMessage(playerid, WHITE, "Sorry, there are no administrators available who have the power to change names.");
                        }
		            }
		            case 1:
		            {
						SendClientMessage(playerid, WHITE, "--------------------------------------------------------------------------------------------------------------------------------");
						SendClientMessage(playerid, WHITE, "Skin Shops (Binco, Prolaps, etc)");
						SendClientMessage(playerid, GREY, "There are various clothing shops. You can obtain new clothes from these shops, there are several around Los Santos.");
						SendClientMessage(playerid, GREY, "Once you have found a Skin Shop, type /buyclothes");
						SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
					}
					case 2:
					{
		                new Count;
                        for(new i = 0; i < MAX_PLAYERS; i++)
                        {
                            if(IsPlayerConnectedEx(i))
                            {
                                if(Player[i][AdminLevel] >= 3 && Player[i][AdminDuty] >= 1)
                                {
                                    Count++;
                                }
                            }
                        }

                        if(Count >= 1)
                        {
                            ShowPlayerDialog(playerid, 8135, DIALOG_STYLE_LIST, "Select The Weapon", "Desert Eagle\nShotgun\nCombat Shotgun\nM4\nAK47\nMP5\nSniper Rifle", "Select", "Cancel");
                        }
                        else
                        {
                            SendClientMessage(playerid, WHITE, "Sorry, there are no administrators available who have the power to spawn weapons");
                        }
					}
					case 3:
					{
		                new Count, string[128];
                        for(new i = 0; i < MAX_PLAYERS; i++)
                        {
                            if(IsPlayerConnectedEx(i))
                            {
                                if(Player[i][AdminLevel] >= 3 && Player[i][AdminDuty] >= 1)
                                {
                                    Count++;
                                }
                            }
                        }

                        if(Count >= 1)
                        {
                            format(string, sizeof(string), "%s is requesting an armour refund.", GetName(playerid));
                            SendToAdmins(ADMINORANGE, string, 1);
                            SendClientMessage(playerid, WHITE, "You have requested an armour refund, please note we only refund, not give.");

							Player[playerid][ActiveReport] = 1;
							format(Player[playerid][ReportText], 128, "Armour Refund");
						}
                        else
                        {
                            SendClientMessage(playerid, WHITE, "Sorry, there are no administrators available who have the power to spawn armour.");
                        }
					}
		        }
		    }
		    case 99:
		    {
		        new string[128];
		        if(strlen(inputtext) >= 1 && strlen(inputtext) < 128)
		        {
			        switch(Player[playerid][WeaponRefund])
			        {
			            case 24:
			            {
			        	    format(string, sizeof(string), "%s [ID: %d] is requesting a weapon refund (24 - Desert Eagle): %s", GetName(playerid), playerid, inputtext);
		                    SendToAdmins(ADMINORANGE, string, 1);
		                    SendClientMessage(playerid, WHITE, "You have requested a weapon, please note we only refund weapons. We do not give them out for free.");
		                    
							Player[playerid][ActiveReport] = 1;
							format(Player[playerid][ReportText], 128, "WEAPON REFUND (%d): %s", Player[playerid][WeaponRefund], inputtext);
		                }
			            case 25:
			            {
			        	    format(string, sizeof(string), "%s [ID: %d] is requesting a weapon refund (25 - Shotgun): %s", GetName(playerid), playerid, inputtext);
		                    SendToAdmins(ADMINORANGE, string, 1);
		                    SendClientMessage(playerid, WHITE, "You have requested a weapon, please note we only refund weapons. We do not give them out for free.");

							Player[playerid][ActiveReport] = 1;
							format(Player[playerid][ReportText], 128, "WEAPON REFUND (%d): %s", Player[playerid][WeaponRefund], inputtext);
						}
		                case 27:
		                {
			        	    format(string, sizeof(string), "%s [ID: %d] is requesting a weapon refund (27 - Combat Shotgun): %s", GetName(playerid), playerid, inputtext);
		                    SendToAdmins(ADMINORANGE, string, 1);
		                    SendClientMessage(playerid, WHITE, "You have requested a weapon, please note we only refund weapons. We do not give them out for free.");

							Player[playerid][ActiveReport] = 1;
							format(Player[playerid][ReportText], 128, "WEAPON REFUND (%d): %s", Player[playerid][WeaponRefund], inputtext);
						}
		                case 29:
		                {
			        	    format(string, sizeof(string), "%s [ID: %d] is requesting a weapon refund (29 - MP5): %s", GetName(playerid), playerid, inputtext);
		                    SendToAdmins(ADMINORANGE, string, 1);
		                    SendClientMessage(playerid, WHITE, "You have requested a weapon, please note we only refund weapons. We do not give them out for free.");

							Player[playerid][ActiveReport] = 1;
							format(Player[playerid][ReportText], 128, "WEAPON REFUND (%d): %s", Player[playerid][WeaponRefund], inputtext);
						}
		                case 30:
		                {
			        	    format(string, sizeof(string), "%s [ID: %d] is requesting a weapon refund (30 - AK47): %s", GetName(playerid), playerid, inputtext);
		                    SendToAdmins(ADMINORANGE, string, 1);
		                    SendClientMessage(playerid, WHITE, "You have requested a weapon, please note we only refund weapons. We do not give them out for free.");

							Player[playerid][ActiveReport] = 1;
							format(Player[playerid][ReportText], 128, "WEAPON REFUND (%d): %s", Player[playerid][WeaponRefund], inputtext);
						}
		                case 31:
		                {
			        	    format(string, sizeof(string), "%s [ID: %d] is requesting a weapon refund (31 - M4): %s", GetName(playerid), playerid, inputtext);
		                    SendToAdmins(ADMINORANGE, string, 1);
		                    SendClientMessage(playerid, WHITE, "You have requested a weapon, please note we only refund weapons. We do not give them out for free.");

							Player[playerid][ActiveReport] = 1;
							format(Player[playerid][ReportText], 128, "WEAPON REFUND (%d): %s", Player[playerid][WeaponRefund], inputtext);
						}
		                case 34:
		                {
			        	    format(string, sizeof(string), "%s [ID: %d] is requesting a weapon refund (34 - Sniper Rifle): %s", GetName(playerid), playerid, inputtext);
		                    SendToAdmins(ADMINORANGE, string, 1);
		                    SendClientMessage(playerid, WHITE, "You have requested a weapon, please note we only refund weapons. We do not give them out for free.");

							Player[playerid][ActiveReport] = 1;
							format(Player[playerid][ReportText], 128, "WEAPON REFUND (%d): %s", Player[playerid][WeaponRefund], inputtext);
						}
			        }
		        }
		        else
		        {
		            GetWeaponName(Player[playerid][WeaponRefund], string, sizeof(string));
		            format(string, sizeof(string), "Please tell us why you're requesting a %s.", string);
		            ShowPlayerDialog(playerid, 99, DIALOG_STYLE_INPUT, "Why are you requesting a refund?", string, "Request", "Cancel");
		        }
		    }
		    case 8135:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                ShowPlayerDialog(playerid, 99, DIALOG_STYLE_INPUT, "Why are you requesting a refund?", "Please tell us why you're requesting a Desert Eagle.", "Request", "Cancel");
                        Player[playerid][WeaponRefund] = 24;
		            }
		            case 1:
		            {
		                ShowPlayerDialog(playerid, 99, DIALOG_STYLE_INPUT, "Why are you requesting a refund?", "Please tell us why you're requesting a Shotgun.", "Request", "Cancel");
                        Player[playerid][WeaponRefund] = 25;
		            }
		            case 2:
		            {
		                ShowPlayerDialog(playerid, 99, DIALOG_STYLE_INPUT, "Why are you requesting a refund?", "Please tell us why you're requesting a Combat Shotgun.", "Request", "Cancel");
                        Player[playerid][WeaponRefund] = 27;
					}
		            case 3:
		            {
		                ShowPlayerDialog(playerid, 99, DIALOG_STYLE_INPUT, "Why are you requesting a refund?", "Please tell us why you're requesting an M4.", "Request", "Cancel");
                        Player[playerid][WeaponRefund] = 31;
		            }
		            case 4:
		            {
		                ShowPlayerDialog(playerid, 99, DIALOG_STYLE_INPUT, "Why are you requesting a refund?", "Please tell us why you're requesting an AK-47.", "Request", "Cancel");
                        Player[playerid][WeaponRefund] = 30;
		            }
		            case 5:
		            {
		                ShowPlayerDialog(playerid, 99, DIALOG_STYLE_INPUT, "Why are you requesting a refund?", "Please tell us why you're requesting an MP5.", "Request", "Cancel");
                        Player[playerid][WeaponRefund] = 29;
		            }
		            case 6:
		            {
		                ShowPlayerDialog(playerid, 99, DIALOG_STYLE_INPUT, "Why are you requesting a refund?", "Please tell us why you're requesting a Sniper Rifle.", "Request", "Cancel");
                        Player[playerid][WeaponRefund] = 34;
		            }
		        }
		    }
		    case 6897:
		    {
			    switch(listitem)
			    {
			        case 0:
			        {
			            SendClientMessage(playerid, RED, "Please remember that we're experiencing a high volume of reports. Please only report, if this is a hacker.");
			            ShowPlayerDialog(playerid, 7766, DIALOG_STYLE_INPUT, "Player Report", "Enter the name of the player you wish to report.", "Report", "Cancel");
			        }
			        case 1:
			        {
			            SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------");
			            SendClientMessage(playerid, WHITE, "You are requesting to speak to an administrator.");
			            SendClientMessage(playerid, ADMINORANGE, "We're experiencing an extremely high volume of reports. Please continue with your message if it's urgent.");
						SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------");
						ShowPlayerDialog(playerid, 9722, DIALOG_STYLE_INPUT, "Regarding?", "Please read above before submitting any messages and please keep your messages below 50 characters.", "Report", "Cancel");
					}
				}
		    }
			case 6677:
			{
			    switch(listitem)
			    {
			        case 0:
			        {
			            ShowPlayerDialog(playerid, 7766, DIALOG_STYLE_INPUT, "Player Report", "Enter the name of the player you wish to report.", "Report", "Cancel");
			        }
			        case 1:
			        {
			            ShowPlayerDialog(playerid, 6347, DIALOG_STYLE_LIST, "Requests", "Name Change\nSkin Change\nWeapon Refund\nArmour Refund", "Select", "Cancel");
			        }
					case 2:
					{
					    ShowPlayerDialog(playerid, 6391, DIALOG_STYLE_LIST, "House / Business Related", "House Exterior / Interior Change\nBusiness Exterior / Interior Change\nOther\n", "Select", "Cancel");
					}
			        case 3:
			        {
			            SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------");
			            SendClientMessage(playerid, WHITE, "You are requesting to speak to an administrator.");
			            SendClientMessage(playerid, ADMINORANGE, "Please ONLY use this feature, if what you're speaking about is important. Do NOT use this to chat or you risk being fined.");
                        SendClientMessage(playerid, WHITE, "If you are requesting something, please check each other report section BEFORE using this tool.");
						SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------");
						ShowPlayerDialog(playerid, 9722, DIALOG_STYLE_INPUT, "Regarding?", "Please read above before submitting any messages and please keep your messages below 50 characters.", "Report", "Cancel");
					}
			    }
			}
			case 6391:
			{
			    new string[128];
			    switch(listitem)
			    {
			        case 0:
			        {
			            if(Player[playerid][House] >= 1)
			            {
			                new Count;
	                        for(new i = 0; i < MAX_PLAYERS; i++)
	                        {
	                            if(IsPlayerConnectedEx(i))
	                            {
	                                if(Player[i][AdminLevel] >= 1 && Player[i][AdminDuty] >= 1)
	                                {
	                                    Count++;
	                                }
	                            }
	                        }

	                        if(Count >= 1)
	                        {
					            format(string, sizeof(string), "%s [ID: %d] is requesting an house interior / exterior change.", GetName(playerid), playerid);
					            SendToAdmins(ADMINORANGE, string, 1);
					            SendClientMessage(playerid, WHITE, "You have request a house interior / exterior change.");
						        Player[playerid][ActiveReport] = 1;
						        format(Player[playerid][ReportText], 128, "HOUSE INTERIOR/EXTERIOR CHANGE");
							}
	                        else
	                        {
	                            SendClientMessage(playerid, WHITE, "Sorry, there are no administrators available who have the power to alter houses.");
	                        }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't own a house to request an interior / exterior change.");
			            }
			        }
			        case 1:
			        {
			            if(Player[playerid][Business] >= 1)
			            {
			                new Count;
	                        for(new i = 0; i < MAX_PLAYERS; i++)
	                        {
	                            if(IsPlayerConnectedEx(i))
	                            {
	                                if(Player[i][AdminLevel] >= 1 && Player[i][AdminDuty] >= 1)
	                                {
	                                    Count++;
	                                }
	                            }
	                        }

	                        if(Count >= 1)
	                        {
					            format(string, sizeof(string), "%s [ID: %d] is requesting an business interior / exterior change.", GetName(playerid), playerid);
					            SendToAdmins(ADMINORANGE, string, 1);
					            SendClientMessage(playerid, WHITE, "You have request a business interior / exterior change.");
						        Player[playerid][ActiveReport] = 1;
						        format(Player[playerid][ReportText], 128, "BUSINESS INTERIOR/EXTERIOR CHANGE");
	                        }
	                        else
	                        {
	                            SendClientMessage(playerid, WHITE, "Sorry, there are no administrators available who have the power to alter businesses.");
	                        }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't own a business to request an interior / exterior change.");
			            }
			        }
			        case 2:
			        {
			            if(Player[playerid][Business] >= 1 || Player[playerid][House] >= 1)
			            {
			                new Count;
	                        for(new i = 0; i < MAX_PLAYERS; i++)
	                        {
	                            if(IsPlayerConnectedEx(i))
	                            {
	                                if(Player[i][AdminLevel] >= 1 && Player[i][AdminDuty] >= 1)
	                                {
	                                    Count++;
	                                }
	                            }
	                        }

	                        if(Count >= 1)
	                        {
								ShowPlayerDialog(playerid, 9721, DIALOG_STYLE_INPUT, "Other", "Please enter what it is you wish changed/executed.", "Report", "Cancel");
	                        }
	                        else
	                        {
	                            SendClientMessage(playerid, WHITE, "Sorry, there are no administrators available who have the power to alter businesses/houses.");
	                        }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't own a house or a business to request an interior / exterior change.");
			            }
			        }
			    }
			}
			case 9721:
			{
			    new string[128];
			    if(strlen(inputtext) >= 1 && strlen(inputtext) < 80)
			    {
					format(string, sizeof(string), "%s [ID: %d] is requesting a house/business change: %s", GetName(playerid), playerid, inputtext);
				    SendToAdmins(ADMINORANGE, string, 1);
					format(string, sizeof(string), "You have sent: %s", inputtext);
				    SendClientMessage(playerid, WHITE, string);
			        Player[playerid][ActiveReport] = 1;
			        format(Player[playerid][ReportText], 128, "House/Business: %s", inputtext);
			    }
			    else
			    {
			        ShowPlayerDialog(playerid, 9721, DIALOG_STYLE_INPUT, "Other", "Please enter what it is you wish changed/executed.", "Report", "Cancel");
			        SendClientMessage(playerid, WHITE, "Over 80 characters, or not even one.");
			    }
			}
			case 9722:
			{
			    new string[128];
			    if(strlen(inputtext) >= 1 && strlen(inputtext) < 80)
			    {
			        Player[playerid][ActiveReport] = 1;
			        format(Player[playerid][ReportText], 128, "SPEAK REQUEST: %s", inputtext);
					format(string, sizeof(string), "%s [ID: %d] is requesting to speak to an Admin: %s", GetName(playerid), playerid, inputtext);
				    SendToAdmins(ADMINORANGE, string, 1);

				    SendClientMessage(playerid, WHITE, "You have requested to speak to an Administrator.");
			    }
			    else
			    {
			        ShowPlayerDialog(playerid, 9722, DIALOG_STYLE_INPUT, "Regarding?", "Enter what you would like to speak about. Remember, this is for administrative help. Keep your messages below 80 characters.", "Report", "Cancel");
			        SendClientMessage(playerid, WHITE, "Over 80 characters, or not even one.");
			    }
			}
		    case 631:
		    {
		        switch(listitem)
				{
				    case 0:
				    {
				        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1])
				        {
				            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
				            {
					            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
					            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
					            Player[playerid][Rope]++;
					            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
					            SendClientMessage(playerid, WHITE, "You have purchased some rope. Use /tie [playerid] to use the rope (in a car as the driver).");
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "That item is out of stock.");
					        }
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "Insufficient funds.");
				        }
				    }
				    case 1:
				    {
				        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice2])
				        {
				            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
				            {
					            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice2];
					            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice2];
					            Player[playerid][Rags]++;
					            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
					            SendClientMessage(playerid, WHITE, "You have purchased some rags. Use /blindfold [playerid] to use the rags, to a tied person.");
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "That item is out of stock.");
					        }
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "Insufficient funds.");
				        }
				    }
				    case 2:
				    {
				        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice3])
				        {
				            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
				            {
					            new string[128];
					            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice3];
						        Player[playerid][PhoneN] = 94000+random(6999);
						        Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						        Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice3];
						        format(string, sizeof(string), "You have purchased a cellphone. Your number is %d.", Player[playerid][PhoneN]);
						        SendClientMessage(playerid, WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "That item is out of stock.");
					        }
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "Insufficient funds.");
				        }
				    }
				    case 3:
				    {
				        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice4])
				        {
				            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
				            {
					            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice4];
					            Player[playerid][PhoneBook]++;
					            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
					            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice4];
					            SendClientMessage(playerid, WHITE, "You have purchased a phonebook, use /getnumber to use it!");
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "That item is out of stock.");
					        }
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "Insufficient funds.");
				        }
				    }
				    case 4:
				    {
				        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice5])
				        {
				            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
				            {
					            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice5];
					            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
					            Player[playerid][HadSprunk] = 1;
					            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice5];
					            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
                                TextDrawShowForPlayer(playerid, SprunkTextDraw);
                            }
							else
							{
								SendClientMessage(playerid, WHITE, "That item is out of stock.");
							}
						}
				        else
				        {
				            SendClientMessage(playerid, WHITE, "Insufficient funds.");
				        }
				    }
				    case 5:
				    {
				        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice6])
				        {
				            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
				            {
				                new string[128];
					            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice6];
					            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
					            Player[playerid][PhoneCredit] += Businesses[Player[playerid][InBusiness]][bProductPrice6];
					            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice6];
								format(string, sizeof(string), "You have purchased a $%d credit voucher.", Businesses[Player[playerid][InBusiness]][bProductPrice6]);
								SendClientMessage(playerid, WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "That item is out of stock.");
					        }
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "Insufficient funds.");
				        }
				    }
				    case 6:
				    {
				        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice7])
				        {
				            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
				            {
					            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice7];
					            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
					            Player[playerid][HasSprayCans]++;
					            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice7];
					            SendClientMessage(playerid, WHITE, "These are only for owned vehicles, use the command /ocarcolor.");
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "That item is out of stock.");
							}
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "Insufficient funds.");
				        }
				    }
				    case 7:
				    {
				        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice8])
				        {
				            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
				            {
					            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice8];
					            Player[playerid][WalkieTalkie]++;
					            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
					            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice8];
					            SendClientMessage(playerid, WHITE, "You have purchased a Walkie Talkie. Use /wt [message], but set your frequency by using /setfrequency [id].");
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "That item is out of stock.");
					        }
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "Insufficient funds.");
				        }
				    }
				    case 8:
				    {
				        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice9])
				        {
				            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
				            {
					            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice9];
					            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
					            Player[playerid][HasRadio]++;
					            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice9];
					            SendClientMessage(playerid, WHITE, "You have purchased a radio. Use /toggleradio in a vehicle to listen to it.");
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "That item is out of stock.");
					        }
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "Insufficient funds.");
				        }
				    }
				}
		    }
		    case 257:
		    {
		        new string[128];
    		    switch(listitem)
				{
				    case 0:
				    {
				        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1])
				        {
				            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
				            {
					            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
					            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
					            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
					            Player[playerid][Rope]++;
					            SendClientMessage(playerid, WHITE, "You have purchased some rope. Use /tie [playerid] to use the rope (in a car as the driver).");
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "That item is out of stock.");
					        }
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "Insufficient funds.");
				        }
				    }
				    case 1:
				    {
				        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice2])
				        {
				            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
				            {
					            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice2];
					            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice2];
					            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
					            SendClientMessage(playerid, WHITE, "You have purchased a Small White Vibrator.");
					            GivePlayerWeaponEx(playerid, 11);
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "That item is out of stock.");
				            }
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "Insufficient funds.");
				        }
				    }
				    case 2:
				    {
				        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice3])
				        {
				            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
				            {
					            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice3];
					            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice3];
					            SendClientMessage(playerid, WHITE, "You have purchased a Silver Vibrator.");
					            GivePlayerWeaponEx(playerid, 13);
					            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "That item is out of stock.");
				            }
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "Insufficient funds.");
				        }
				    }
				    case 3:
				    {
				        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice4])
				        {
				            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
				            {
					            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice4];
					            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice4];
					            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
					            SendClientMessage(playerid, WHITE, "You have purchased a Large White Vibrator.");
					            GivePlayerWeaponEx(playerid, 12);
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "That item is out of stock.");
				            }
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "Insufficient funds.");
				        }
				    }
				    case 4:
				    {
				        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice5])
				        {
				            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
				            {
					            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
					            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice5];
					            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice5];
					            SendClientMessage(playerid, WHITE, "You have purchased some Priest Clothing.");
								format(string, sizeof(string), "* %s takes the clothes, rapidly changing between the clothes.", GetName(playerid));
	                            NearByMessage(playerid, NICESKY, string);
								SetPlayerSkin(playerid, 68);
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "That item is out of stock.");
							}
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "Insufficient funds.");
				        }
				    }
				    case 5:
				    {
				        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice6])
				        {
				            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
				            {
					            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
					            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice6];
					            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice6];
					            SendClientMessage(playerid, WHITE, "You have purchased a Naughty Police Girl Costume.");
								format(string, sizeof(string), "* %s takes the clothes, rapidly changing between the clothes.", GetName(playerid));
								NearByMessage(playerid, NICESKY, string);
								SetPlayerSkin(playerid, 246);
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "That item is out of stock.");
							}
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "Insufficient funds.");
				        }
				    }
				    case 6:
				    {
				        if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice7])
				        {
				            if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
				            {
					            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
					            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice7];
					            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice7];
					            SendClientMessage(playerid, WHITE, "You have purchased a Cat Woman Costume.");
								format(string, sizeof(string), "* %s takes the clothes, rapidly changing between the clothes.", GetName(playerid));
								NearByMessage(playerid, NICESKY, string);
        						SetPlayerSkin(playerid, 178);
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "That item is out of stock.");
							}
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "Insufficient funds.");
				        }
				    }
				}
		    }
		    case 322:
		    {
		        SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");

				switch(listitem)
				{
				    case 0:
				    {
				        SendClientMessage(playerid, WHITE, "You have selected General. We have a wide array of general commands for the server, these are specificly useful for gameplay:");
				        SendClientMessage(playerid, GREY, "/changepass, /me, /do, /attempt, /playerwarns, /admins, /kill, /joinevent, /o(oc), /accent, /blindfold, /togwt");
			            SendClientMessage(playerid, GREY, "/buyhouse, /buybusiness, /b, /approve, /pay, /low, /dropcar, /fish, /sellfish, /give, /w(hisper), /eject, /rules, /unblindfold");
                        SendClientMessage(playerid, GREY, "/toggleradio, /tie, /untie, /drop, /usefightstyle, /togooc, /flipcoin, /buyid, /showid, /knock, /answerq, /pm, /togpms");
                        SendClientMessage(playerid, GREY, "/togspeedo, /drag, /stopdrag, /togquizes, /stats, /giveweapon, /achievements, /getid, /calculate, /togradio");
					}
				    case 1:
				    {
				    	SendClientMessage(playerid, WHITE, "You have selected Animations. We have various animations available, the names of the animations describe the action.");
			            SendClientMessage(playerid, GREY, "/dance, /reload, /crossarms, /piss, /handsup, /crack, /sit, /gsit, /fallback, /rap, /pedmove, /robman, /stopanim");
                        SendClientMessage(playerid, GREY, "/bomb, /vomit, /wave, /deal, /chat, /spank, /middlefinger, /laugh, /bar, /hide, /masturbate, /shakehand");
				    }
				    case 2:
				    {
				        SendClientMessage(playerid, WHITE, "You have selected Bank. There are a few commands linked to the bank, they are:");
				        SendClientMessage(playerid, GREY, "/bwithdraw, /bdeposit, /wiretransfer, /givecheck, /redeemcheck");
				    }
				    case 3:
				    {
				    	SendClientMessage(playerid, WHITE, "You have selected Businesses. We have an array of useful commands for Businesses, so review the following:");
			            SendClientMessage(playerid, GREY, "/bsdeposit, /bswithdraw, /setprice, /supplystatus, /businessname, /bbalance, /lockbusiness");
				    }
				    case 4:
				    {
				    	SendClientMessage(playerid, WHITE, "You have selected Houses. We have an array of useful commands for Houses, so review the following:");
			            SendClientMessage(playerid, GREY, "/buyvault, /hbalance, /home, /hwithdraw, /hlistweapons, /hgetweapon, /hstoreweapon, /hdeposit, /lockhouse, /changeclothes, /abandonhouse");
				    }
				    case 5:
				    {
				    	SendClientMessage(playerid, WHITE, "You have selected Cars. We have an array of useful commands for Cars, so review the following:");
			            SendClientMessage(playerid, GREY, "/abandoncar, /lock, /givecar, /unmodcar, /parkcar, /ocarcolor, /callcar, /buyvehicle");
				    }
				    case 6:
				    {
				    	SendClientMessage(playerid, WHITE, "You have selected Jobs. We have an array of useful commands for Jobs, so review the following:");

						if(Player[playerid][Job] >= 1)
						{
						    switch(Jobs[Player[playerid][Job]][JobType])
						    {
						        case 1:
						        {
						            SendClientMessage(playerid, GREY, "/creategun, /getmats, /quitjob");
								}
						        case 2:
						        {
						            SendClientMessage(playerid, GREY, "/fixcar, /noscar, /quitjob");
						        }
						        case 3:
						        {
						            SendClientMessage(playerid, GREY, "/guard, /quitjob");
						        }
						        case 4:
						        {
						            SendClientMessage(playerid, GREY, "/find, /findhouse, /profile, /quitjob");
						        }
						        case 5:
						        {
						            SendClientMessage(playerid, GREY, "/getsupplies, /sellsupplies, /quitjob");
						        }
						        case 6:
						        {
						            SendClientMessage(playerid, WHITE, "/harvest, /deliver, /quitjob");
						        }
						        case 7:
						        {
						            SendClientMessage(playerid, WHITE, "/clear, /quitjob");
						        }
						    }
					    }
				    }
				    case 7:
				    {
				    	SendClientMessage(playerid, WHITE, "You have selected Groups. We have an array of useful commands for Groups, so review the following:");

			            if(Player[playerid][Group] >= 1)
			            {
			                switch(Groups[Player[playerid][Group]][CommandTypes])
			                {
			                    case 0:
			                    {
			                        SendClientMessage(playerid, GREY, "/g(roup), /quitgroup");
			                    }
			                    case 1:
			                    {
			                        SendClientMessage(playerid, GREY, "/stun, /arrest, /frisk, /uncuff, /detain, /recordcrime, /gate, /r(adio), /lspd, /m(egaphone), /recordcheck, /elevator, /door");
                                    SendClientMessage(playerid, GREY, "/cuff, /ticket, /confiscate, /listmygroup, /fingerprint, /backup, /acceptbackup, /cancelbackup, /deployspikes, /destroyspikes");
                                    SendClientMessage(playerid, GREY, "/d, /dgates, /wanted, /quitgroup");

									if(Player[playerid][GroupRank] >= 5)
			                        {
			                            SendClientMessage(playerid, GREY, "/swatinv, /gov");
			                        }
			                    }
			                    case 2:
			                    {
			                        SendClientMessage(playerid, GREY, "/(g)roup, /pda, /listmygroup, /quitgroup");
			                    }
			                    case 3:
			                    {
			                        SendClientMessage(playerid, GREY, "/(r)adio, /heal, /(d)epartments, /listmygroup, /quitgroup");
			                    }
			                    case 4:
			                    {
			                        SendClientMessage(playerid, GREY, "/cuff, /stun, /frisk, /(d)epartments, /uncuff, /gov, /lspd, /door, /elevator, /breakin, /gate");
			                        SendClientMessage(playerid, GREY, "/(r)adio, /confiscate, /freezebank, /unfreezebank, /listmygroup, /fingerprint, /dgates, /gate, /ss, /quitgroup");
			                    }
			                    case 5:
			                    {
			                        SendClientMessage(playerid, GREY, "/(g)roup, /(r)adio(m)essage, /listmygroup, /quitgroup");
			                    }
			                    case 11:
			                    {
			                        SendClientMessage(playerid, GREY, "/route, /(r)adio, /travelannouncement, /gate, /quitgroup");
			                    }
			                }

			                if(Player[playerid][GroupRank] >= 5)
			                {
			                    SendClientMessage(playerid, GREY, "/invite, /uninvite, /motd, /safelocation, /changeranks, /groupsafewithdraw, /groupsafedeposit, /groupname, /changerank");

								if(Groups[Player[playerid][Group]][CommandTypes] == 0)
			                    {
			                    	SendClientMessage(playerid, GREY, "/togglegroupchat");
			                    }
			                }
			                
			                if(Player[playerid][GroupRank] >= 6)
			                {
			                	SendClientMessage(playerid, GREY, "/disbandgroup, /remotewiretransfer, /remoteuninvite");
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, GREY, "/approve groupinvite");
			            }
				    }
				    case 8:
				    {
				        SendClientMessage(playerid, WHITE, "You have selected Phone. The phone is an easy to use in-game device, here are the commands to use it:");
				        SendClientMessage(playerid, GREY, "/call, /getnumber, /phone, /hangup");
					}
				    case 9:
				    {
				        SendClientMessage(playerid, WHITE, "You have selected Walkie Talkie. The Walkie Talkie is an easy to use in-game device, here are the commands to use it:");
				        SendClientMessage(playerid, GREY, "/wt, /setfrequency");
					}
				    case 10:
				    {
				        if(Player[playerid][VipRank] >= 1)
				        {
					        SendClientMessage(playerid, WHITE, "You have selected VIP. The VIP commands are only for you VIPs (donators, etc)");
					        SendClientMessage(playerid, GREY, "Level 1: /(v)ip, /rage, /togvip, /buyvehicle (extra models)");
                            if(Player[playerid][VipRank] >= 2)
                            {
                                SendClientMessage(playerid, GREY, "Level 2: /ocarcolor (free)");
                            }
						}
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You're not a VIP.");
				        }
					}
					case 11:
					{
					    if(Player[playerid][Tester] >= 1)
					    {
					        SendClientMessage(playerid, WHITE, "You have selected BETA:");
					        SendClientMessage(playerid, GREY, "/listtesters");
				        }
					}
				}

				SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------------------------------------------------");
		    }
		    case 2365:
		    {
		        switch(listitem)
				{
				    case 0:
					{
					    if(Player[playerid][Money] >= 9)
					    {
					        if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					        {
						        Businesses[Player[playerid][InBusiness]][bVault] += 9;
						        Player[playerid][Money] -= 9;
						        Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						        TextDrawShowForPlayer(playerid, SprunkTextDraw);
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_WINE);
								SendClientMessage(playerid, WHITE, "Use your ATTACK key to drink, and your SECONDARY ATTACK key to drop the drink.");
					    	}
					    	else
					    	{
					    	    SendClientMessage(playerid, WHITE, "That item is out of stock.");
							}
				    	}
				    }
				    case 1:
					{
					    if(Player[playerid][Money] >= 5)
					    {
					        if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					        {
						        Businesses[Player[playerid][InBusiness]][bVault] += 5;
						        Player[playerid][Money] -= 5;
						        Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_BEER);
								SendClientMessage(playerid, WHITE, "Use your ATTACK key to drink, and your SECONDARY ATTACK key to drop the drink.");
			    			}
					    	else
					    	{
					    	    SendClientMessage(playerid, WHITE, "That item is out of stock.");
							}
						}
				    }
				    case 2:
					{
					    if(Player[playerid][Money] >= 1)
					    {
					        if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
					        {
						        Businesses[Player[playerid][InBusiness]][bVault] += 1;
						        Player[playerid][Money] -= 1;
						        Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
								SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);
								Player[playerid][HadSprunk] = 1;
								TextDrawShowForPlayer(playerid, SprunkTextDraw);
				    		}
					    	else
					    	{
					    	    SendClientMessage(playerid, WHITE, "That item is out of stock.");
							}
				    	}
				    }
				}
		    }
		    case 969:
		    {
		        switch(listitem)
				{
				    case 0:
				    {
				        if(Player[playerid][Materials] >= 30)
				        {
				            new WeaponID = 8, string[128], WeaponName[128];
				            GivePlayerWeaponEx(playerid, WeaponID);
				            Player[playerid][Materials] -= 30;
				            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
				            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
				            SendClientMessage(playerid, WHITE, string);
				            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
				            NearByMessage(playerid, NICESKY, string);
				        }
				        else
				        {
				        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
				        }
				    }
				    
				    case 1:
				    {
				        if(Player[playerid][Materials] >= 30)
				        {
				            new WeaponID = 15, string[128], WeaponName[128];
				            GivePlayerWeaponEx(playerid, WeaponID);
				            Player[playerid][Materials] -= 30;
				            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
				            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
				            SendClientMessage(playerid, WHITE, string);
				            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
				            NearByMessage(playerid, NICESKY, string);
				        }
				        else
				        {
				        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
				        }
				    }
				    
				    case 2:
				    {
				        if(Player[playerid][Materials] >= 33)
				        {
				            new WeaponID = 7, string[128], WeaponName[128];
				            GivePlayerWeaponEx(playerid, WeaponID);
				            Player[playerid][Materials] -= 33;
				            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
				            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
				            SendClientMessage(playerid, WHITE, string);
				            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
				            NearByMessage(playerid, NICESKY, string);
				        }
				        else
				        {
				        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
				        }
				    }
				    
				    case 3:
				    {
				        if(Player[playerid][Materials] >= 35)
				        {
				            new WeaponID = 5, string[128], WeaponName[128];
				            GivePlayerWeaponEx(playerid, WeaponID);
				            Player[playerid][Materials] -= 35;
				            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
				            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
				            SendClientMessage(playerid, WHITE, string);
				            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
				            NearByMessage(playerid, NICESKY, string);
				        }
				        else
				        {
				        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
				        }
				    }

				    case 4:
				    {
				        if(Player[playerid][Materials] >= 50)
				        {
				            new WeaponID = 6, string[128], WeaponName[128];
				            GivePlayerWeaponEx(playerid, WeaponID);
				            Player[playerid][Materials] -= 50;
				            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
				            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
				            SendClientMessage(playerid, WHITE, string);
				            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
				            NearByMessage(playerid, NICESKY, string);
				        }
				        else
				        {
				        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
				        }
				    }
				    
				    case 5:
				    {
				        if(Player[playerid][Materials] >= 250)
				        {
				            new WeaponID = 22, string[128], WeaponName[128];
				            GivePlayerWeaponEx(playerid, WeaponID);
				            Player[playerid][Materials] -= 250;
				            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
				            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
				            SendClientMessage(playerid, WHITE, string);
				            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
				            NearByMessage(playerid, NICESKY, string);
				        }
				        else
				        {
				        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
				        }
				    }
				    
				    case 6:
				    {
				        if(Player[playerid][Materials] >= 300)
				        {
				            new WeaponID = 23, string[128], WeaponName[128];
				            GivePlayerWeaponEx(playerid, WeaponID);
				            Player[playerid][Materials] -= 300;
				            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
				            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
				            SendClientMessage(playerid, WHITE, string);
				            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
				            NearByMessage(playerid, NICESKY, string);
				        }
				        else
				        {
				        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
				        }
				    }
				    
				    case 7:
				    {
				        if(Player[playerid][Materials] >= 550)
				        {
				            new WeaponID = 25, string[128], WeaponName[128];
				            GivePlayerWeaponEx(playerid, WeaponID);
				            Player[playerid][Materials] -= 550;
				            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
				            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
				            SendClientMessage(playerid, WHITE, string);
				            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
				            NearByMessage(playerid, NICESKY, string);
				        }
				        else
				        {
				        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
				        }
				    }
				    
				    case 8:
				    {
				        if(Player[playerid][Materials] >= 680)
				        {
				            new WeaponID = 24, string[128], WeaponName[128];
				            GivePlayerWeaponEx(playerid, WeaponID);
				            Player[playerid][Materials] -= 680;
				            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
				            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
				            SendClientMessage(playerid, WHITE, string);
				            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
				            NearByMessage(playerid, NICESKY, string);
				        }
				        else
				        {
				        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
				        }
				    }
				    
				    case 9:
				    {
				        if(Player[playerid][Materials] >= 850)
				        {
				            new WeaponID = 29, string[128], WeaponName[128];
				            GivePlayerWeaponEx(playerid, WeaponID);
				            Player[playerid][Materials] -= 850;
				            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
				            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
				            SendClientMessage(playerid, WHITE, string);
				            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
				            NearByMessage(playerid, NICESKY, string);
				        }
				        else
				        {
				        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
				        }
				    }
				    
				    case 10:
				    {
				        if(Player[playerid][Materials] >= 900)
				        {
				            new WeaponID = 28, string[128], WeaponName[128];
				            GivePlayerWeaponEx(playerid, WeaponID);
				            Player[playerid][Materials] -= 900;
				            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
				            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
				            SendClientMessage(playerid, WHITE, string);
				            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
				            NearByMessage(playerid, NICESKY, string);
				        }
				        else
				        {
				        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
				        }
				    }
				    
				    case 11:
				    {
				        if(Player[playerid][Materials] >= 1500)
				        {
				            new WeaponID = 30, string[128], WeaponName[128];
				            GivePlayerWeaponEx(playerid, WeaponID);
				            Player[playerid][Materials] -= 1500;
				            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
				            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
				            SendClientMessage(playerid, WHITE, string);
				            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
				            NearByMessage(playerid, NICESKY, string);
				        }
				        else
				        {
				        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
				        }
				    }
				    
				    case 12:
				    {
				        if(Player[playerid][Materials] >= 2000)
				        {
				            new WeaponID = 31, string[128], WeaponName[128];
				            GivePlayerWeaponEx(playerid, WeaponID);
				            Player[playerid][Materials] -= 2000;
				            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
				            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
				            SendClientMessage(playerid, WHITE, string);
				            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
				            NearByMessage(playerid, NICESKY, string);
				        }
				        else
				        {
				        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
				        }
				    }
				    
				    case 13:
				    {
				        if(Player[playerid][Materials] >= 2450)
				        {
				            new WeaponID = 34, string[128], WeaponName[128];
				            GivePlayerWeaponEx(playerid, WeaponID);
				            Player[playerid][Materials] -= 2450;
				            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
				            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
				            SendClientMessage(playerid, WHITE, string);
				            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
				            NearByMessage(playerid, NICESKY, string);
				        }
				        else
				        {
				        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
				        }
				    }
				    
				    case 14:
				    {
				        if(Player[playerid][Materials] >= 2550)
				        {
				            new WeaponID = 27, string[128], WeaponName[128];
				            GivePlayerWeaponEx(playerid, WeaponID);
				            Player[playerid][Materials] -= 2550;
				            GetWeaponName(WeaponID, WeaponName, sizeof(WeaponName));
				            format(string, sizeof(string), "You have created a %s. Type /giveweapon [playerid] [weapon name] to pass the weapon on.", WeaponName);
				            SendClientMessage(playerid, WHITE, string);
				            format(string, sizeof(string), "* %s has created a %s from their materials.", GetName(playerid), WeaponName);
				            NearByMessage(playerid, NICESKY, string);
				        }
				        else
				        {
				        	SendClientMessage(playerid, WHITE, "You do not have enough materials.");
				        }
				    }
				}
		    }
		    case 3426:
		    {
            	if(!IsPlayerConnectedEx(GetPlayerID(inputtext)))
            	{
            	    ShowPlayerDialog(playerid, 3426, DIALOG_STYLE_INPUT, "Contract Assignment", "Please insert the name of the person you want the hitman to hit (must be an existing contract).", "Proceed", "Cancel");
            	    SendClientMessage(playerid, WHITE, "Invalid character name, please use a valid name to release.");
            	}
				else
				{
				    if(IsPlayerConnectedEx(GetPlayerID(inputtext)))
				    {
				        if(Player[GetPlayerID(inputtext)][ContractPrice] >= 1)
				        {
				            new string[128];
				            format(string, sizeof(string), "You have been assigned to kill %s.", GetName(GetPlayerID(inputtext)));
				            SendClientMessage(Player[playerid][AssigningHitTo], ANNOUNCEMENT, string);
				            format(string, sizeof(string), "You have successfully assigned %s to assasinate %s.", GetName(Player[playerid][AssigningHitTo]), GetName(GetPlayerID(inputtext)));
				            SendClientMessage(playerid, WHITE, string);
				            Player[Player[playerid][AssigningHitTo]][PlayerToAssasinate] = GetPlayerID(inputtext);
				            Player[GetPlayerID(inputtext)][BeingAssasinated] = Player[playerid][AssigningHitTo];
				            
				            format(string, sizeof(string), "%s has been assigned to kill %s, by %s.", GetName(Player[playerid][AssigningHitTo]), GetName(GetPlayerID(inputtext)), GetName(playerid));
				            GroupMessage(playerid, ANNOUNCEMENT, string);
				        }
				    }
				}
		    }
		    case 3427:
		    {
            	if(!IsPlayerConnectedEx(GetPlayerID(inputtext)))
            	{
            	    SendClientMessage(playerid, WHITE, "Invalid character name, please use a valid name to release.");
            	}
				else
				{
				    if(IsPlayerConnectedEx(GetPlayerID(inputtext)))
				    {
				        if(Player[GetPlayerID(inputtext)][Group] == Player[playerid][Group])
				        {
				            if(Player[playerid][BeingAssasinated] == -1)
				            {
				            	new string[128];
				            	Player[playerid][AssigningHitTo] = GetPlayerID(inputtext);
				            	format(string, sizeof(string), "You are in the process of assigning %s to assasinate a hit.", GetName(GetPlayerID(inputtext)));
				            	SendClientMessage(playerid, WHITE, string);
				            	ShowPlayerDialog(playerid, 3426, DIALOG_STYLE_INPUT, "Contract Assignment", "Please insert the name of the person you want the hitman to hit (must be an existing contract).", "Proceed", "Cancel");
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "That person is already on a contract.");
				            }
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "That person isn't in your group.");
				        }
				    }
				}
		    }
		    case 3428:
		    {
		        switch(listitem)
				{
				    case 0: ShowPlayerDialog(playerid, 6921, DIALOG_STYLE_LIST, "Undercover Clothing", "African-American\nHippy\nSkater\nBuilder\nObese Russian", "Select", "Cancel");
				    case 1: ShowPlayerDialog(playerid, 6922, DIALOG_STYLE_LIST, "Official Clothing", "LSPD Cadet\nLSPD Officer\nSFPD Officer\nMotorcycle Officer\nTenpenny\nPulaski\nHernandez\nSergeant\nCommander\nChief\n", "Select", "Cancel");
				    case 2: ShowPlayerDialog(playerid, 6952, DIALOG_STYLE_LIST, "Miscellaneous", "SWAT (with Vest)\nArmy Suite\nFBI Suite", "Select", "Cancel");
				}
		    }
		    case 6922:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
				        SetPlayerSkin(playerid, 71);
				        Player[playerid][LastSkin] = 71;
		            }
		            case 1:
		            {
				        SetPlayerSkin(playerid, 280);
				        Player[playerid][LastSkin] = 280;
		            }
		            case 2:
		            {
				        SetPlayerSkin(playerid, 281);
				        Player[playerid][LastSkin] = 281;
		            }
		            case 3:
		            {
				        SetPlayerSkin(playerid, 284);
				        Player[playerid][LastSkin] = 284;
		            }
		            case 4:
		            {
				        SetPlayerSkin(playerid, 265);
				        Player[playerid][LastSkin] = 265;
		            }
		            case 5:
		            {
				        SetPlayerSkin(playerid, 266);
				        Player[playerid][LastSkin] = 266;
		            }
		            case 6:
		            {
				        SetPlayerSkin(playerid, 267);
				        Player[playerid][LastSkin] = 267;
		            }
		            case 7:
		            {
				        SetPlayerSkin(playerid, 282);
				        Player[playerid][LastSkin] = 282;
		            }
		            case 8:
		            {
				        SetPlayerSkin(playerid, 283);
				        Player[playerid][LastSkin] = 283;
		            }
		            case 9:
		            {
				        SetPlayerSkin(playerid, 288);
				        Player[playerid][LastSkin] = 288;
		            }
		        }
		    }
		    case 6952:
		    {
		        switch(listitem)
				{
				    case 0:
				    {
				        SetPlayerSkin(playerid, 285);
				        Player[playerid][LastSkin] = 285;
				        SetPlayerArmour(playerid, 100);
				    }
				    case 1:
					{
					    Player[playerid][LastSkin] = 287;
						SetPlayerSkin(playerid, 287);
					}
				    case 2:
					{
					    Player[playerid][LastSkin] = 286;
						SetPlayerSkin(playerid, 286);
					}
				}
		    }
		    case 6921:
		    {
		        switch(listitem)
				{
				    case 0:
					{
					    Player[playerid][LastSkin] = 0;
						SetPlayerSkin(playerid, 0);
					}
				    case 1:
					{
					    Player[playerid][LastSkin] = 1;
						SetPlayerSkin(playerid, 1);
					}
				    case 2:
					{
					    Player[playerid][LastSkin] = 23;
						SetPlayerSkin(playerid, 23);
					}
				    case 3:
					{
					    Player[playerid][LastSkin] = 27;
						SetPlayerSkin(playerid, 27);
					}
				    case 4:
					{
					    Player[playerid][LastSkin] = 112;
						SetPlayerSkin(playerid, 112);
					}
				}
		    }
		    case 3430:
		    {
            	if(! IsPlayerConnectedEx(GetPlayerID(inputtext)))
            	{
            	    SendClientMessage(playerid, WHITE, "Invalid character name, please use a valid name to release.");
            	}
				else
				{
				    if(IsPlayerConnectedEx(GetPlayerID(inputtext)))
				    {
				        if(Player[GetPlayerID(inputtext)][PrisonID] == 2)
				        {
				            new string[128];
				            Player[GetPlayerID(inputtext)][PrisonDuration] = 0;
				            SendClientMessage(GetPlayerID(inputtext), WHITE, "You have been released from jail.");
							format(string, sizeof(string), "You have successfully released %s.", GetName(GetPlayerID(inputtext)));
							SendClientMessage(playerid, WHITE, string);
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "That player is either not jailed, or was by an admin.");
				        }
				    }
				}
		    }
		    case 6437:
		    {
            	if(! IsPlayerConnectedEx(GetPlayerID(inputtext)))
            	{
            	    SendClientMessage(playerid, WHITE, "Invalid character name, please use a valid name to release.");
            	}
				else
				{
				    if(IsPlayerConnectedEx(GetPlayerID(inputtext)))
				    {
				        new string[128];
				        ClearCriminalRecord(GetPlayerID(inputtext));
				        format(string, sizeof(string), "%s from the %s has cleared your criminal record.", GetName(playerid), Groups[Player[playerid][Group]][GroupName]);
				        SendClientMessage(GetPlayerID(inputtext), WHITE, string);
				        format(string, sizeof(string), "%s has cleared %s's criminal record.", GetName(playerid), GetName(GetPlayerID(inputtext)));
				        GroupMessage(playerid, ANNOUNCEMENT, string);
				        Player[GetPlayerID(inputtext)][CriminalOffences] = 0;
				    }
				    else
				    {
				        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
				    }
				}
		    }
		    case 9922:
		    {
		        switch(listitem)
		        {
		            case 0: ShowPlayerDialog(playerid, 3431, DIALOG_STYLE_LIST, "Equipment", "Nitestick - FREE\nMace - FREE\nDeagle - FREE\nMP5 - FREE\nShotgun - FREE\n", "Select", "Cancel");
		            case 1:
		            {
		                if(SWATEnabled == 1)
		                {
		                    ShowPlayerDialog(playerid, 2299, DIALOG_STYLE_LIST, "SWAT Equipment", "Tear Gas (Gov Price: $500)\nM4A1 (Gov Price: $7,500)\nCombat Shotgun (Gov Price: $12,000\nSniper Rifle (Gov Price: $12,000)", "Select", "Cancel");
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "The SWAT inventory is currently unavailable.");
		                }
		            }
		        }
		    }
		    case 2299:
		    {
		        switch(listitem)
		        {
		            case 0:
		            {
		                if(Groups[3][SafeMoney] >= 500)
		                {
		                    Groups[3][SafeMoney] -= 500;
		                    SendClientMessage(playerid, WHITE, "You have withdrawn Tear Gas. This has cost the Government $500, so use it properly");
		                    GivePlayerWeaponEx(playerid, 17);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "The Government are unable to afford this weapon on your behalf.");
		                }
		            }
		            case 1:
		            {
		                if(Groups[3][SafeMoney] >= 7500)
		                {
		                    Groups[3][SafeMoney] -= 7500;
		                    SendClientMessage(playerid, WHITE, "You have withdrawn an M4A1. This has cost the Government $7,500, so use it properly");
		                    GivePlayerWeaponEx(playerid, 31);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "The Government are unable to afford this weapon on your behalf.");
		                }
		            }
		            case 2:
		            {
		                if(Groups[3][SafeMoney] >= 12000)
		                {
		                    Groups[3][SafeMoney] -= 12000;
		                    SendClientMessage(playerid, WHITE, "You have withdrawn an Combat Shotgun. This has cost the Government $12,000, so use it properly");
		                    GivePlayerWeaponEx(playerid, 27);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "The Government are unable to afford this weapon on your behalf.");
		                }
		            }
		            case 3:
		            {
		                if(Groups[3][SafeMoney] >= 12000)
		                {
		                    Groups[3][SafeMoney] -= 12000;
		                    SendClientMessage(playerid, WHITE, "You have withdrawn an Sniper Rifle. This has cost the Government $12,000, so use it properly");
		                    GivePlayerWeaponEx(playerid, 34);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "The Government are unable to afford this weapon on your behalf.");
		                }
		            }
		        }
		    }
		    case 3431:
		    {
		        switch(listitem)
				{
		        	case 0: GivePlayerWeaponEx(playerid, 3);
		        	case 1: GivePlayerWeaponEx(playerid, 41);
		        	case 2: GivePlayerWeaponEx(playerid, 24);
		        	case 3: GivePlayerWeaponEx(playerid, 29);
		        	case 4: GivePlayerWeaponEx(playerid, 25);
				}
		    }
		    case 3432:
		    {
		        switch(listitem)
				{
		        	case 0:
		        	{
		            	if(Player[playerid][CopDuty] == 1)
		            	{
		                	SendClientMessage(playerid, WHITE, "You are now off police duty.");
		                	Player[playerid][CopDuty] = 0;
		                	SetPlayerArmour(playerid, 0);
		            	}
		            	else
		            	{
		                	SendClientMessage(playerid, WHITE, "You are now on police duty.");
		                	Player[playerid][CopDuty] = 1;
		                	SetPlayerArmour(playerid, 100);
		                }
		            }

                    case 1: ShowPlayerDialog(playerid, 9922, DIALOG_STYLE_LIST, "Equipment", "Normal Equipment\nSWAT Equipment", "Select", "Cancel");
					case 2: ShowPlayerDialog(playerid, 3430, DIALOG_STYLE_INPUT, "Release a Suspect", "Please insert the suspect's name.", "Proceed", "Cancel");
		            case 3: ShowPlayerDialog(playerid, 3428, DIALOG_STYLE_LIST, "Official Clothing", "Undercover Clothing\nOfficial Clothing\nMiscellaneous\n", "Select", "Cancel");
		            case 4: ShowPlayerDialog(playerid, 6437, DIALOG_STYLE_INPUT, "Clear a Suspect", "Please insert the suspect's name.", "Proceed", "Cancel");
		        }
		    }
		    case 3433:
		    {
    			switch(listitem)
				{
            		case 0:
					{
			    		new string[128], Count;

			    		SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");

						for(new i = 0; i < MAX_PLAYERS; i++)
						{
						    if(IsPlayerConnectedEx(i))
						    {
					    		if(Player[i][ContractPrice] >= 1 && Player[i][BeingAssasinated] == -1)
					    		{
					        	    Count++;
					        		format(string, sizeof(string), "TARGET: %s | REASON: %s | PRICE: $%s.", GetName(i), Player[i][Contract], IntToFormattedStr(Player[i][ContractPrice]));
					           		SendClientMessage(playerid, GREY, string);
					    		}
				    		}
						}

						if(Count == 0)
						{
						    SendClientMessage(playerid, GREY, "No contracts are currently available.");
						}

						SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");
            		}
            		case 1:
					{
			    		new string[128];
			    		SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
				    		if(Player[playerid][Group] == Player[i][Group] && IsPlayerConnectedEx(i))
				    		{
				    			switch(Player[i][GroupRank])
				    			{
				    	    		case 0:
				    	    		{
				    	        		format(string, sizeof(string), "%s (0): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName0], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
				    	    		}
				    	   	 		case 1:
				    	    		{
				    	        		format(string, sizeof(string), "%s (1): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName1], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
				    	    		}
				    	    		case 2:
				    	    		{
				    	        		format(string, sizeof(string), "%s (2): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName2], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
				    	    		}
				    	    		case 3:
				    	    		{
				    	        		format(string, sizeof(string), "%s (3): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName3], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
				    	    		}
				    	    		case 4:
				    	    		{
				    	        		format(string, sizeof(string), "%s (4): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName4], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
				    	    		}
				    	    		case 5:
				    	    		{
				    	        		format(string, sizeof(string), "%s (5): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName5], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
				    	    		}
				    	    		case 6:
				    	    		{
				    	       			format(string, sizeof(string), "%s (6): %s | Failed Hits: %d | Successful Hits: %d | Total Hits: %d", Groups[Player[i][Group]][RankName6], GetName(i), Player[i][FailedHits], Player[i][SuccessfulHits], Player[i][FailedHits]+Player[i][SuccessfulHits]);
				    	    		}
				    			}

				    			SendClientMessage(playerid, GREY, string);
				    		}
						}
						SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");
            		}
            		case 2:
					{
			    		new string[128], Count;

			    		SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");

						for(new i = 0; i < MAX_PLAYERS; i++)
						{
						    if(IsPlayerConnectedEx(i))
						    {
					    		if(Player[i][ContractPrice] >= 250000 && Player[i][BeingAssasinated] == -1)
					    		{
					        	    Count++;
					        		format(string, sizeof(string), "TARGET: %s | REASON: %s | PRICE: $%s.", GetName(i), Player[i][Contract],  IntToFormattedStr(Player[i][ContractPrice]));
					           		SendClientMessage(playerid, GREY, string);
					    		}
				    		}
						}

						if(Count == 0)
						{
						    SendClientMessage(playerid, GREY, "No contracts are currently available.");
						}

						SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------");
            		}
            		case 3:
					{
			    		new string[128];
                		for(new i = 0; i < MAX_PLAYERS; i++)
                		{
                    		if(IsPlayerConnectedEx(i) && Groups[Player[i][Group]][CommandTypes] == 1 && Player[i][Group] != 0)
                    		{
                        		format(string, sizeof(string), "%s (%s)", GetName(i), Groups[Player[i][Group]][GroupName]);
                        		SendClientMessage(playerid, WHITE, string);
                    		}
                		}
            		}
            		case 4:
					{
						ShowPlayerDialog(playerid, 3434, DIALOG_STYLE_LIST, "Hitman Weapons", "Knife - FREE\nDesert Eagle - $1,000\nMP5 - $2,500\nPump Action Shotgun - $4,000\nSniper Rifle - $8,000\nM4A1 - $10,000\nCombat Shotgun - $10,000\nBody Armour - $1,000", "Select", "Cancel");
            		}
            		case 5:
            		{
            		    if(Player[playerid][GroupRank] >= 4)
            		    {
            		    	ShowPlayerDialog(playerid, 3427, DIALOG_STYLE_INPUT, "Contract Assignment", "Please insert the Contractors name that you wish to assign a hit to.", "Proceed", "Cancel");
            			}
            			else
            			{
            			    SendClientMessage(playerid, WHITE, "You must be a rank 4+ to assign contracts.");
            			}
					}
            	}
		    }
			case 3434:
			{
		    	switch(listitem)
				{
				    case 0:
					{
					    if(IsPlayerInRangeOfPoint(playerid, 15, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
					    {
							GivePlayerWeaponEx(playerid, 4);
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "You're not at your HQ.");
						}
					}
				    case 1:
					{
					    if(IsPlayerInRangeOfPoint(playerid, 15, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
					    {
							if(Player[playerid][Money] >= 1000)
							{
								Player[playerid][Money] -= 1000;
								GivePlayerWeaponEx(playerid, 24);
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "You can't afford this weapon.");
							}
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "You're not at your HQ.");
						}
					}
				    case 2:
					{
					    if(IsPlayerInRangeOfPoint(playerid, 15, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
					    {
							if(Player[playerid][Money] >= 2500)
							{
								Player[playerid][Money] -= 2500;
								GivePlayerWeaponEx(playerid, 29);
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "You can't afford this weapon.");
							}
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "You're not at your HQ.");
						}
					}
				    case 3:
					{
					    if(IsPlayerInRangeOfPoint(playerid, 15, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
					    {
							if(Player[playerid][Money] >= 4000)
							{
								Player[playerid][Money] -= 4000;
								GivePlayerWeaponEx(playerid, 25);
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "You can't afford this weapon.");
							}
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "You're not at your HQ.");
						}
					}
				    case 4:
					{
					    if(IsPlayerInRangeOfPoint(playerid, 15, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
					    {
							if(Player[playerid][Money] >= 8000)
							{
								Player[playerid][Money] -= 8000;
								GivePlayerWeaponEx(playerid, 34);
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "You can't afford this weapon.");
							}
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "You're not at your HQ.");
						}
					}
				    case 5:
					{
					    if(IsPlayerInRangeOfPoint(playerid, 15, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
					    {
							if(Player[playerid][Money] >= 10000)
							{
								Player[playerid][Money] -= 10000;
								GivePlayerWeaponEx(playerid, 31);
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "You can't afford this weapon.");
							}
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "You're not at your HQ.");
						}
					}
				    case 6:
					{
					    if(IsPlayerInRangeOfPoint(playerid, 15, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
					    {
							if(Player[playerid][Money] >= 10000)
							{
								Player[playerid][Money] -= 10000;
								GivePlayerWeaponEx(playerid, 27);
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "You can't afford this weapon.");
							}
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "You're not at your HQ.");
						}
					}
				    case 7:
					{
					    if(IsPlayerInRangeOfPoint(playerid, 15, Groups[Player[playerid][Group]][HQInteriorX], Groups[Player[playerid][Group]][HQInteriorY], Groups[Player[playerid][Group]][HQInteriorZ]) && GetPlayerVirtualWorld(playerid) == 45002)
					    {
							if(Player[playerid][Money] >= 1000)
							{
								Player[playerid][Money] -= 1000;
								SetPlayerArmour(playerid, 100);
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "You can't afford this piece of equipment.");
							}
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "You're not at your HQ.");
						}
					}
				}
			}
		}
	}
	return 1;
}

public OnGameModeExit()
{
    djson_GameModeExit();

	if(CurGMX == 0)
	{
	    SaveGeneralData();
	}
	else
	{
		SaveHouses();
		SaveGroups();
		SaveBusinesses();
		SaveJobs();
	}
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	if(Player[playerid][CarLinkID] == vehicleid)
	{
	    Player[playerid][CarPaintJobID] = paintjobid;
	}
	
	if(Player[playerid][Car2LinkID] == vehicleid)
	{
	    Player[playerid][Car2PaintJobID] = paintjobid;
	}
	
	if(Player[playerid][Car3LinkID] == vehicleid)
	{
	    Player[playerid][Car3PaintJobID] = paintjobid;
	}
}

public ClearCriminalRecord(playerid)
{
	format(Player[playerid][Offence1], 255, "None");
	format(Player[playerid][Offence2], 255, "None");
	format(Player[playerid][Offence3], 255, "None");
	format(Player[playerid][Offence4], 255, "None");
	format(Player[playerid][Offence5], 255, "None");
	format(Player[playerid][Offence6], 255, "None");
	SetPlayerWantedLevel(playerid, 0);
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
	if(Player[playerid][Tutorial] >= 1)
	{
	    return 0;
	}
	else if(Player[playerid][Authenticated] == 1)
	{
		SetSpawnInfo(playerid, 0, 299, Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ], 90, 0, 0, 0, 0, 0, 0);
		SpawnPlayer(playerid);
		return 0;
	}
	else
	{
	    return 0;
	}
}

public OnPlayerRequestSpawn(playerid)
{
	if(Player[playerid][Authenticated] == 0)
	{
	    SendClientMessage(playerid, GREY, "You have to login first.");
	    Kick(playerid);
	    return 0;
	}
	else if(Player[playerid][Tutorial] >= 1)
	{
	    SendClientMessage(playerid, GREY, "You have to go through the tutorial first.");
	    return 0;
	}
	else
	{
		return 1;
	}
}

stock GeoIP_OnPlayerConnect(playerid) {
	static
		s_szIP[16],
		s_szURL[] = "spelsajten.net/geoip.php?ip=255.255.255.255";
	
	g_iPlayerCountryCode[playerid] = -2;
	
	GetPlayerIp(playerid, s_szIP, sizeof(s_szIP));
	
	s_szURL[0] = EOS;
	
	strcat(s_szURL, "spelsajten.net/geoip.php?ip=");
	strcat(s_szURL, s_szIP);
	
	HTTP(HTTP_INDEX_OFFSET + playerid, HTTP_GET, s_szURL, "", "OnGeoIPResponse");
	return 1;
}

public OnGeoIPResponse(iIndex, iResponseCode, const szData[]) {
	if(HTTP_INDEX_OFFSET <= iIndex <= HTTP_INDEX_OFFSET + MAX_PLAYERS) {
		new
			iPlayer = (iIndex - HTTP_INDEX_OFFSET),
			iCountryIndex = strval(szData);
		
		if(!( 0 <= iCountryIndex <= 240))
			iCountryIndex = 0;

		g_iPlayerCountryCode[iPlayer] = iCountryIndex;
	}
	return 1;
}

public OnPlayerConnect(playerid)
{
	/*if(strcmp(GetPlayerCountryName(playerid), "Anonymous Proxy", true) == 0)
	{
	    SendClientMessage(playerid, WHITE, "You're not allowed to play here, connecting via a proxy.");
	    Kick(playerid); // This check is completely redundant in most cases.
	}
	else
	{*/
	if(!IsPlayerNPC(playerid))
	{
		GeoIP_OnPlayerConnect(playerid);
		new string[128], Name[MAX_PLAYER_NAME];
		GetPlayerName(playerid, Name, sizeof(Name));
		format(string, sizeof(string), "Accounts/%s.ini", Name);

		Reset(playerid);
		SetPlayerColor(playerid, GREY);
		TotalConnections++;
		PlayersOn++;

		if(PlayersOn > MaxVisitors)
		{
		    MaxVisitors = PlayersOn;
		    UpdateAnalysis();
		}

		// Website textdraw commented out as there's no website specified for the release. Simply uncomment the code which defines the textdraw at the top
		// and remove these 2 comments and uncomment the line below. ...Oh, and the part where the variable 'Textdraw1' is declared.
		//TextDrawShowForPlayer(playerid, Textdraw1);

		if(fexist(string))
		{
            SendClientMessage(playerid, 0xb33535FF, "THIS SERVER CONTAINS EXPLICIT CONTENT, AND MAY BE INTENDED ONLY FOR ADULTS.");
			ShowPlayerDialog(playerid, 3894, DIALOG_STYLE_INPUT, "Authentication", "Welcome to Moving Target Gaming!\n\nYou have an account, please enter your password to authenticate.", "Login", "Help");
			SendClientMessage(playerid, WHITE, "This name is registered. If you're the account owner, please login with your account credentials to proceed.");
		}
		else
		{
			new playernamesplit[3][MAX_PLAYER_NAME];
			split(Name, playernamesplit, '_');

			if (!strlen(playernamesplit[0]) || !strlen(playernamesplit[1]))
			{
			    new NameStr[MAX_PLAYER_NAME];
			    format(NameStr, sizeof(NameStr), "NONRPNAME%d", playerid);
			    SetPlayerName(playerid, NameStr);

			    printf("[system] %s has been forced to the name change menu.", Name);
			    //TogglePlayerControllable(playerid, false);
			    ShowPlayerDialog(playerid, 594, DIALOG_STYLE_INPUT, "Roleplay Name", "Please select a new, valid roleplaying name.", "Change", "Cancel");
			    SendClientMessage(playerid, WHITE, "Your name is not valid, please pick a new one. Refrain from using tags, please and include 1 underscore.");
			}
			else
			{
				ShowPlayerDialog(playerid, 3895, DIALOG_STYLE_INPUT, "Registration", "Please enter your password to register your new account.", "Register", "Cancel");
				SendClientMessage(playerid, WHITE, "This username is not registered. If you register, you'll automatically be logged in!");
			}
		}

		SetPlayerColor(playerid, WHITE);
	}
	else
	{
	    Reset(playerid);
	    printf("[system] NPC %s has connected to the server.", GetName(playerid));
	    NPCs++;
	}
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	if(IsPlayerNPC(playerid))
	{
	    NPCs--;
	    printf("[system] NPC %s has disconnected from the server.", GetName(playerid));
	}
	else
	{
		new string[128], Name[MAX_PLAYER_NAME];

		GetPlayerName(playerid, Name, sizeof(Name));

		PlayersOn--;

		if(CurGMX == 0)
		{
		    if(Spectator[playerid][SpecSpectatingPlayer] == -1)
		    {
				switch(reason)
				{
				    case 0:
					{
						format(string, sizeof(string), "%s has timed out from the server.", Name);
				    }

					case 1:
					{
						format(string, sizeof(string), "%s has left the server.", Name);
					}

				    case 2:
					{
						format(string, sizeof(string), "%s has been either kicked or banned from the server.", Name);
					}
				}

				NearByMessage(playerid, ANNOUNCEMENT, string);
			}

			if(Player[playerid][Group] >= 1)
			{
				switch(reason)
				{
				    case 0:
				    {
					    format(string, sizeof(string), "%s from your group has disconnected (timeout).", Name);
					    GroupMessage(playerid, ANNOUNCEMENT, string);
				    }
				    case 1:
				    {
					    format(string, sizeof(string), "%s from your group has disconnected (quit).", Name);
					    GroupMessage(playerid, ANNOUNCEMENT, string);
				    }
				    case 2:
				    {
					    format(string, sizeof(string), "%s from your group has disconnected (banned/kicked).", Name);
					    GroupMessage(playerid, ANNOUNCEMENT, string);
				    }
			    }
			}

			if(Player[playerid][IsAtEvent] == 1)
			{
			    ResetPlayerWeapons(playerid);
			    EC--;

				switch(reason)
				{
				    case 0:
				    {
						format(string, sizeof(string), "%s is no longer in the event, reason: Disconnected (timeout).", Name);
						MessageToEventPlayers(YELLOW, string);
				    }
				    case 1:
				    {
						format(string, sizeof(string), "%s is no longer in the event, reason: Disconnected (quit).", Name);
						MessageToEventPlayers(YELLOW, string);
				    }
				    case 2:
				    {
						format(string, sizeof(string), "%s is no longer in the event, reason: Disconnected (banned/kicked).", Name);
						MessageToEventPlayers(YELLOW, string);
				    }
			    }
			}

			if(Player[playerid][Authenticated] == 1)
			{
			    if(Player[playerid][PlayerCarModel] >= 1)
			    {
			    	GetOwnedCarMods(playerid);
					GetVehiclePos(Player[playerid][CarLinkID], Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
					GetVehicleZAngle(Player[playerid][CarLinkID], Player[playerid][CarZAngle]);
					DestroyVehicle(Player[playerid][CarLinkID]);
					Player[playerid][CarLinkID] = 0;
					OwnedCarCount--;
					CarCount--;
				}
				
			    if(Player[playerid][PlayerCarModel2] >= 1)
			    {
					GetVehiclePos(Player[playerid][Car2LinkID], Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
					GetVehicleZAngle(Player[playerid][Car2LinkID], Player[playerid][Car2ZAngle]);
					DestroyVehicle(Player[playerid][Car2LinkID]);
					Player[playerid][Car2LinkID] = 0;
					OwnedCarCount--;
					CarCount--;
				}
				
			    if(Player[playerid][PlayerCarModel3] >= 1)
			    {
					GetVehiclePos(Player[playerid][Car3LinkID], Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
					GetVehicleZAngle(Player[playerid][Car3LinkID], Player[playerid][Car3ZAngle]);
					DestroyVehicle(Player[playerid][Car3LinkID]);
					Player[playerid][Car3LinkID] = 0;
					OwnedCarCount--;
					CarCount--;
				}
				
				if(Player[playerid][Cuffed] >= 1 || Player[playerid][Tied] >= 1)
				{
				    Player[playerid][PrisonDuration] = 720;
				    Player[playerid][PrisonID] = 2;
				    format(Player[playerid][Note], 128, "You have automatically been prisoned for disconnecting whilst cuffed / tied.");
				}

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(Player[i][PendingHandshake] == playerid)
					{
					    Player[i][PendingHandshake] = -1;
					}
				    
				    if(Player[i][PendingCarReceival] == playerid)
				    {
				        Player[i][PendingCarReceival] = -1;
				    }
				}

				if(Player[playerid][BeingSpyedOnBy] != -1)
				{
				    format(string, sizeof(string), "The player you were spying on (%s) has disconnected", Name);
				    SendClientMessage(Player[playerid][BeingSpyedOnBy], WHITE, string);
				    Player[playerid][BeingSpyedOnBy] = -1;
				}

			    if(Player[playerid][PendingProposal] != -1)
			    {
			        format(string, sizeof(string), "%s has disconnected (the person you have a pending proposal with).", Name);
			        SendClientMessage(Player[playerid][PendingProposal], WHITE, string);
			        Player[playerid][PendingProposal] = -1;
			    }

			    if(Player[playerid][AdminDuty] >= 1)
			    {
			        SetPlayerName(playerid, Player[playerid][NormalName]);
				    format(string, sizeof(string), "%s is now off Admin Duty (disconnected).", Name);
			        SendToAdmins(ADMINORANGE, string, 1);
			    }

			    if(Player[playerid][IsAtEvent] >= 1)
			    {
					Player[playerid][LastX] = SpawnX;
					Player[playerid][LastY] = SpawnY;
					Player[playerid][LastZ] = SpawnZ;
					Player[playerid][LastWorld] = 0;
					Player[playerid][LastInterior] = 0;
					SavePlayerData(playerid);
					printf("[system] %s has disconnected during an event, so they've been warped to the newbie spawn.", Name);
			    }
			    else
			    {
					GetPlayerPos(playerid, Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ]);
					Player[playerid][LastWorld] = GetPlayerVirtualWorld(playerid);
					SavePlayerData(playerid);
				}
			}

		}
	}
	return 1;
}

public MessageToEventPlayers(colour, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnectedEx(i) && Player[i][IsAtEvent] >= 1)
	    {
	        SendClientMessage(i, colour, string);
	    }
	}
	return 1;
}

public PickupMessages()
{
	new string[128], Float: playX, Float: playY, Float: playZ;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(!IsPlayerInRangeOfPoint(i, 9, playX, playY, playZ))
	    {
		    if(IsPlayerConnectedEx(i) && IsPlayerSpawned(i))
		    {
		        if(IsPlayerInRangeOfPoint(i, 5, ArrestPosX, ArrestPosY, ArrestPosZ))
		        {
		        	GameTextForPlayer(i, "~r~Arrest ~w~Location", 3500, 3);
				}
				
				for(new h = 0; h < sizeof(Businesses); h++)
				{
				    if(IsPlayerInRangeOfPoint(i, 5, Businesses[h][bExteriorX], Businesses[h][bExteriorY], Businesses[h][bExteriorZ]))
				    {
				        if(GetPlayerVirtualWorld(i) == 0)
				        {
				        	if(strcmp(Businesses[h][bOwner], "Nobody", true) == 0)
				        	{
				        	    if(Businesses[h][bPrice] == -1)
				        	    {
									format(string, sizeof(string), "~w~ Business ~y~ %d (%s) ~n~ ~w~Unavailable.", h, Businesses[h][bName]);
									GameTextForPlayer(i, string, 3500, 3);
				        	    }
				        	    else
				        	    {
									format(string, sizeof(string), "~w~ Business ~y~ %d (%s) ~n~ ~w~Available to buy for %d (/buybusiness).", h, Businesses[h][bName], Businesses[h][bPrice]);
									GameTextForPlayer(i, string, 3500, 3);
								}
							}
							else
							{
								format(string, sizeof(string), "~w~ Business ~y~ %d (%s) ~n~ ~w~ Owner: ~y~ %s. ~n~~n~ ~r~ ~k~~PED_DUCK~ ~w~ to enter", h, Businesses[h][bName], Businesses[h][bOwner]);
								GameTextForPlayer(i, string, 3500, 3);
							}
						}
				    }
				}
				for(new h = 0; h < sizeof(Houses); h++)
				{
				    if(IsPlayerInRangeOfPoint(i, 5, Houses[h][hExteriorX], Houses[h][hExteriorY], Houses[h][hExteriorZ]))
				    {
				        if(GetPlayerVirtualWorld(i) == 0)
				        {
				        	if(strcmp(Houses[h][hOwner], "Nobody", true) == 0)
				        	{
				        	    if(Houses[h][HousePrice] == -1)
				        	    {
									format(string, sizeof(string), "~w~ House ~y~ %d ~n~ ~w~ Unavailable.", h, Houses[h][HousePrice]);
									GameTextForPlayer(i, string, 3500, 3);
								}
								else
								{
									format(string, sizeof(string), "~w~ House ~y~ %d ~n~ Available to buy for %d (/buyhouse).", h, Houses[h][HousePrice]);
									GameTextForPlayer(i, string, 3500, 3);
								}
							}
							else
							{
								format(string, sizeof(string), "~w~ House ~y~ %d ~n~ ~w~ Owner: ~y~ %s. ~n~~n~ ~r~ ~k~~PED_DUCK~ ~w~ to enter", h, Houses[h][hOwner]);
								GameTextForPlayer(i, string, 3500, 3);
							}
						}
				    }
				}
				for(new h = 0; h < sizeof(Jobs); h++)
				{
				    if(IsPlayerInRangeOfPoint(i, 5, Jobs[h][JobJoinPosX], Jobs[h][JobJoinPosY], Jobs[h][JobJoinPosZ]))
				    {
				        if(GetPlayerVirtualWorld(i) == Jobs[h][JobJoinPosWorld] && GetPlayerInterior(i) == Jobs[h][JobJoinPosInterior])
				        {
							format(string, sizeof(string), "~w~Job ~y~%s ~w~ ~n~ /joinjob", Jobs[h][JobName]);
							GameTextForPlayer(i, string, 3500, 3);
						}
					}
				    if(IsPlayerInRangeOfPoint(i, 5, Jobs[h][JobMiscLocationOneX], Jobs[h][JobMiscLocationOneY], Jobs[h][JobMiscLocationOneZ]))
				    {
				        if(GetPlayerVirtualWorld(i) == Jobs[h][JobMiscLocationOneWorld] && GetPlayerInterior(i) == Jobs[h][JobMiscLocationOneInterior])
				        {
							format(string, sizeof(string), "~w~ %s", Jobs[h][JobMiscLocationOneMessage]);
							GameTextForPlayer(i, string, 3500, 3);
						}
					}
				    if(IsPlayerInRangeOfPoint(i, 5, Jobs[h][JobMiscLocationTwoX], Jobs[h][JobMiscLocationTwoY], Jobs[h][JobMiscLocationTwoZ]))
				    {
				        if(GetPlayerVirtualWorld(i) == Jobs[h][JobMiscLocationTwoWorld] && GetPlayerInterior(i) == Jobs[h][JobMiscLocationTwoInterior])
				        {
							format(string, sizeof(string), "~w~ %s", Jobs[h][JobMiscLocationTwoMessage]);
							GameTextForPlayer(i, string, 3500, 3);
						}
					}
				}

				for(new h = 0; h < sizeof(Groups); h++)
				{
				    if(IsPlayerInRangeOfPoint(i, 5, Groups[h][HQExteriorX], Groups[h][HQExteriorY], Groups[h][HQExteriorZ]))
				    {
				        if(GetPlayerVirtualWorld(i) == 0)
				        {
							format(string, sizeof(string), "~w~Group ~y~%s's ~w~ HQ. ~n~~n~ ~r~ ~k~~PED_DUCK~ ~w~ to enter", Groups[h][GroupName]);
							GameTextForPlayer(i, string, 3500, 3);
						}
					}
				    if(IsPlayerInRangeOfPoint(i, 5, Groups[h][SafeX], Groups[h][SafeY], Groups[h][SafeZ]))
				    {
				        if(GetPlayerVirtualWorld(i) == Groups[h][SafeWorld])
				        {
							format(string, sizeof(string), "~w~Group ~y~%s's ~w~ Safe.", Groups[h][GroupName]);
							GameTextForPlayer(i, string, 3500, 3);
						}
					}

				}
		    }
		}
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{
    SetPlayerColor(playerid, WHITE);

    if(Player[playerid][PreLoadedAnims] == 0)
    {
	    PreloadAnimLib(playerid,"BOMBER");
	   	PreloadAnimLib(playerid,"RAPPING");
	    PreloadAnimLib(playerid,"SHOP");
	   	PreloadAnimLib(playerid,"BEACH");
	   	PreloadAnimLib(playerid,"SMOKING");
	    PreloadAnimLib(playerid,"FOOD");
	    PreloadAnimLib(playerid,"ON_LOOKERS");
	    PreloadAnimLib(playerid,"DEALER");
		PreloadAnimLib(playerid,"CRACK");
		PreloadAnimLib(playerid,"CARRY");
		PreloadAnimLib(playerid,"COP_AMBIENT");
		PreloadAnimLib(playerid,"PARK");
		PreloadAnimLib(playerid,"INT_HOUSE");
		PreloadAnimLib(playerid,"FOOD");
		PreloadAnimLib(playerid,"PED");
		Player[playerid][PreLoadedAnims] = 1;
	}

    SetPlayerSkillLevel(playerid, WEAPONSKILL_SAWNOFF_SHOTGUN, 1);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 1);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_DESERT_EAGLE, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SHOTGUN, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 1);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_MP5, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_AK47, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_M4, 999);
    SetPlayerSkillLevel(playerid, WEAPONSKILL_SNIPERRIFLE, 999);

	if(Player[playerid][Authenticated] == 1)
	{
    	if(Player[playerid][PrisonDuration] >= 1)
    	{
		    Player[playerid][InGroupHQ] = 0;
		    Player[playerid][InBusiness] = 0;
		    Player[playerid][InHouse] = 0;

    	    if(Player[playerid][PrisonID] == 1)
    	    {
    	        SetPlayerInterior(playerid, Prison1Int);
    	        SetPlayerPos(playerid, Prison1X, Prison1Y, Prison1Z);
    	        SetPlayerVirtualWorld(playerid, Prison1World);
    	    }
    	    else if(Player[playerid][PrisonID] == 2)
    	    {
    	        SetPlayerInterior(playerid, Prison2Int);
    	        SetPlayerPos(playerid, Prison2X, Prison2Y, Prison2Z);
    	        SetPlayerVirtualWorld(playerid, Prison2World);
    	    }
    	}
    	else
    	{
			GivePlayerSavedWeapons(playerid);
			SetPlayerWeather(playerid, GlobalWeather);
			
			if(Player[playerid][AdminDuty] == 1)
			{
			    SetPlayerHealth(playerid, 60000);
			}
			
			if(Player[playerid][IsAtEvent] >= 1)
			{
			    new string[128];
			    ResetPlayerWeapons(playerid);
			    GivePlayerSavedWeapons(playerid);
			    SetPlayerPos(playerid, SpawnX, SpawnY, SpawnZ);
				new MathsFlaw = floatround(Player[playerid][LastHealth], floatround_ceil);
  				SetPlayerHealth(playerid, MathsFlaw);
				MathsFlaw = floatround(Player[playerid][LastArmour], floatround_ceil);
				SetPlayerArmour(playerid, MathsFlaw);
			    SendClientMessage(playerid, WHITE, "Thanks for playing in one of our events. You have been fully refunded.");
			    Player[playerid][Hospitalized] = 0;
			    
			    if(Player[playerid][LastKiller] == INVALID_PLAYER_ID)
			    {
			    	format(string, sizeof(string), "%s is no longer in the event, reason: Death.", GetName(playerid));
				    MessageToEventPlayers(YELLOW, string);
			    }
			    else
			    {
				    format(string, sizeof(string), "%s is no longer in the event, reason: Death (killed by %s).", GetName(playerid), GetName(Player[playerid][LastKiller]));
				    MessageToEventPlayers(YELLOW, string);
			    }
			}
			
			if(Player[playerid][Hospitalized] >= 1 && Player[playerid][PrisonDuration] < 1)
			{
			    if(Player[playerid][AdminDuty] == 1)
			    {
			        Player[playerid][Hospitalized] = 0;
				    SetPlayerPos(playerid, Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ]);
				    SendClientMessage(playerid, WHITE, "As you're on admin duty, you will not be hospitalized.");
			    }
			    else
			    {
			        if(Player[playerid][PrisonDuration] < 1)
			        {
			            Player[playerid][LastWorld] = 0;
			            Player[playerid][LastInterior] = 0;
					    ResetPlayerWeaponsEx(playerid);
					    SetPlayerHealth(playerid, 100);
					    SetPlayerInterior(playerid, 0);
					    SetPlayerVirtualWorld(playerid, 0);
					    SetPlayerDrunkLevel(playerid, 50000);
				    	Player[playerid][HospitalTime] = 1;
					    SetPlayerColor(playerid, GREY);
					    SetPlayerVirtualWorld(playerid, playerid+59);
						TogglePlayerControllable(playerid, false);
						SetPlayerPos(playerid, SpawnX, SpawnY - 5, SpawnZ);
				   		SetPlayerCameraPos(playerid, -833.5241, -1358.8575, 86.9054);
						SetPlayerCameraLookAt(playerid, -830.8118, -1360.3612, 87.0289);
						SendClientMessage(playerid, ANNOUNCEMENT, "You have blacked out. You're currently undergoing hospital treatment.");
						SendClientMessage(playerid, WHITE, "You will be released when you have recovered.");
					}
				}
			}
			else if(Player[playerid][Hospitalized] == -1)
			{
				SetCameraBehindPlayer(playerid);
				SetPlayerInterior(playerid, Spectator[playerid][SpecPlayerInterior]);
				SetPlayerFacingAngle(playerid, Spectator[playerid][SpecPlayerAngle]);
				SetPlayerVirtualWorld(playerid, Spectator[playerid][SpecPlayerWorld]);
				SetPlayerPos(playerid, Spectator[playerid][SpecPlayerX], Spectator[playerid][SpecPlayerY], Spectator[playerid][SpecPlayerZ]);
			    TogglePlayerControllable(playerid, true);
			    Player[playerid][Hospitalized] = 0;
			    Player[Player[playerid][LastKiller]][IsHacker] = 0;
			}
			else
			{
			    if(Player[playerid][IsAtEvent] >= 1)
			    {
			    	Player[playerid][IsAtEvent] = 0;
				    TogglePlayerControllable(playerid, true);
				    SetPlayerVirtualWorld(playerid, 0);
				    SetPlayerInterior(playerid, 0);
			    }
			    else
			    {
				    TogglePlayerControllable(playerid, true);
			    	SetPlayerInterior(playerid, Player[playerid][LastInterior]);
			    	SetPlayerVirtualWorld(playerid, Player[playerid][LastWorld]);
			    	
				    if(GetPlayerVirtualWorld(playerid) >= 45000 && GetPlayerVirtualWorld(playerid) < 55000 || GetPlayerVirtualWorld(playerid) >= 55000 && GetPlayerVirtualWorld(playerid) < 65000 || GetPlayerVirtualWorld(playerid) >= 65000 && GetPlayerVirtualWorld(playerid) < 75000)
				    {
				        TextDrawShowForPlayer(playerid, ExitTextdraw);
			    	}
		    	}
			}
		}
	}

 	Player[playerid][ResetTimer] = 1;
	return 1;
}

public GivePlayerSavedWeapons(playerid)
{
	if(Player[playerid][WepSlot3] == 26)
	{
	    Player[playerid][WepSlot6] = 0;
	    ResetPlayerWeapons(playerid);
	}
	
	GivePlayerWeapon(playerid, Player[playerid][WepSlot0], 99999);
    GivePlayerWeapon(playerid, Player[playerid][WepSlot1], 99999);
    GivePlayerWeapon(playerid, Player[playerid][WepSlot2], 99999);
    GivePlayerWeapon(playerid, Player[playerid][WepSlot3], 99999);
    GivePlayerWeapon(playerid, Player[playerid][WepSlot4], 99999);
    GivePlayerWeapon(playerid, Player[playerid][WepSlot5], 99999);
	GivePlayerWeapon(playerid, Player[playerid][WepSlot6], 99999);
    GivePlayerWeapon(playerid, Player[playerid][WepSlot7], 99999);
	GivePlayerWeapon(playerid, Player[playerid][WepSlot8], 99999);
    GivePlayerWeapon(playerid, Player[playerid][WepSlot9], 99999);
    GivePlayerWeapon(playerid, Player[playerid][WepSlot10], 99999);
    GivePlayerWeapon(playerid, Player[playerid][WepSlot11], 99999);
    return 1;
}

public ResetPlayerWeaponsEx(playerid)
{
    ResetPlayerWeapons(playerid);
    Player[playerid][WepSlot0] = 0;
	Player[playerid][WepSlot1] = 0;
	Player[playerid][WepSlot2] = 0;
	Player[playerid][WepSlot3] = 0;
	Player[playerid][WepSlot4] = 0;
	Player[playerid][WepSlot5] = 0;
	Player[playerid][WepSlot6] = 0;
	Player[playerid][WepSlot7] = 0;
	Player[playerid][WepSlot8] = 0;
	Player[playerid][WepSlot9] = 0;
	Player[playerid][WepSlot10] = 0;
	Player[playerid][WepSlot11] = 0;
	return 1;
}

stock split(const strsrc[], strdest[][], delimiter)
{
	new i, li, len, aNum;
	while(i <= strlen(strsrc))
	{
		if(strsrc[i] == delimiter || i == strlen(strsrc))
		{
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	new string[128];

	if(Player[playerid][AdminDuty] != 1)
	{
		Player[playerid][Hospitalized] = 1;
	}
	
	if(Player[playerid][IsInAnimation] >= 1)
	{
	    Player[playerid][IsInAnimation] = 0;
	    TextDrawHideForPlayer(playerid, AnimationTextDraw);
	}
	
	Player[playerid][LastKiller] = killerid;
	
	if(Player[killerid][AdminLevel] < 1)
	{
        if(GetDistanceBetweenPlayers(killerid, playerid) > 25 && reason > 1 && reason < 100 && IsPlayerConnectedEx(killerid) && killerid != playerid)
        {
            new weapon[128];
            GetWeaponName(reason, weapon, sizeof(weapon));
            format(string, sizeof(string), "WARNING: %s has killed %s; from a long distance, using a %s.", GetName(killerid), GetName(playerid), weapon);
	    	SendToAdmins(ADMINORANGE, string, 1);
	    	print(string);
        }
	    if(reason == 49)
	    {
	    	format(string, sizeof(string), "WARNING: %s has car-rammed %s to death.", GetName(killerid), GetName(playerid));
	    	SendToAdmins(ADMINORANGE, string, 1);
	    	print(string);
	    }
	    if(reason == 50)
	    {
	        if(IsAHelicopter(GetPlayerVehicleID(killerid)))
	        {
	    		format(string, sizeof(string), "WARNING: %s has heli-killed %s.", GetName(killerid), GetName(playerid));
	    		SendToAdmins(ADMINORANGE, string, 1);
	    		print(string);
	    	}
	    	else
	    	{
	    	    if(GetPlayerWeapon(killerid) != 32 || GetPlayerWeapon(killerid) != 28 || GetPlayerWeapon(killerid) != 29)
	    	    {
	    			format(string, sizeof(string), "WARNING: %s has car-parked %s.", GetName(killerid), GetName(playerid));
	    			SendToAdmins(ADMINORANGE, string, 1);
	    			print(string);
	    		}
	    		else
	    		{
	    			format(string, sizeof(string), "WARNING: %s has drivershot %s.", GetName(killerid), GetName(playerid));
	    			SendToAdmins(ADMINORANGE, string, 1);
	    			print(string);
	    		}
	    	}
	    }
	}
	
	Player[playerid][ResetTimer] = 1;
	
	if(Player[playerid][BeingAssasinated] == killerid)
	{
	    format(string, sizeof(string), "%s has successfully assasinated contract %s (for $%d).", GetName(killerid), GetName(playerid), Player[playerid][ContractPrice]);
		GroupMessage(killerid, ANNOUNCEMENT, string);
		format(string, sizeof(string), "[HITMAN] %s has earned $%d from killing contract %s.", GetName(killerid), Player[playerid][ContractPrice], GetName(playerid));
		MoneyLog(string);
		Player[killerid][SuccessfulHits]++;
		Player[killerid][Money] += Player[playerid][ContractPrice]/2;
	    Groups[Player[killerid][Group]][SafeMoney] += Player[playerid][ContractPrice]/2;
	    format(Player[playerid][Contract], 255, "None");
	    Player[playerid][Money] -= Player[playerid][ContractPrice]/2;
	    Player[playerid][BeingAssasinated] = -1;
	    Player[killerid][PlayerToAssasinate] = -1;
	    format(string, sizeof(string), "You have been attacked by a Hitman. The Hitman also took $%d.", Player[playerid][ContractPrice]/2);
		SendClientMessage(playerid, ANNOUNCEMENT, string);
		Player[playerid][ContractPrice] = 0;
	}
	else if(Player[killerid][BeingAssasinated] == playerid)
	{
	    format(string, sizeof(string), "You have been attacked by a Hitman and killed them. You were chased because: %s. You earned $%d.", Player[playerid][Contract], Player[playerid][ContractPrice]/2);
		SendClientMessage(playerid, ANNOUNCEMENT, string);
		format(string, sizeof(string), "[HITMAN] %s has earned $%d for killing the hitman (%s).", GetName(killerid), Player[playerid][ContractPrice], GetName(playerid));
		MoneyLog(string);
		Player[playerid][FailedHits]++;
	    format(string, sizeof(string), "%s has failed to assasinate contract %s (for $%d).", GetName(playerid), GetName(killerid), Player[playerid][ContractPrice]);
		GroupMessage(playerid, ANNOUNCEMENT, string);
		Player[killerid][Money] += Player[killerid][ContractPrice]/2;
	    Groups[Player[playerid][Group]][SafeMoney] += Player[killerid][ContractPrice]/2;
	    format(Player[killerid][Contract], 255, "None");
	    Player[playerid][Money] -= Player[killerid][ContractPrice];
	    Player[killerid][BeingAssasinated] = -1;
	    Player[playerid][PlayerToAssasinate] = -1;
	    format(string, sizeof(string), "You have failed to assasinate %s, therefore you have lost $%d.", GetName(killerid), Player[playerid][ContractPrice]);
		SendClientMessage(playerid, ANNOUNCEMENT, string);
		Player[killerid][ContractPrice] = 0;
	}

	if(Player[playerid][IsAtEvent] >= 1)
	{
	    EC--;
    	if(EC == 1)
    	{
    	    format(string, sizeof(string), "Congratulations to %s - they've won the event!", GetName(killerid));
    	    ResetPlayerWeapons(killerid);
    	    SendClientMessageToAll(LIGHTRED, string);
    	    ResetPlayerWeapons(playerid);
    	    CurrentEvent = 0;
			new MathsFlaw = floatround(Player[killerid][LastHealth], floatround_ceil);
  			SetPlayerHealth(killerid, MathsFlaw);
			MathsFlaw = floatround(Player[killerid][LastArmour], floatround_ceil);
			SetPlayerArmour(killerid, MathsFlaw);
			Player[killerid][Hospitalized] = 0;
			Player[killerid][IsAtEvent] = 0;
			TogglePlayerControllable(killerid, true);
			Player[killerid][ResetTimer] = 1;
			ResetPlayerWeapons(killerid);
			GivePlayerSavedWeapons(killerid);
    	    EC = 0;
    	    SetPlayerPos(killerid, SpawnX, SpawnY, SpawnZ);
    	    SetPlayerInterior(killerid, SpawnInt);
    	    SetPlayerVirtualWorld(killerid, SpawnWorld);
    	    SendClientMessage(killerid, WHITE, "Thanks for playing fair! Congratulations on winning the event.");
    	    
    	    if(Anticheat == -1)
    	    {
    	        Anticheat = 1;
    	    }
    	}
	}
	else
	{
	    if(Anticheat == 1 && CurrentEvent == 0)
	    {
	        if(Player[killerid][IsAtEvent] >= 1)
	        {
	            Player[killerid][IsAtEvent] = 0;
	            ResetPlayerWeapons(killerid);
	            GivePlayerSavedWeapons(killerid);
	            Player[playerid][LastWorld] = 0;
	            Player[playerid][LastInterior] = 0;
	        }
	        else
	        {
		        if(IsPlayerSpawned(killerid))
		        {
		            switch(GetPlayerWeapon(killerid))
		            {
					    case 0, 1:
					    {
					        if(Player[killerid][WepSlot0] != 1 && GetPlayerWeapon(killerid) == 1)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 2, 3, 4, 5, 6, 7, 8, 9:
					    {
					        if(Player[killerid][WepSlot1] != 2 && GetPlayerWeapon(killerid) == 2)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot1] != 3 && GetPlayerWeapon(killerid) == 2)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot1] != 4 && GetPlayerWeapon(killerid) == 4)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot1] != 5 && GetPlayerWeapon(killerid) == 5)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot1] != 6 && GetPlayerWeapon(killerid) == 6)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot1] != 7 && GetPlayerWeapon(killerid) == 7)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot1] != 8 && GetPlayerWeapon(killerid) == 8)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot1] != 9 && GetPlayerWeapon(killerid) == 9)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 22, 23, 24:
					    {
					        if(Player[killerid][WepSlot2] != 22 && GetPlayerWeapon(killerid) == 22)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot2] != 23 && GetPlayerWeapon(killerid) == 23)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot2] != 24 && GetPlayerWeapon(killerid) == 24)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 25, 26, 27:
					    {
					        if(Player[killerid][WepSlot3] != 26 && GetPlayerWeapon(killerid) == 26)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot3] != 27 && GetPlayerWeapon(killerid) == 27)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 28, 29, 32:
					    {
					        if(Player[killerid][WepSlot4] != 28 && GetPlayerWeapon(killerid) == 28)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot4] != 29 && GetPlayerWeapon(killerid) == 29)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot4] != 32 && GetPlayerWeapon(killerid) == 32)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 30, 31:
					    {
					        if(Player[killerid][WepSlot5] != 30 && GetPlayerWeapon(killerid) == 30)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot5] != 31 && GetPlayerWeapon(killerid) == 31)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 33, 34:
					    {
					        if(Player[killerid][WepSlot6] != 34 && GetPlayerWeapon(killerid) == 34)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot6] != 33 && GetPlayerWeapon(killerid) == 33)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 35, 36, 37, 38:
					    {
					        if(Player[killerid][WepSlot7] != 35 && GetPlayerWeapon(killerid) == 35)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot7] != 36 && GetPlayerWeapon(killerid) == 36)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot7] != 37 && GetPlayerWeapon(killerid) == 37)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot7] != 38 && GetPlayerWeapon(killerid) == 38)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 16, 17, 18, 39:
					    {
					        if(Player[killerid][WepSlot8] != 16 && GetPlayerWeapon(killerid) == 16)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot8] != 17 && GetPlayerWeapon(killerid) == 17)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot8] != 18 && GetPlayerWeapon(killerid) == 18)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot8] != 39 && GetPlayerWeapon(killerid) == 39)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 41, 42, 43:
					    {
					        if(Player[killerid][WepSlot9] != 41 && GetPlayerWeapon(killerid) == 41)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot9] != 42 && GetPlayerWeapon(killerid) == 42)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot9] != 43 && GetPlayerWeapon(killerid) == 43)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 10, 11, 12, 13, 14, 15:
					    {
					        if(Player[killerid][WepSlot10] != 10 && GetPlayerWeapon(killerid) == 10)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot10] != 11 && GetPlayerWeapon(killerid) == 11)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot10] != 12 && GetPlayerWeapon(killerid) == 13)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
	     				    else if(Player[killerid][WepSlot10] != 13 && GetPlayerWeapon(killerid) == 13)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
	 				        else if(Player[killerid][WepSlot10] != 14 && GetPlayerWeapon(killerid) == 14)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot10] != 15 && GetPlayerWeapon(killerid) == 15)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
					    case 44, 45, 46:
					    {
					        if(Player[killerid][WepSlot11] != 44 && GetPlayerWeapon(killerid) == 44)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot11] != 45 && GetPlayerWeapon(killerid) == 45)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					        else if(Player[killerid][WepSlot11] != 46 && GetPlayerWeapon(killerid) == 46)
					        {
					            AntiCheatBan(killerid);
					            Player[killerid][IsHacker] = 1;
					        }
					    }
		            }
		        }
	        }
	    }

		if(Player[playerid][PrisonDuration] >= 1)
		{
		    Player[playerid][Money] -= 9;
		}
		else
		{
			if(Player[playerid][AdminDuty] != 1)
			{
			    if(Player[killerid][IsHacker] == 1)
			    {
			        SendClientMessage(playerid, WHITE, "It seems you were killed by a Hacker. Your weapons will be refunded and you will not be hospitalized.");
			        Player[playerid][Hospitalized] = -1;
			        
					Spectator[playerid][SpecPlayerInterior] = SpawnInt;
					Spectator[playerid][SpecPlayerAngle] = 0.00;
					Spectator[playerid][SpecPlayerWorld] = 0;
					Spectator[playerid][SpecPlayerX] = SpawnX;
					Spectator[playerid][SpecPlayerY] = SpawnY;
					Spectator[playerid][SpecPlayerZ] = SpawnZ;
			    }
			    else
			    {
					Player[playerid][Hospitalized] = 1;
				}
			}
	    }
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	printf("[DEBUG] Vehicle %d has spawned!", vehicleid);
	return 1;
}

public OnVehicleDeath(vehicleid, killerid)
{
	return 1;
}

public LiteralGroupMessage(group, colour, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnectedEx(i))
	   	{
	   		if(Player[i][Group] == group)
	   		{
	   		    SendClientMessage(i, colour, string);
	   		}
		}
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
	new string[128];

	if(CurGMX == 2)
	{
	    SendClientMessage(playerid, WHITE, "Please wait until the server has completely restarted.");
	    return 0;
	}
	

	if(! strcmp(text, "Next", true))
	{
		if(Player[playerid][Tutorial] >= 1)
		{
		    if(Player[playerid][ServerTut] >= 1)
		    {
		        switch(Player[playerid][ServerTut])
		        {
		            case 1:
		            {
		                SetPlayerCameraPos(playerid, 625.077514, -1226.489501, 27.801343);
		                SetPlayerCameraLookAt(playerid, 591.953002, -1232.312011, 17.801343);
		                TogglePlayerControllable(playerid, false);
		                
		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "The Bank");
					    SendClientMessage(playerid, WHITE, "The Bank is a primary location on the server, within this building you can withdraw, deposit & receive money.");
					    SendClientMessage(playerid, WHITE, "The commands in the bank are: /bdeposit, /bwithdraw, /wiretransfer");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][ServerTut]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
					}
		            case 2:
		            {
		                SetPlayerCameraPos(playerid, 575.757690, -1210.189331, 18.196769);
		                SetPlayerCameraLookAt(playerid, 562.488952, -1262.038330, 17.196769);
		                TogglePlayerControllable(playerid, false);
		                
		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "The Vehicle Dealership");
					    SendClientMessage(playerid, WHITE, "The Vehicle Dealership is a very popular business, and the only one of its kind. You can buy your OWN vehicles");
					    SendClientMessage(playerid, WHITE, "in here. These vehicles stick to your account, they're spawned when you're online and they're despawned when you");
					    SendClientMessage(playerid, WHITE, "are offline - however, they respawn when you log back in. If you modify these at modshops, they modifications remain");
					    SendClientMessage(playerid, WHITE, "even when you logoff! You can find out more about owned vehicles using /help, once you've spawned.");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][ServerTut]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
					}
		            case 3:
		            {
		                SetPlayerCameraPos(playerid, 831.919311, -1318.614257, 13.240310);
		                SetPlayerCameraLookAt(playerid, 741.028442, -1416.087402, 13.240311);
		                TogglePlayerControllable(playerid, false);

		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "Market");
					    SendClientMessage(playerid, WHITE, "Market is one of the most popular areas in our server, a lot of people hang around here, and new players spawn");
					    SendClientMessage(playerid, WHITE, "just around the corner! You can sell items here by roleplaying, and you can even buy items, from Weapons to Vehicles.");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][ServerTut]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
					}
		            case 4:
		            {
		                SetPlayerCameraPos(playerid, 614.961791, -1487.695922, 18.746559);
		                SetPlayerCameraLookAt(playerid, 614.736694, -1477.698486, 14.746559);
		                TogglePlayerControllable(playerid, false);

		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "Legal Jobs");
					    SendClientMessage(playerid, WHITE, "We've bunched all of the legal jobs for the server in to this little area, run over to an 'i' icon for the ");
					    SendClientMessage(playerid, WHITE, "job titles, etc. The illegal jobs are slightly harder to find.");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][ServerTut]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
					}
					case 5:
					{
		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "Okay, so we're almost done.");
					    SendClientMessage(playerid, WHITE, "Please fill in these important bits of information, before we can let you proceed.");
					    ShowPlayerDialog(playerid, 106, DIALOG_STYLE_LIST, "Please Specify Your Gender", "Male\nFemale", "Select", "Cancel");
					    Player[playerid][ServerTut] = 0;
					    SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    return 0;
					}
		        }
		    }
		    
		    if(Player[playerid][RPTutStep] >= 1)
		    {
		        switch(Player[playerid][RPTutStep])
		        {
		            case 1:
		            {
		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "IC and OOC");
					    SendClientMessage(playerid, WHITE, "IC and OOC are two prime terms you'll come across whilst roleplaying.");
					    SendClientMessage(playerid, WHITE, "IC - In Character: Everything that you're roleplaying is IC.");
					    SendClientMessage(playerid, WHITE, "OOC - Out of Character: Computer issues, real-life-related things are OOC.");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][RPTutStep]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
		            }
		            case 2:
		            {
		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "Metagaming");
					    SendClientMessage(playerid, WHITE, "This is the process of mixing OOC information with IC information.");
		 				SendClientMessage(playerid, WHITE, "This is a regular thing that newbies experience; example: Responding to an OOC question IC. ");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][RPTutStep]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
		            }
		            case 3:
		            {
		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "Powergaming");
					    SendClientMessage(playerid, WHITE, "This is the process of executing an unrealistic action / forcing RP upon another player.");
		 				SendClientMessage(playerid, WHITE, "Such as: /me becomes superman and makes Justin_Bieber poke him");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][RPTutStep]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
		            }
		            case 4:
		            {
		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "Hacking");
					    SendClientMessage(playerid, WHITE, "This is the process of using third-party tools to modify your game play or others.");
		 				SendClientMessage(playerid, WHITE, "Hacking Tools are NOT allowed at any time, not even our administrators are allowed to use them.");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][RPTutStep]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
		            }
		            case 5:
		            {
		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "Deathmatching");
					    SendClientMessage(playerid, WHITE, "This is the process of killing somebody without a valid IC reason.");
		 				SendClientMessage(playerid, WHITE, "For example, killing someone because they insulted you OOC. A common abbreviation for deathmatching is 'DMing'.");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][RPTutStep]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
		            }
		            case 6:
		            {
		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "Revenge Killing");
					    SendClientMessage(playerid, WHITE, "This is the process of killing somebody who has just killed you.");
		 				SendClientMessage(playerid, WHITE, "You can only do this, if you have an IC link to who just killed you (for example, a friend was present when you were ");
		 				SendClientMessage(playerid, WHITE, "attacked, they told you when you respawned from hospital). If you're not informed, that is RKing (Revenge Killing)");
		 				SendClientMessage(playerid, WHITE, "As you lose 30 minutes of memory, each time you die (become severely injured).");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][RPTutStep]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
		            }
		            case 7:
		            {
		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "Administrators / Admins");
					    SendClientMessage(playerid, WHITE, "Administrators are a part of the server's staff team. They actively help players out and handle reports.");
		 				SendClientMessage(playerid, WHITE, "Administrators are usually the most active of the game, and you can contact them using out /(re)port tool.");
		 				SendClientMessage(playerid, WHITE, "Quite a lot of the time, our administrators are busy helping other players out, but they're usually very friendly");
		 				SendClientMessage(playerid, WHITE, "and do their best to help as many people out as possible. You can check if there any online, by using /admins.");
					    SendClientMessage(playerid, GREY, "Please type \"next\" in the chatbox, when you have fully read this section.");
		                Player[playerid][RPTutStep]++;
		                SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
		                return 0;
		            }
		            case 8:
		            {
		                ShowPlayerDialog(playerid, 105, DIALOG_STYLE_LIST, "Would you like to endure our server tutorial?", "Yes, please\nNo, thanks.", "Select", "Cancel");
		                Player[playerid][RPTutStep] = 0;
		            	SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
					    SendClientMessage(playerid, WHITE, "Okay, we're done with the boring stuff. Would you like to participate in our server tutorial?");
		 				SendClientMessage(playerid, WHITE, "This tutorial section is foccused on explaining server locations, jobs and other bits.");
		 				SendClientMessage(playerid, GREY, "-----------------------------------------------------------------------------------------------------------------");
                        return 0;
					}
		        }
	        }
	    }
	}

	if(Player[playerid][CellphoneConsole] != -1)
	{
	    if(Player[playerid][CellphoneConsole] != 911)
	    {
		    format(string, sizeof(string), "[Phone] [%s Accent] %s says: %s", Player[playerid][Accent], GetName(playerid), text);
		    NearByMessage(playerid, GREY, string);
		    SendClientMessage(Player[playerid][CellphoneConsole], GREY, string);
		    ICChatLog(string);
	    }
	    else
	    {
	        new txtstr[128];
		    format(txtstr, sizeof(txtstr), "[Phone] [%s Accent] %s says: %s", Player[playerid][Accent], GetName(playerid), text);
		    NearByMessage(playerid, GREY, txtstr);
		    ICChatLog(string);
		    
	        switch(Player[playerid][NineOneOneStep])
	        {
	            case 0:
	            {
			        if(!strcmp(text, "LSPD", true))
			        {
			            SendClientMessage(playerid, WHITE, "You've selected the LSPD - How may we help you?");
			            SendClientMessage(playerid, GREY, "Please report the crime you called about.");
			            Player[playerid][NineOneOneStep] = 1;
			        }
			        else if(!strcmp(text, "LSFMD", true))
			        {
			            SendClientMessage(playerid, WHITE, "You've selected the LSFMD - How may we help you?");
			            SendClientMessage(playerid, GREY, "Please describe the current scene!");
			            Player[playerid][NineOneOneStep] = 10;
			        }
			        else
			        {
			            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			            Player[playerid][CellphoneConsole] = -1;
			            Player[playerid][NineOneOneStep] = 0;
			            SendClientMessage(playerid, WHITE, "Unrecognized line. The call has been terminated.");
			        }
		        }
		        case 1:
		        {
		            if(strlen(text) >= 1)
		            {
			            format(Player[playerid][ActiveCrimeReport], 255, "%s", text);
			            Player[playerid][NineOneOneStep] = 2;
			            SendClientMessage(playerid, WHITE, "Please report the person who is comitting the crime! Say 'Unsure' if you're unsure.");
			            NearByMessage(playerid, GREY, txtstr);
		            }
		            else
		            {
		                SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
     			        Player[playerid][CellphoneConsole] = -1;
			            Player[playerid][NineOneOneStep] = 0;
		            }
		        }
		        case 2:
		        {
			        if(IsPlayerConnectedEx(GetPlayerID(text)))
			        {
						new location[MAX_ZONE_NAME];
						GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
			            format(string, sizeof(string), "911: %s has reported %s for %s (tracked from %s)", GetName(playerid), GetPlayerID(text), Player[playerid][ActiveCrimeReport], location);
						for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if(IsPlayerConnectedEx(i))
						   	{
						   		if(Groups[Player[i][Group]][CommandTypes] == 1 && Player[i][CopDuty] == 1)
						   		{
						   		    SendClientMessage(i, RED, string);
						   		}
							}
						}
						
			            format(string, sizeof(string), "Thank you for reporting %s. The situation will be investigated!");
			            SendClientMessage(playerid, WHITE, string);
			            Player[playerid][CellphoneConsole] = -1;
			            Player[playerid][NineOneOneStep] = 0;
			            
			            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			        }
			        else if(!strcmp(text, "Unsure", true))
			        {
						new location[MAX_ZONE_NAME];
						GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
			            format(string, sizeof(string), "911: %s has reported a crime: %s (tracked from %s)", GetName(playerid), Player[playerid][ActiveCrimeReport], location);

						for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if(IsPlayerConnectedEx(i))
						   	{
						   		if(Groups[Player[i][Group]][CommandTypes] == 1 && Player[i][CopDuty] == 1)
						   		{
						   		    SendClientMessage(i, RED, string);
						   		}
							}
						}
						
			            format(string, sizeof(string), "Thank you for reporting %s. The situation will be investigated!");
			            SendClientMessage(playerid, WHITE, string);
			            Player[playerid][CellphoneConsole] = -1;
			            Player[playerid][NineOneOneStep] = 0;
			            
			            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			        }
			        else
			        {
			            Player[playerid][CellphoneConsole] = -1;
			            Player[playerid][NineOneOneStep] = 0;
			            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			            SendClientMessage(playerid, WHITE, "Name not recognized on the database of LS Citizens.");
			        }
		        }
		        case 10:
		        {
			    	if(strlen(text) >= 1)
			        {
						new location[MAX_ZONE_NAME];
						GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);
			            SendClientMessage(playerid, WHITE, "Thank you for calling. A unit will be dispatched shortly!");
     			        Player[playerid][CellphoneConsole] = -1;
			            Player[playerid][NineOneOneStep] = 0;
			            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			            format(string, sizeof(string), "911 [LSFMD]: %s has reported: %s (tracked from %s)", GetName(playerid), text, location);

						for(new i = 0; i < MAX_PLAYERS; i++)
						{
							if(IsPlayerConnectedEx(i))
						   	{
						   		if(Groups[Player[i][Group]][CommandTypes] == 3 && Player[i][MedicDuty] == 1)
						   		{
						   		    SendClientMessage(i, RED, string);
						   		}
							}
						}
			    	}
			    	else
			    	{
     			        Player[playerid][CellphoneConsole] = -1;
			            Player[playerid][NineOneOneStep] = 0;
			            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
			    	}
		        }
	        }
	    }
	}
	else
	{
		if(strcmp(text, "Yes", true) == 0 && Player[playerid][PendingProposal] >= 1)
		{
		    if(Player[Player[playerid][PendingProposal]][Money] >= 10000 && Businesses[Player[playerid][InBusiness]][bType] == 9)
		    {
		        Player[Player[playerid][PendingProposal]][Money] -= 10000;
		        Businesses[Player[playerid][InBusiness]][bVault] += 10000;
			    new str[128];
			    SendClientMessage(playerid, WHITE, "You have accepted the proposal!");
			    format(str, sizeof(str), "%s has accepted your proposal! You are now married!", GetName(Player[playerid][PendingProposal]));
			    SendClientMessage(Player[playerid][PendingProposal], WHITE, string);
			    format(Player[playerid][MarriedTo], 255, "%s", GetName(Player[playerid][PendingProposal]));
			    format(Player[Player[playerid][PendingProposal]][MarriedTo], 255, "%s", GetName(playerid));
	            Player[playerid][PendingProposal] = -1;
            }
            else
            {
                SendClientMessage(playerid, WHITE, "The wedding can't be performed as the player you're marrying doesn't have $10,000. Or you're not in a church!");
            }
		}
		
		if(Player[playerid][Tutorial] >= 1)
		{
		    SendClientMessage(playerid, WHITE, "Please finish the tutorial first.");
		}
		else
		{
			if(Player[playerid][Authenticated] == 0)
			{
		    	SendClientMessage(playerid, GREY, "You must login first.");
			}
			if(Player[playerid][Muted] != 0)
			{
			    SendClientMessage(playerid, GREY, "You're unable to speak as you're muted or prisoned.");
			}
			else
			{
			    if(strlen(text) >= 128)
			    {
			        SendClientMessage(playerid, WHITE, "Your message must be shorter than 128 characters.");
			    }
			    else
			    {
			        if(Player[playerid][PrisonID] != 1)
			        {
				        if(Spectator[playerid][SpecSpectatingPlayer] == -1)
				        {
					        if(Player[playerid][ToggedRAGE] == 1)
					        {
					    		format(string, sizeof(string), "[%s Accent] %s says: %s", Player[playerid][Accent], GetName(playerid), text);
								NearByMessage(playerid, RED, string);
								ICChatLog(string);
					        }
					        else
					        {
						    	format(string, sizeof(string), "[%s Accent] %s says: %s", Player[playerid][Accent], GetName(playerid), text);
								NearByMessage(playerid, WHITE, string);
								ICChatLog(string);
							}
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "You can't talk ICly whilst you're spectating.");
						}
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "You may not speak ICly whilst you're in OOC prison.");
					}
				}
			}
		}
	}
	return 0;
}

public GroupMessage(playerid, colour, string[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnectedEx(i))
	   	{
	   		if(Player[i][Group] == Player[playerid][Group])
	   		{
	   		    SendClientMessage(i, colour, string);
	   		}
		}
	}
	return 1;
}

public NearByMessage(playerid, colour, string[])
{
	new Float: PlayerX, Float: PlayerY, Float: PlayerZ;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnectedEx(i) && IsPlayerSpawned(playerid))
	   	{
	   		GetPlayerPos(playerid, PlayerX, PlayerY, PlayerZ);
	   		if(IsPlayerInRangeOfPoint(i, 12, PlayerX, PlayerY, PlayerZ))
	   		{
			    if(GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(i) && GetPlayerInterior(playerid) == GetPlayerInterior(i))
	    	    {
	    			SendClientMessage(i, colour, string);
	    		}
	    	}
		}
	}
	return 1;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if(IsPlayerConnectedEx(playerid))
	{
	    if(Player[playerid][Muted] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "You can't use any commands whilst you are muted.");
			return 0;
		}
	    else
	    {

	        /*if(strfind(cmdtext, "[myid]", true))
	        {
	            new tmpstr[4];
	            format(tmpstr, sizeof(tmpstr), "%d", playerid);
	            cmdtext[128] = str_replace("[myid]", tmpstr, cmdtext, substr_count("[myid]", cmdtext));
	        }*/
	    
	        if(Player[playerid][AdminLevel] >= 1 && strlen(Player[playerid][AdminName]) == 0)
	        {
	            SendClientMessage(playerid, WHITE, "You must have your admin name set first.");
	            return 0;
	        }
	        else
	        {
			    if(Player[playerid][AdminLevel] >= 1 && Player[playerid][PINAuth] == 0)
			    {
			        SendClientMessage(playerid, WHITE, "You must authenticate with your admin PIN first.");
			        return 0;
			    }
			    else
			    {
					Player[playerid][SpamCount]++;

					if(Player[playerid][SpamCount] >= 3 && Player[playerid][AdminLevel] >= 1 && Player[playerid][AdminLevel] < 5)
					{
					    if(strfind(cmdtext, "ban", true) != -1 || strfind(cmdtext, "kick", true) != -1 || strfind(cmdtext, "warn", true) != -1 || strfind(cmdtext, "set", true) != -1)
					    {
					    	new string[128], Name[MAX_PLAYER_NAME];
						    new hour, minute, second, day, year, month;
						    GetPlayerName(playerid, Name, sizeof(Name));
					        gettime(hour, minute, second);
					        getdate(year, month, day);
					        #pragma unused second
						    new IP[21];
						    GetPlayerIp(playerid, IP, sizeof(IP));
							format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | SPAMMING | System", day, month, year, hour, minute, IP, Name);
							BanLog(string);
					    	format(string, sizeof(string), "Ban: %s has been auto-banned, defined reason: Spamming (ban/kick/warn/set).", Name);
					    	SendClientMessageToAll(LIGHTRED, string);
					       	Player[playerid][Banned] = 4;
					       	Player[playerid][AdminDuty] = 0;
							print(string);
							Ban(playerid);
							return 0;
						}
						else
						{
						    Kick(playerid);
						}
					}
					
					if(substr_count(".", cmdtext, true) >= 3 && substr_count(":", cmdtext, true) >= 1)
					{
					    new string[128], tmp;
					    tmp = strfind(cmdtext, ":");
					    if(tmp != -1)
					    {
					        format(string, sizeof(string), "WARNING: %s may be server-advertising (%s).", GetName(playerid), cmdtext);
					        SendToAdmins(ADMINORANGE, string, 1);
					        return 0;
				        }
					}

					if(CurGMX == 2)
					{
					    SendClientMessage(playerid, WHITE, "Please wait until the server has completely restarted.");
					    return 0;
					}
					else
					{
					    if(Player[playerid][Tutorial] >= 1 && Player[playerid][AdminLevel] < 1)
					    {
					        SendClientMessage(playerid, WHITE, "You may not use commands whilst in the tutorial.");
					        return 0;
					    }
					    else
					    {
		     				printf("[command] %s (%d) executes: %s", GetName(playerid), playerid, cmdtext);
							return 1;
				    	}
				    }
			    }
			}
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "Please authenticate first.");
	    return 0;
	}
}

stock strtolower(string[])
{
    new
	    retStr[255],
	    i,
		j;
                
	while ((j = string[i]))  retStr[i++] = chrtolower(j);
    retStr[i] = '\0';
    return retStr;
}

stock substr_count(substring[], string[], bool:ignorecase = false, startpos = 0)
{
	new ncount, start = strfind(string, substring, ignorecase, startpos);

	while(start >- 1)
	{
		start = strfind(string, substring, ignorecase, start + strlen(substring));
		ncount++;
	}

	return ncount;
}

stock AdminWeaponWarning(playerid)
{
	if(Player[playerid][AdminLevel] < 1)
	{
	    if(! IsPlayerInAnyVehicle(playerid))
	    {
			new string[128], WepName[128], Name[MAX_PLAYER_NAME];
			GetPlayerName(playerid, Name, sizeof(Name));
			GetWeaponName(GetPlayerWeapon(playerid), WepName, sizeof(WepName));
			format(string, sizeof(string), "WARNING: %s [ID: %d] may possibly be weapon hacking (%s).", Name, playerid, WepName);
			SendToAdmins(ADMINORANGE, string, 1);

			print(string);

			Player[playerid][AnticheatWarns]++;
			Player[playerid][ACWarnTime] = 1;

			if(Player[playerid][AnticheatWarns] >= MAX_WEAPON_HACK_WARNINGS)
			{
				AntiCheatBan(playerid);
			    Player[playerid][AnticheatWarns] = 0;
			    Player[playerid][ACWarnTime] = 0;
			}
		}
	}
}

public AntiC()
{
	if(CurrentEvent == 0)
	{
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnectedEx(i) && GetPlayerWeapon(i) > 1 && Player[i][AdminLevel] < 1 && IsPlayerSpawned(i))
		    {
		        if(Player[i][WepSlot1] != 2 && GetPlayerWeapon(i) == 2)
		        {
		            if(GetPlayerWeapon(i) == 2)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot1] != 3 && GetPlayerWeapon(i) == 3)
		        {
		            if(GetPlayerWeapon(i) == 3)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot1] != 4 && GetPlayerWeapon(i) == 4)
		        {
	           		AdminWeaponWarning(i);
		        }
		        else if(Player[i][WepSlot1] != 5 && GetPlayerWeapon(i) == 5)
		        {
		            if(GetPlayerWeapon(i) == 5)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot1] != 6 && GetPlayerWeapon(i) == 6)
		        {
		            if(GetPlayerWeapon(i) == 6)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot1] != 7 && GetPlayerWeapon(i) == 7)
		        {
		            if(GetPlayerWeapon(i) == 7)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot1] != 8 && GetPlayerWeapon(i) == 8)
		        {
		            if(GetPlayerWeapon(i) == 8)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot1] != 9 && GetPlayerWeapon(i) == 9)
		        {
		            if(GetPlayerWeapon(i) == 9)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }

		        if(Player[i][WepSlot2] != 22 && GetPlayerWeapon(i) == 22 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 22)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot2] != 23 && GetPlayerWeapon(i) == 23 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 23)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot2] != 24 && GetPlayerWeapon(i) == 24 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 24)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }

		        if(Player[i][WepSlot3] != 26 && GetPlayerWeapon(i) == 26 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 26)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot3] != 27 && GetPlayerWeapon(i) == 27 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 27)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }

		        if(Player[i][WepSlot4] != 28 && GetPlayerWeapon(i) == 28 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 28)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot4] != 29 && GetPlayerWeapon(i) == 29 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 29)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }

		        if(Player[i][WepSlot5] != 30 && GetPlayerWeapon(i) == 30 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 30)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot5] != 31 && GetPlayerWeapon(i) == 31 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 31)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }

		        if(Player[i][WepSlot6] != 33 && GetPlayerWeapon(i) == 33 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 33)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot6] != 34 && GetPlayerWeapon(i) == 34 && GetPlayerInterior(i) == 0)
		        {
		            if(GetPlayerWeapon(i) == 34)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }

		        if(Player[i][WepSlot7] != 35 && GetPlayerWeapon(i) == 35)
		        {
		            if(GetPlayerWeapon(i) == 35)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot7] != 36 && GetPlayerWeapon(i) == 36)
		        {
		            if(GetPlayerWeapon(i) == 36)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot7] != 37 && GetPlayerWeapon(i) == 37)
		        {
		            if(GetPlayerWeapon(i) == 37)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot7] != 38 && GetPlayerWeapon(i) == 38)
		        {
		            AntiCheatBan(i);
		        }

		        if(Player[i][WepSlot8] != 16 && GetPlayerWeapon(i) == 16)
		        {
		            if(GetPlayerWeapon(i) == 16)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot8] != 17 && GetPlayerWeapon(i) == 17)
		        {
		            if(GetPlayerWeapon(i) == 17)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot8] != 18 && GetPlayerWeapon(i) == 18)
		        {
		            if(GetPlayerWeapon(i) == 18)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot8] != 39 && GetPlayerWeapon(i) == 39)
		        {
		            if(GetPlayerWeapon(i) == 39)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }

		        if(Player[i][WepSlot9] != 41 && GetPlayerWeapon(i) == 41)
		        {
		            if(GetPlayerWeapon(i) == 41)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot9] != 42 && GetPlayerWeapon(i) == 42)
		        {
		            if(GetPlayerWeapon(i) == 42)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot9] != 43 && GetPlayerWeapon(i) == 43)
		        {
		            if(GetPlayerWeapon(i) == 43)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }

		        if(Player[i][WepSlot10] != 11 && GetPlayerWeapon(i) == 11)
		        {
		            if(GetPlayerWeapon(i) == 11)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot10] != 12 && GetPlayerWeapon(i) == 12)
		        {
		            if(GetPlayerWeapon(i) == 12)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot10] != 13 && GetPlayerWeapon(i) == 13)
		        {
		            if(GetPlayerWeapon(i) == 13)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot10] != 14 && GetPlayerWeapon(i) == 14)
		        {
		            if(GetPlayerWeapon(i) == 14)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot10] != 15 && GetPlayerWeapon(i) == 15)
		        {
		            if(GetPlayerWeapon(i) == 15)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }

		        if(Player[i][WepSlot11] != 44 && GetPlayerWeapon(i) == 44)
		        {
		            if(GetPlayerWeapon(i) == 44)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot11] != 45 && GetPlayerWeapon(i) == 45)
		        {
		            if(GetPlayerWeapon(i) == 45)
		            {
		            	AdminWeaponWarning(i);
		            }
		        }
		        else if(Player[i][WepSlot11] != 46 && GetPlayerWeapon(i) == 46)
		        {
		        	if(GetPlayerWeapon(i) == 46)
		        	{
			        	ResetPlayerWeapons(i);
			            GivePlayerSavedWeapons(i);
		            }
		        }
		    }
	    }
	}
	return 1;
}

stock ShowStatistics(playerid, id)
{
	if(Player[playerid][AdminLevel] >= Player[id][AdminLevel])
	{
		new string[128], GenderString[20], Rank[50], GroupString[128], phonestring[128], JobString[128], deg1[128], deg2[128], deg3[128], deg4[128], deg5[128];
		SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------------------------------------------------------------------------");

		if(Player[id][Gender] == 1)
		{
		    format(GenderString, sizeof(GenderString), "Male");
		}
		else
		{
		    format(GenderString, sizeof(GenderString), "Female");
		}
		
		if(Player[id][PhoneN] == -1)
		{
		    format(phonestring, sizeof(phonestring), "Phone Number: None");
		}
		else
		{
		    format(phonestring, sizeof(phonestring), "Phone Number: %d", Player[id][PhoneN]);
		}

		if(Player[id][Job] >= 1)
		{
		    format(JobString, sizeof(JobString), "%s", Jobs[Player[id][Job]]);
		}
		else
		{
		    format(JobString, sizeof(JobString), "Unemployed");
		}

		if(Player[id][Group] >= 1)
		{
		    format(GroupString, sizeof(GroupString), "%s", Groups[Player[id][Group]][GroupName]);
		}
		else
		{
		    format(GroupString, sizeof(GroupString), "None");
		}
		
		if(Player[id][CollegeMedia] >= 1)
		{
		    format(deg1, sizeof(deg1), "Qualified");
		}
		else
		{
		    format(deg1, sizeof(deg1), "UnQualified");
		}

		if(Player[id][CollegeLaw] >= 1)
		{
		    format(deg2, sizeof(deg2), "Qualified");
		}
		else
		{
		    format(deg2, sizeof(deg2), "UnQualified");
		}

		if(Player[id][CollegeEng] >= 1)
		{
		    format(deg3, sizeof(deg3), "Qualified");
		}
		else
		{
		    format(deg3, sizeof(deg3), "UnQualified");
		}

		if(Player[id][CollegeMath] >= 1)
		{
		    format(deg4, sizeof(deg4), "Qualified");
		}
		else
		{
		    format(deg4, sizeof(deg4), "UnQualified");
		}
		
		if(Player[id][PlayingHours] < 1)
		{
			format(Rank, sizeof(Rank), "%s", OOCRanks[Rank1]);
		}
		else if(Player[id][PlayingHours] >= 1 && Player[id][PlayingHours] < 25)
		{
			format(Rank, sizeof(Rank), "%s", OOCRanks[Rank2]);
		}
		else if(Player[id][PlayingHours] >= 25 && Player[id][PlayingHours] < 100)
		{
			format(Rank, sizeof(Rank), "%s", OOCRanks[Rank3]);
		}
		else if(Player[id][PlayingHours] >= 100 && Player[id][PlayingHours] < 300)
		{
			format(Rank, sizeof(Rank), "%s", OOCRanks[Rank4]);
		}
		else if(Player[id][PlayingHours] >= 300)
		{
			format(Rank, sizeof(Rank), "%s", OOCRanks[Rank5]);
		}
		
		if(Player[id][CollegeChem] >= 1)
		{
		    format(deg5, sizeof(deg5), "Qualified");
		}
		else
		{
		    format(deg5, sizeof(deg5), "UnQualified");
		}
	
		format(string, sizeof(string), "Name: %s | Age: %d | Gender: %s | Job: %s | Group: %s | Rank: %d", GetName(id), Player[id][Age], GenderString, JobString, GroupString, Player[id][GroupRank]);
		SendClientMessage(playerid, WHITE, string);

		if(Player[playerid][AdminLevel] >= 1)
		{
		    new IP[21], Float: Health, Float: Armour, ArmourMathFlaw, HealthMathFlaw;
		    GetPlayerHealth(id, Health);
		    GetPlayerArmour(id, Armour);
		    HealthMathFlaw = floatround(Health, floatround_ceil);
		    ArmourMathFlaw = floatround(Armour, floatround_ceil);
		    GetPlayerIp(id, IP, sizeof(IP));
			format(string, sizeof(string), "Admin Level: %d | Virtual World: %d | Interior: %d | Health: %d | Armour: %d | House: %d | IP: %s | Business: %d", Player[id][AdminLevel], GetPlayerVirtualWorld(id), GetPlayerInterior(id), HealthMathFlaw, ArmourMathFlaw, Player[id][House], IP, Player[id][Business]);
			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "ID: %d | Ping: %d", id, GetPlayerPing(id));
			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "First Warning: %s | Second Warning: %s | Third Warning: %s", Player[id][Warning1], Player[id][Warning2], Player[id][Warning3]);
			SendClientMessage(playerid, GREY, string);
			if(Player[id][PrisonDuration] >= 1)
			{
			    if(Player[id][PrisonID] == 1)
			    {
					format(string, sizeof(string), "Admin Actions: %s | Prison Time: %d minutes | Geographical Location: %s | Admin Name: %s | Normal Name: %s", IntToFormattedStr(Player[id][AdminActions]), SecondsToMinutes(Player[id][PrisonDuration]), GetPlayerCountryName(id), Player[id][AdminName], Player[id][NormalName]);
					SendClientMessage(playerid, GREY, string);
				}
				else
				{
					format(string, sizeof(string), "Admin Actions: %s | Jail Time: %d minutes | Geographical Location: %s | Admin Name: %s | Normal Name: %s", IntToFormattedStr(Player[id][AdminActions]), SecondsToMinutes(Player[id][PrisonDuration]), GetPlayerCountryName(id), Player[id][AdminName], Player[id][NormalName]);
					SendClientMessage(playerid, GREY, string);
				}
			}
			else
			{
				format(string, sizeof(string), "Admin Actions: %s | Geographical Location: %s | Admin Name: %s | Normal Name: %s", IntToFormattedStr(Player[id][AdminActions]), GetPlayerCountryName(id), Player[id][AdminName], Player[id][NormalName]);
				SendClientMessage(playerid, GREY, string);
			}
		}

		format(string, sizeof(string), "Playing Hours: %d | Bank Money: $%s | Cocaine: %s G | Pot: %s G | Materials: %s | %s | Fish: %s", Player[id][PlayingHours], IntToFormattedStr(Player[id][BankMoney]), IntToFormattedStr(Player[id][Cocaine]), IntToFormattedStr(Player[id][Pot]), IntToFormattedStr(Player[id][Materials]), phonestring, IntToFormattedStr(Player[id][CollectedFish]));
		SendClientMessage(playerid, WHITE, string);
		
		format(string, sizeof(string), "Money: $%s | Seconds Connected: %d | Phone Credit: $%s | Walkie Frequency: %d | Married To: %s", IntToFormattedStr(Player[id][Money]), Player[id][SecondsLoggedIn], IntToFormattedStr(Player[id][PhoneCredit]), Player[id][WalkieFrequency], Player[id][MarriedTo]);
		SendClientMessage(playerid, WHITE, string);
		
		format(string, sizeof(string), "Media Studies: %s | Civil Law: %s | English: %s | Maths: %s | Chemistry: %s", deg1, deg2, deg3, deg4, deg5);
		SendClientMessage(playerid, WHITE, string);

		format(string, sizeof(string), "Rope: %d | Rags: %d | Recorded Crimes: %d | Achievement Points: %d | Player Rank: %s", Player[id][Rope], Player[id][Rags], Player[id][CriminalOffences], Player[id][AchievementRank], Rank);
		SendClientMessage(playerid, WHITE, string);
		
		if(Player[playerid][AdminLevel] >= 1)
		{
			format(string, sizeof(string), "Vehicle 1: %d (%d) | Vehicle 2: %d (%d) | Vehicle 3: %d (%d)", Player[id][PlayerCarModel], Player[id][CarLinkID], Player[id][PlayerCarModel2], Player[id][Car2LinkID], Player[id][PlayerCarModel3], Player[id][Car3LinkID]);
			SendClientMessage(playerid, WHITE, string);
		}
		else
		{
			format(string, sizeof(string), "Vehicle 1: %d | Vehicle 2: %d | Vehicle 3: %d", Player[id][PlayerCarModel], Player[id][PlayerCarModel2], Player[id][PlayerCarModel3]);
			SendClientMessage(playerid, WHITE, string);
		}

		SendClientMessage(playerid, WHITE, "-------------------------------------------------------------------------------------------------------------------------------------");
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You can only view the statistics of a player that is a lower admin level, compared to you.");
	}
	return 1;
}

stock IsPlayerInRangeOfVehicle(playerid, vehicleid, Float: radius)
{
	new Float: CarPoX, Float: CarPoY, Float: CarPoZ;
	GetVehiclePos(vehicleid, CarPoX, CarPoY, CarPoZ);
	return IsPlayerInRangeOfPoint(playerid, radius, CarPoX, CarPoY, CarPoZ);
}

//--------------------------------------------------------------------------------------------------
command(stats, playerid, params[])
{
	#pragma unused params
	ShowStatistics(playerid, playerid);
	return 1;
}

command(usecocaine, playerid, params[])
{
	#pragma unused params
	
	if(Player[playerid][Cocaine] >= 5)
	{
	    if(Player[playerid][IsAtEvent] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "You're unable to use cocaine, whilst in an event.");
	    }
	    else
	    {
	    	if(Player[playerid][CrackEffect] != 1)
		    {
			    new string[128], MathsFlaw, Float: Armour;
			    Player[playerid][Cocaine] -= 5;
			    SendClientMessage(playerid, WHITE, "You have used 5 grams of cocaine.");

			    format(string, sizeof(string), "* %s has sniffed 5 grams of cocaine.", GetName(playerid));
			    NearByMessage(playerid, NICESKY, string);

			    Player[playerid][CrackEffect] = 1;

			    GetPlayerArmour(playerid, Armour);
				MathsFlaw = floatround(Armour, floatround_ceil);

				if(MathsFlaw < 100)
				{
			    	SetPlayerArmour(playerid, MathsFlaw+25);
			    }

			    GetPlayerArmour(playerid, Armour);
				MathsFlaw = floatround(Armour, floatround_ceil);

				if(MathsFlaw >= 100)
				{
				    SetPlayerArmour(playerid, 100);
				}

				Player[playerid][StonedEffect] = 1;
		        SetPlayerWeather(playerid, 9);
		        SetPlayerDrunkLevel(playerid, 40000);
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You are unable to sniff any more cocaine. Wait a while.");
		    }
	    }
	}
	return 1;
}

command(rage, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][VipRank] >= 1)
	{
		if(Player[playerid][ToggedRAGE] == 1)
		{
		    Player[playerid][ToggedRAGE] = 0;
		    SendClientMessage(playerid, WHITE, "You have disabled RAGE.");
		}
		else
		{
		    Player[playerid][ToggedRAGE] = 1;
		    SendClientMessage(playerid, WHITE, "You have enabled RAGE.");
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You're not a VIP!");
	}
	return 1;
}

command(usepot, playerid, params[])
{
	#pragma unused params

	if(Player[playerid][Pot] >= 5)
	{
	    if(Player[playerid][IsAtEvent] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "You're unable to use pot, whilst in an event.");
	    }
	    else
	    {
		    if(Player[playerid][PotEffect] != 1)
		    {
			    new string[128], MathsFlaw, Float: Health;

			    Player[playerid][Pot] -= 5;
			    SendClientMessage(playerid, WHITE, "You have used 5 grams of pot.");

			    format(string, sizeof(string), "* %s grabs their blunt and a lighter and proceeds to light the blunt.", GetName(playerid));
			    NearByMessage(playerid, NICESKY, string);

			    Player[playerid][PotEffect] = 1;

				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);

			    GetPlayerHealth(playerid, Health);
				MathsFlaw = floatround(Health, floatround_ceil);
			    SetPlayerHealth(playerid, MathsFlaw + 25);

			    if(MathsFlaw+25 >= 100)
			    {
			        SetPlayerHealth(playerid, 100);
			    }

			    Player[playerid][StonedEffect] = 1;

		        SetPlayerWeather(playerid, 9);
		        SetPlayerDrunkLevel(playerid, 10000);
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You are unable to use any more pot. Wait a while.");
		    }
	    }
	}
	return 1;
}

command(time, playerid, params[])
{
	#pragma unused params
	
	if(Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][IsAtEvent] >= 1)
	{
	    SendClientMessage(playerid, WHITE, "You're unable to execute this right now.");
	}
	else
	{
		new string[128], hour, minute, second;
		gettime(hour, minute, second);

		format(string, sizeof(string), "The current server time is %d:%d:%d (Montreal, Canada).", hour, minute, second);
		SendClientMessage(playerid, WHITE, string);

		format(string, sizeof(string), "%d minutes until your next paycheck!", SecondsToMinutes(3600-Player[playerid][SecondsLoggedIn]));
		SendClientMessage(playerid, GREY, string);

		if(Player[playerid][LawyerReloadTime] >= 1)
		{
		    format(string, sizeof(string), "%d seconds until you're able to defend another player.", LAWYER_RELOAD_TIME-Player[playerid][LawyerReloadTime]);
		}

		if(Player[playerid][StonedEffect] >= 1)
		{
			format(string, sizeof(string), "%d seconds until you're no longer stoned.", STONED_TIME-Player[playerid][StonedEffect]);
			SendClientMessage(playerid, GREY, string);
		}

		if(Player[playerid][CantFish] >= 1)
		{
			format(string, sizeof(string), "%d seconds until you can fish again.", FISH_INABILITY_TIME-Player[playerid][CantFish]);
			SendClientMessage(playerid, GREY, string);
		}

		if(Player[playerid][InabilityToDropCar] >= 1)
		{
			format(string, sizeof(string), "%d seconds until you can dropcar again.", 1800-Player[playerid][InabilityToDropCar]);
			SendClientMessage(playerid, GREY, string);
		}

		if(Player[playerid][MatrunInabilityDuration] >= 1)
		{
			format(string, sizeof(string), "%d seconds until you can matrun again.", MATRUN_INABILITY_TIME-Player[playerid][MatrunInabilityDuration]);
			SendClientMessage(playerid, GREY, string);
		}

	    ApplyAnimation(playerid, "PLAYIDLES", "time", 3.1, 0, 1, 1, 1, 1);
	    
    }
	return 1;
}

command(betauninvite, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /betauninvite [playerid]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            if(Player[id][Tester] >= 1)
	            {
	                Player[id][Tester] = 0;
	                format(string, sizeof(string), "You have been removed from the tester team by %s.", GetName(playerid));
	                SendClientMessage(id, GREY, string);

					format(string, sizeof(string), "You have uninvited %s from the testers team.", GetName(id));
					SendClientMessage(playerid, WHITE, string);
	            }
	            else
	            {
	                SendClientMessage(playerid, WHITE, "That player isn't a tester.");
	            }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player isn't connected or is not logged in.");
		    }
	    }
	}
	return 1;
}

command(betainvite, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /betainvite [playerid]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            if(Player[id][Tester] == 0)
	            {
		            SendClientMessage(id, ADMINORANGE, "You have been invited to participate in the Vortex Roleplay BETA programme.");
			        format(string, sizeof(string), "You have been invited by %s - please type /approve betainvite to participate.", GetName(playerid));
			        SendClientMessage(id, WHITE, string);
			        Player[id][PendingBETAInvite] = 1;

			        format(string, sizeof(string), "You have invited %s to participate in the BETA programme.", GetName(id));
			        SendClientMessage(playerid, WHITE, string);
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "That player is already a tester.");
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player isn't connected or is not logged in.");
		    }
	    }
	}
	return 1;
}

command(listtesters, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tester] >= 1)
	{
	    new string[128];
	    
	    SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");

		for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(Player[i][Tester] >= 1)
	        {
	            format(string, sizeof(string), "TESTER: %s", GetName(i));
	            SendClientMessage(playerid, GREY, string);
	        }
	    }
	    
	    SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
	    
	}
	return 1;
}

command(gotoplayerscar, playerid, params[])
{
	new id, vehid, string[128], Float: fCarX, Float: fCarY, Float: fCarZ;
	if(sscanf(params, "ud", id, vehid))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /gotoplayerscar [playerid] [1-3]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	        switch(vehid)
	        {
	            case 1:
	            {
			        if(Player[id][PlayerCarModel] >= 1)
			        {
			        	GetVehiclePos(Player[id][CarLinkID], fCarX, fCarY, fCarZ);
			        	SetPlayerPos(playerid, fCarX, fCarY, fCarZ);
			        	format(string, sizeof(string), "You have teleported to %s's vehicle (slot 1).", GetName(id));
			        	SendClientMessage(playerid, WHITE, string);
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "That player isn't currently using slot 1.");
			        }
				}
	            case 2:
	            {
			        if(Player[id][PlayerCarModel2] >= 1)
			        {
			        	GetVehiclePos(Player[id][Car2LinkID], fCarX, fCarY, fCarZ);
			        	SetPlayerPos(playerid, fCarX, fCarY, fCarZ);
			        	format(string, sizeof(string), "You have teleported to %s's vehicle (slot 2).", GetName(id));
			        	SendClientMessage(playerid, WHITE, string);
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "That player isn't currently using slot 2.");
			        }
				}
	            case 3:
	            {
			        if(Player[id][PlayerCarModel3] >= 1)
			        {
			        	GetVehiclePos(Player[id][Car3LinkID], fCarX, fCarY, fCarZ);
			        	SetPlayerPos(playerid, fCarX, fCarY, fCarZ);
			        	format(string, sizeof(string), "You have teleported to %s's vehicle (slot 3).", GetName(id));
			        	SendClientMessage(playerid, WHITE, string);
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "That player isn't currently using slot 3.");
			        }
	            }
	            default:
	            {
	                SendClientMessage(playerid, WHITE, "1-3 are valid slots.");
	            }
	        }
	    }
	}
	return 1;
}

command(remoteban, playerid, params[])
{
    if(Player[playerid][AdminLevel] >= 5) {
        if(isnull(params)) {
            return SendClientMessage(playerid, WHITE, "SYNTAX: /remoteban [name]");
        }
        else {
            new
                string[52]; // For the message broadcast string + file name storing.
                
            format(string, sizeof(string), "Accounts/%s.ini", params);
            
            if(fexist(string)) {
                if(dini_Int(string, "AdminLevel") >= Player[playerid][AdminLevel]) {
                    return SendClientMessage(playerid, WHITE, "You can't ban a higher level administrator (or equal to your rank).");
                }
                else {
        			dini_IntSet(string, "Banned", 2);
					dini_IntSet(string, "AdminLevel", 0);
			        format(string, sizeof(string), "You have remotely banned %s.", params);
			        SendClientMessage(playerid, WHITE, string);
			        format(string, sizeof(string), "%s has been remotely banned by %s.", params, GetName(playerid));
			        SendToAdmins(ADMINORANGE, string, 1);
			        BanLog(string);
		        	AdminActionsLog(string);
                }
            }
            else {
				return SendClientMessage(playerid, WHITE, "Account not found.");
			}
        }
	}
	return 1;
}

command(remotewiretransfer, playerid, params[])
{
	new Name[128], amount, string[128];
	if(sscanf(params, "dz", amount, Name))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /remotewiretransfer [amount] [name]");
	}
	else
	{
	    if(Player[playerid][GroupRank] >= 6)
	    {
		    format(string, sizeof(string), "Accounts/%s.ini", Name);

		    if(fexist(string))
		    {
		        if(dini_Int(string, "Banned") >= 1)
		        {
		            SendClientMessage(playerid, WHITE, "You can't transfer to a banned player.");
		        }
		        else
		        {
		            if(Player[playerid][BankMoney] >= amount)
		            {
			            new string2[128], Sum = dini_Int(string, "BankMoney");
			            Sum += amount;

			            dini_IntSet(string, "BankMoney", Sum);
			            format(string, sizeof(string), "%s has been remotely wiretransfered %s, by %s.", Name, IntToFormattedStr(amount), GetName(playerid));
			            SendToAdmins(ADMINORANGE, string, 1);
			            SendClientMessage(playerid, WHITE, string);
			            MoneyLog(string);
			            
			            Player[playerid][BankMoney] -= amount;
			            
			            format(string2, sizeof(string2), "%s has remotely wire transfered %s to you.", GetName(playerid), IntToFormattedStr(amount));
			            format(string, sizeof(string), "Accounts/%s.ini", Name);
						dini_Set(string, "Note", string2);
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "You do not have enough money.");
		            }
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Account not found.");
		    }
	    }
		else
		{
		    SendClientMessage(playerid, WHITE, "You're not a Group Leader.");
		}
    }
	return 1;
}

command(remoteprison, playerid, params[])
{
	new Name[128], minutes, string[128];
	if(sscanf(params, "dz", minutes, Name))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /remoteprison [minutes] [name]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
		    format(string, sizeof(string), "Accounts/%s.ini", Name);

		    if(fexist(string))
		    {
		        if(dini_Int(string, "AdminLevel") >= Player[playerid][AdminLevel])
		        {
		            SendClientMessage(playerid, WHITE, "You can't prison a higher level administrator (or equal to your rank).");
		        }
		        else
		        {
		            dini_IntSet(string, "PrisonDuration", MinutesToSeconds(minutes));
		            dini_IntSet(string, "PrisonID", 1);
		            format(string, sizeof(string), "You have remotely prisoned %s.", Name);
		            SendClientMessage(playerid, WHITE, string);
		            format(string, sizeof(string), "%s has been remotely prisoned by %s (%d minutes).", Name, GetName(playerid), minutes);
		            SendToAdmins(ADMINORANGE, string, 1);
		            AdminActionsLog(string);
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Account not found.");
		    }
	    }
	}
	return 1;
}

command(prison, playerid, params[])
{
	new id, string[128], time, Reason[128];
	if(sscanf(params, "udz", id, time, Reason))
	{
		if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /prison [playerid] [time] [reason]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            if(Player[playerid][AdminLevel] >= Player[id][AdminLevel])
	            {
			    	if(strlen(Reason) < 1)
			    	{
			        	SendClientMessage(playerid, WHITE, "SYNTAX: /prison [playerid] [time] [reason]");
			    	}
			    	else
			    	{
		       		    if(time == 0)
		       		    {
		       		        if(Player[id][PrisonDuration] >= 1)
		       		        {
								format(string, sizeof(string), "Prison: %s has been released from prison by %s, reason: %s.", GetName(id), Player[playerid][AdminName], Reason);
			       				SendClientMessageToAll(LIGHTRED, string);
					    		Player[id][PrisonDuration] = 0;
					    		AdminActionsLog(string);
				    		}
				    		else
				    		{
				    		    SendClientMessage(playerid, WHITE, "You can't release some-one who isn't even prisoned.");
				    		}
		       			}
		       			else
		       			{
							format(string, sizeof(string), "Prison: %s has been prisoned by %s, reason: %s (%d minutes).", GetName(id), Player[playerid][AdminName], Reason, time);
		       				SendClientMessageToAll(LIGHTRED, string);
				    		Player[id][PrisonDuration] = time*60;
				    		Player[id][PrisonID] = 1;
				    		AdminActionsLog(string);
				    		
				    		if(Player[id][AdminLevel] < 1)
				    		{
					    		Player[playerid][AdminActions]++;
					    		SendClientMessage(playerid, WHITE, "You have earned an admin action!");
				    		}

							if(IsPlayerInAnyVehicle(id))
							{
							    RemovePlayerFromVehicle(id);
							}
							
							ResetPlayerWeaponsEx(id);

			    			SetPlayerInterior(id, Prison1Int);
			    			SetPlayerPos(id, Prison1X, Prison1Y, Prison1Z);
			   	 			SetPlayerVirtualWorld(id, Prison1World);
		       			}
	       			}
	       		}
	       		else
	       		{
	       		    SendClientMessage(playerid, WHITE, "You can't prison a higher level admin.");
	       		}
	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, WHITE, "That player isn't connected or isn't logged in.");
	    	}
	    }
	}
	return 1;
}

command(knock, playerid, params[])
{
	#pragma unused params
	new string[128];
	for(new i = 0; i < sizeof(Houses); i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 3, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ]))
	    {
	        if(GetPlayerVirtualWorld(playerid) == 0)
	        {
	            for(new j = 0; j < MAX_PLAYERS; j++)
	            {
	                if(IsPlayerConnectedEx(j) && Player[j][InHouse] == i)
	                {
	                    SendClientMessage(j, NICESKY, "Somebody has knocked on the door!");
	                }
	            }
	            
	            format(string, sizeof(string), "* %s knocks on the door.", GetName(playerid));
	            NearByMessage(playerid, NICESKY, string);
	        }
	    }
	}
	return 1;
}

command(togglenewbie, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][AdminLevel] >= 2)
	{
		if(NewbieEnabled == 1)
		{
		    NewbieEnabled = 0;
		    format(string, sizeof(string), "%s has disabled Newbie Chat.", Player[playerid][AdminName]);
		    SendClientMessageToAll(LIGHTRED, string);
		    AdminActionsLog(string);
		}
		else
		{
		    NewbieEnabled = 1;
		    format(string, sizeof(string), "%s has enabled Newbie Chat.", Player[playerid][AdminName]);
		    SendClientMessageToAll(LIGHTRED, string);
		    AdminActionsLog(string);
		}
	}
	return 1;
}

command(newbie, playerid, params[])
{
	new
		string[128];
		
	if(isnull(params))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /n(ewbie) [message]");
	}
	else
	{
	    if(NewbieEnabled == 1)
	    {
	        if(Player[playerid][CanUseNewbie] == 1 && Player[playerid][Authenticated] >= 1)
	        {
	            if(Player[playerid][nMuted] >= 1)
	            {
	                SendClientMessage(playerid, WHITE, "You have been muted from this channel by an admin.");
	            }
	            else
	            {
		            if(Player[playerid][AdminDuty] == 0)
		            {
		                if(Player[playerid][VipRank] >= 1)
		                {
					        format(string, sizeof(string), "(( VIP %s says: %s )) ", GetName(playerid), params);
					    	SendClientMessageToAll(NEWBIE_CHAT, string);
					    	OOCChatLog(string);
		                }
		                else
						{
			                if(Player[playerid][PlayingHours] < 1)
			                {
					            format(string, sizeof(string), "(( %s %s: %s ))", OOCRanks[Rank1], GetName(playerid), params);
					            SendClientMessageToAll(NEWBIE_CHAT, string);
				            	Player[playerid][CanUseNewbie] = 0;
				            	SetTimerEx("RefreshNewbieChatForPlayer", 30000, false, "d", playerid);
			            	}
			            	else if(Player[playerid][PlayingHours] >= 1 && Player[playerid][PlayingHours] < 25)
			                {
					            format(string, sizeof(string), "(( %s %s: %s ))", OOCRanks[Rank2], GetName(playerid), params);
					            SendClientMessageToAll(NEWBIE_CHAT, string);
				            	Player[playerid][CanUseNewbie] = 0;
				            	SetTimerEx("RefreshNewbieChatForPlayer", 30000, false, "d", playerid);
			            	}
			            	else if(Player[playerid][PlayingHours] >= 25 && Player[playerid][PlayingHours] < 100)
			                {
					            format(string, sizeof(string), "(( %s %s: %s ))", OOCRanks[Rank3], GetName(playerid), params);
					            SendClientMessageToAll(NEWBIE_CHAT, string);
				            	Player[playerid][CanUseNewbie] = 0;
				            	SetTimerEx("RefreshNewbieChatForPlayer", 30000, false, "d", playerid);
			            	}
			            	else if(Player[playerid][PlayingHours] >= 100 && Player[playerid][PlayingHours] < 300)
			                {
					            format(string, sizeof(string), "(( %s %s: %s ))", OOCRanks[Rank4], GetName(playerid), params);
					            SendClientMessageToAll(NEWBIE_CHAT, string);
				            	Player[playerid][CanUseNewbie] = 0;
				            	SetTimerEx("RefreshNewbieChatForPlayer", 30000, false, "d", playerid);
			            	}
			            	else if(Player[playerid][PlayingHours] >= 300)
			                {
					            format(string, sizeof(string), "(( %s %s: %s ))", OOCRanks[Rank5], GetName(playerid), params);
					            SendClientMessageToAll(NEWBIE_CHAT, string);
				            	Player[playerid][CanUseNewbie] = 0;
				            	SetTimerEx("RefreshNewbieChatForPlayer", 30000, false, "d", playerid);
			            	}

			            	OOCChatLog(string);
						}
		            }
		            else
		            {
			            format(string, sizeof(string), "(( Server Admin %s: %s )) ", Player[playerid][AdminName], params);
			            SendClientMessageToAll(NEWBIE_CHAT, string);
		            }
		    	}
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "Please wait 30 seconds before submitting another message.");
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "Newbie Chat is currently unavailable.");
	    }
	}
	return 1;
}

command(phone, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][PhoneN] != -1)
	{
	    if(Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][PrisonDuration] >= 1 || Player[playerid][Tied] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "You can't do this right now.");
	    }
	    else
	    {
	        if(Player[playerid][PhoneN] != -1)
	        {
				ShowPlayerDialog(playerid, 4512, DIALOG_STYLE_LIST, "Phone Menu", "Account Related\nApplications\nNews\n", "Select", "Cancel");
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You need a mobile phone to use its menu.");
	}
	return 1;
}

command(n, playerid, params[])
{
	return cmd_newbie(playerid, params);
}

command(getmotd, playerid, params[])
{
	#pragma unused params
	new string[128];
    if(Player[playerid][Group] >= 1)
    {
        format(string, sizeof(string), "Group MOTD: %s", Groups[Player[playerid][Group]][MOTD]);
        SendClientMessage(playerid, ANNOUNCEMENT, string);
    }
    return 1;
}

command(notetoplayer, playerid, params[])
{
	new note[128], name[128], string[128];
	if(sscanf(params, "sz", name, note))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /notetoplayer [name] [note]");
		}
	}
	else
	{
	    if(strlen(name) >= 1 && strlen(note) >= 1)
	    {
		    if(Player[playerid][AdminLevel] >= 1)
		    {
		        format(string, sizeof(string), "Accounts/%s.ini", name);

		        if(fexist(string))
		        {
		            dini_Set(string, "Note", note);
		            format(string, sizeof(string), "You have set %s's note to %s.", name, note);
		            SendClientMessage(playerid, WHITE, string);

		            format(string, sizeof(string), "%s has set %s's offline note to %s.", GetName(playerid), name, note);
		            AdminActionsLog(string);
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "That account doesn't exist.");
		        }
		    }
	    }
	}
	return 1;
}

command(motd, playerid, params[])
{
	new NewMOTD[128], string[128];
	if(sscanf(params, "z", NewMOTD))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /motd [message of the day]");
	}
	else
	{
	    if(Player[playerid][Group] >= 1 && Player[playerid][GroupRank] >= 5)
	    {
	        if(strlen(NewMOTD) >= 1 && strlen(NewMOTD) < 60)
	        {
		        format(Groups[Player[playerid][Group]][MOTD], 128, "%s", NewMOTD);
		        format(string, sizeof(string), "You have changed your groups' MOTD to: %s.", NewMOTD);
		        SendClientMessage(playerid, WHITE, string);
		        format(string, sizeof(string), "The Group MOTD has been changed to: %s (by %s).", NewMOTD, GetName(playerid));
		        GroupMessage(playerid, ANNOUNCEMENT, string);
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "Your MOTD must be under 60 characters and more than 0.");
	        }
	    }
	}
	return 1;
}

command(changename, playerid, params[])
{
	new id, NewName[MAX_PLAYER_NAME];
	if(sscanf(params, "uz", id, NewName))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /changename [playerid] [new name]");
		}
	}
	else
	{
	    new NameStr[40], CurrentName[MAX_PLAYER_NAME], string[128];
	    
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	        if(Player[id][AdminLevel] >= 1 && Player[playerid][AdminLevel] < 5)
	        {
	            SendClientMessage(playerid, WHITE, "You must have permission from a level 5 to change another administrators' name.");
	        }
	        else
	        {
	            if(Player[playerid][AdminLevel] >= Player[id][AdminLevel])
	            {
		            if(strlen(NewName) >= 3 && strlen(NewName) < MAX_PLAYER_NAME)
		            {
		                GetPlayerName(id, CurrentName, sizeof(CurrentName));
		                //format(string, sizeof(string), "scriptfiles/Accounts/%s.ini", CurrentName);
		                format(NameStr, sizeof(NameStr), "Accounts/%s.ini", NewName);

		                if(fexist(NameStr))
		                {
		                    SendClientMessage(playerid, WHITE, "That account name is already registered.");
		                }
		                else
		                {
		                    format(Player[id][NormalName], MAX_PLAYER_NAME, "%s", NewName);

		                    //file_delete(string);
		                    fremove(NameStr);

	          			    SetPlayerName(id, NewName);

	          			    SavePlayerData(id);

	          			    format(string, sizeof(string), "WARNING: Server Admin %s has renamed %s to %s.", GetName(playerid), CurrentName, NewName);
			           		AdminActionsLog(string);
			           		NamechangeLog(string);
			           		SendToAdmins(ADMINORANGE, string, 1);

			           		if(Player[id][Business] >= 1 || Player[id][House] >= 1)
			           		{
			           		    if(strcmp(Businesses[Player[id][Business]][bOwner], CurrentName, true) == 0)
			           		    {
				           			format(Businesses[Player[id][Business]][bOwner], MAX_PLAYER_NAME, "%s", NewName);
				           		}

			           		    if(strcmp(Houses[Player[id][House]][hOwner], CurrentName, true) == 0)
			           		    {
				           			format(Houses[Player[id][House]][hOwner], 255, "%s", NewName);
				           		}
			           		}

			           		format(string, sizeof(string), "Your name has been changed from %s to %s, by %s.", CurrentName, NewName, Player[playerid][AdminName]);
			           		SendClientMessage(id, WHITE, string);

			           		SendClientMessage(id, GREY, "Don't worry about re-connecting, just don't forget to change your name in the connection client!");

							if(Player[id][ActiveReport] >= 1)
							{
							    Player[id][ActiveReport] = 0;
								Player[playerid][AdminActions]++;
								SendClientMessage(playerid, WHITE, "You have earned an action!");
							}

						}

		            }
		            else
		            {
		                format(string, sizeof(string), "Names must be 3 - %d characters in length.", MAX_PLAYER_NAME);
		                SendClientMessage(playerid, WHITE, string);
		            }
	            }
	        }
		}
	}
	return 1;
}

command(despawncar, playerid, params[])
{
	if(Player[playerid][AdminLevel] >= 3)
	{
	    new string[128];
	    
		for(new i = 0; i < SpawnedVehicles; i++)
		{
			if(AdminSpawned[i] == GetPlayerVehicleID(playerid))
			{
				AdminSpawned[i] = 0;
			}
		}
	    
    	SendClientMessage(playerid, WHITE, "Vehicle de-spawned.");
       	DestroyVehicle(GetPlayerVehicleID(playerid));
       	format(string, sizeof(string), "%s has de-spawned a vehicle.", GetName(playerid));
       	AdminActionsLog(string);
	}
   	return 1;
}

command(abandonbusiness, playerid, params[])
{
	new Confirmation[7];
	if(sscanf(params, "z", Confirmation))
	{
		SendClientMessage(playerid, WHITE, "Are you SURE you want to abandon your business? Please type /abandonbusiness confirm");
	}
	else
	{
	    if(strcmp(Confirmation, "Confirm", true) == 0)
	    {
			if(Player[playerid][Business] != 0)
			{
			    format(Businesses[Player[playerid][Business]][bOwner], 255, "Nobody");
				Businesses[Player[playerid][Business]][bLockStatus] = 1;
				SendClientMessage(playerid, WHITE, "You have now abandoned your business.");
				SaveBusiness(Player[playerid][Business]);
				Player[playerid][Business] = 0;
			}
		}
	}
	return 1;
}

command(abandonhouse, playerid, params[])
{
	new Confirmation[7];
	if(sscanf(params, "z", Confirmation))
	{
		SendClientMessage(playerid, WHITE, "Are you SURE you want to abandon your house? Please type /abandonhouse confirm");
	}
	else
	{
	    if(strcmp(Confirmation, "Confirm", true) == 0)
	    {
			if(Player[playerid][House] != 0)
			{
			    format(Houses[Player[playerid][House]][hOwner], 255, "Nobody");
				SendClientMessage(playerid, WHITE, "You have now abandoned your house.");
				SaveHouse(Player[playerid][House]);
			    DestroyDynamicPickup(Houses[Player[playerid][House]][HPickupID]);
				Houses[Player[playerid][House]][HPickupID] = CreateDynamicPickup(1273, 23, Houses[Player[playerid][House]][hExteriorX], Houses[Player[playerid][House]][hExteriorY], Houses[Player[playerid][House]][hExteriorZ], 0, -1, -1, 150.0);
				Player[playerid][House] = 0;
			}
		}
	}
	return 1;
}

command(buyhouse, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][House] == 0)
	{
		for(new h = 0; h < sizeof(Houses); h++)
		{
	    	if(IsPlayerInRangeOfPoint(playerid, 5, Houses[h][hExteriorX], Houses[h][hExteriorY], Houses[h][hExteriorZ]))
	    	{
	        	if(strcmp(Houses[h][hOwner], "Nobody", true) == 0)
				{
				    if(Houses[h][HousePrice] == -1)
				    {
				        SendClientMessage(playerid, WHITE, "This house isn't purchasable.");
				    }
				    else
				    {
				    	if(Player[playerid][Money] >= Houses[h][HousePrice])
				    	{
				        	Player[playerid][Money] -= Houses[h][HousePrice];
					        format(Houses[h][hOwner], 128, "%s", GetName(playerid));
					        format(string, sizeof(string), "Congratulations! You are now the owner of this property (House %d)", h);
					        SendClientMessage(playerid, ANNOUNCEMENT, string);
					        Player[playerid][House] = h;
			        	    DestroyDynamicPickup(Houses[h][HPickupID]);
							Houses[h][HPickupID] = CreateDynamicPickup(1272, 23, Houses[h][hExteriorX], Houses[h][hExteriorY], Houses[h][hExteriorZ], 0, -1, -1, 150.0);
					        SaveHouse(h);
					        SendClientMessage(playerid, WHITE, "By purchasing a house, you've unlocked a bunch of new commands; use /help to find them out!");
					    }
					    else
					    {
					        SendClientMessage(playerid, WHITE, "You do not have enough money to purchase this house.");
					    }
				    }
				}
				else
				{
				    SendClientMessage(playerid, WHITE, "Sorry, this house is not available!");
				}
	    	}
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You already have a house, type /abandonhouse.");
	}
	return 1;
}

command(spawnownedcar, playerid, params[])
{
	new id, vehslot, string[128];
	if(sscanf(params, "ud", id, vehslot))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /spawnownedcar [playerid] [1-3]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            switch(vehslot)
	            {
	                case 1:
	                {
			            if(Player[id][PlayerCarModel] >= 1)
			            {
						    if(Player[id][CarLinkID] >= 1)
						    {
						        DestroyVehicle(Player[id][CarLinkID]);
						        Player[id][CarLinkID] = 0;
						        OwnedCarCount--;
						        CarCount--;
						    }

						    SpawnOwnedCar(id, vehslot);

						    format(string, sizeof(string), "You have re-spawned %s's vehicle (slot %d)", GetName(id), vehslot);
						    SendClientMessage(playerid, WHITE, string);
			            }
	            	}
	                case 2:
	                {
			            if(Player[id][PlayerCarModel2] >= 1)
			            {
						    if(Player[id][Car2LinkID] >= 1)
						    {
						        DestroyVehicle(Player[id][Car2LinkID]);
						        Player[id][Car2LinkID] = 0;
						        OwnedCarCount--;
						        CarCount--;
						    }

						    SpawnOwnedCar(id, vehslot);

						    format(string, sizeof(string), "You have re-spawned %s's vehicle (slot %d)", GetName(id), vehslot);
						    SendClientMessage(playerid, WHITE, string);
			            }
		            }
	                case 3:
	                {
			            if(Player[id][PlayerCarModel3] >= 1)
			            {
						    if(Player[id][Car3LinkID] >= 1)
						    {
						        DestroyVehicle(Player[id][Car3LinkID]);
						        Player[id][Car3LinkID] = 0;
						        OwnedCarCount--;
						        CarCount--;
						    }

						    SpawnOwnedCar(id, vehslot);

						    format(string, sizeof(string), "You have re-spawned %s's vehicle (slot %d)", GetName(id), vehslot);
						    SendClientMessage(playerid, WHITE, string);
			            }
		            }
		    	}
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
		}
	}
	return 1;
}

command(swatinv, playerid, params[])
{
	#pragma unused params
	if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4)
	{
	    if(Player[playerid][GroupRank] >= 5)
	    {
			new string[65];
	        if(SWATEnabled == 0)
	        {
	            SWATEnabled = 1;
	            format(string, sizeof(string), "The SWAT inventory has been enabled by %s!", GetName(playerid));
	            GroupMessage(playerid, NICESKY, string);
	        }
	        else
	        {
	            SWATEnabled = 0;
	            format(string, sizeof(string), "The SWAT inventory has been disabled by %s!", GetName(playerid));
	            GroupMessage(playerid, NICESKY, string);
	        }
	    }
	}
	return 1;
}

command(buybusiness, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][Business] == 0)
	{
		for(new b = 0; b < sizeof(Businesses); b++)
		{
	    	if(IsPlayerInRangeOfPoint(playerid, 5, Businesses[b][bExteriorX], Businesses[b][bExteriorY], Businesses[b][bExteriorZ]))
	    	{
	        	if(strcmp(Businesses[b][bOwner], "Nobody", true) == 0)
				{
					if(Businesses[b][bPrice] == -1)
					{
					    SendClientMessage(playerid, WHITE, "This business isn't purchasable.");
					}
					else
					{
				    	if(Player[playerid][Money] >= Businesses[b][bPrice])
				    	{
				        	Player[playerid][Money] -= Businesses[b][bPrice];
					        format(Businesses[b][bOwner], MAX_PLAYER_NAME, "%s", GetName(playerid));
					        format(string, sizeof(string), "Congratulations! You are now the owner of %s.", Businesses[b][bName]);
					        SendClientMessage(playerid, ANNOUNCEMENT, string);
					        Player[playerid][Business] = b;
					        SaveBusiness(b);
					    }
					    else
					    {
					        SendClientMessage(playerid, WHITE, "You do not have enough money to purchase this business.");
					    }
				    }
				}
				else
				{
				    SendClientMessage(playerid, WHITE, "Sorry, this business is not available!");
				}
	    	}
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You already have a Business, type /abandonbusiness.");
	}
	return 1;
}

command(aw, playerid, params[])
{
	new id, Names[2][MAX_PLAYER_NAME];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /aw [playerid]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
		    if(IsPlayerConnected(id))
		    {
				GetPlayerName(id, Names[0], MAX_PLAYER_NAME);
				GetPlayerName(playerid, Names[1], MAX_PLAYER_NAME);
		    
		        new string[128];
		        format(string, sizeof(string), "You have warped %s to the Newbie Spawn.", GetName(id));
		        SendClientMessage(playerid, WHITE, string);
		        SetPlayerInterior(id, SpawnInt);
		        SetPlayerPos(id, SpawnX, SpawnY, SpawnZ);
		        SetPlayerVirtualWorld(id, 0);
		        format(string, sizeof(string), "%s has admin-warped you to the Newbie Spawn.", GetName(playerid));
		        SendClientMessage(id, WHITE, string);
		        
		        TextDrawHideForPlayer(id, ExitTextdraw);
		        
		        format(string, sizeof(string), "%s has been warped to the noob spawn by %s.", Names[0], Names[1]);
		        AdminActionsLog(string);
		    }
			else
			{
			    SendClientMessage(playerid, WHITE, "That player is not connected.");
			}
		}
	}
	return 1;
}

command(sellsupplies, playerid, params[])
{
	#pragma unused params
	if(Jobs[Player[playerid][Job]][JobType] == 5)
	{
		if(Player[playerid][SupplyT] >= 1)
		{
		    if(Businesses[Player[playerid][InBusiness]][bType] == 12 || Businesses[Player[playerid][InBusiness]][bType] == 1 || Businesses[Player[playerid][InBusiness]][bType] == 2 || Businesses[Player[playerid][InBusiness]][bType] == 3 || Businesses[Player[playerid][InBusiness]][bType] == 5)
		    {
		        if(Businesses[Player[playerid][InBusiness]][bVault] >= 1000)
		        {
		            if(Player[playerid][SupplyT] == Businesses[Player[playerid][InBusiness]][bType])
		            {
			        	Businesses[Player[playerid][InBusiness]][bVault] -= 250;
			        	Player[playerid][Money] += 250;
			        	Businesses[Player[playerid][InBusiness]][bSupplies] += 25;
			        	Player[playerid][SupplyT] = 0;
			        	SendClientMessage(playerid, WHITE, "You have earned $250 for delivering 25 supplies.");
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "You're not in the business you selected to deliver supplies to.");
			        }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "The business you're trying to sell to has insufficient safe funds (they need $1,000).");
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You're not in the business you selected to deliver supplies to.");
		    }
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You don't have any supplies.");
		}
	}
}

command(changejobmessage, playerid, params[])
{
	new string[128], jobid, id, name[128];
	if(sscanf(params, "ddz", jobid, id, name))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /changejobmessage [job id] [id (1-2)] [new name]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        format(string, sizeof(string), "Jobs/Job_%d.ini", jobid);

	        if(fexist(string))
	        {
	            switch(id)
	            {
	                case 1:
	                {
			            format(Jobs[jobid][JobMiscLocationOneMessage], 128, "%s", name);
			            dini_Set(string, "JobMiscLocationOneMessage", Jobs[jobid][JobMiscLocationOneMessage]);
			            format(string, sizeof(string), "You've changed message 1 with job %d's message to %s.", jobid, name);
			            SendClientMessage(playerid, WHITE, string);
					}
					
	                case 2:
	                {
			            format(Jobs[jobid][JobMiscLocationTwoMessage], 128, "%s", name);
			            dini_Set(string, "JobMiscLocationTwoMessage", Jobs[jobid][JobMiscLocationTwoMessage]);
			            format(string, sizeof(string), "You've changed message 2 with job %d's message to %s.", jobid, name);
			            SendClientMessage(playerid, WHITE, string);
					}
					
					default: SendClientMessage(playerid, WHITE, "SYNTAX: /changejobmessage [job id] [id (1-2)] [new name]");
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "Invalid Job ID.");
	        }
	    }
	}
	return 1;
}

command(changejobname, playerid, params[])
{
	new string[128], id, name[128];
	if(sscanf(params, "dz", id, name))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /changejobname [id] [new name]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        format(string, sizeof(string), "Jobs/Job_%d.ini", id);
	        
	        if(fexist(string))
	        {
	            format(Jobs[id][JobName], 128, "%s", name);
	            dini_Set(string, "JobName", Jobs[id][JobName]);
	            format(string, sizeof(string), "Job name changed to '%s'.", name);
	            SendClientMessage(playerid, WHITE, string);
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "Invalid Job ID.");
	        }
	    }
	}
	return 1;
}

command(gunname, playerid, params[])
{
	new value[128], results, strings[128];
	if(sscanf(params, "z", value))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /gunname [name/weaponid]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
		    SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
	        for(new i; i < sizeof(WeaponNames); i++)
	        {
	            if(strfind(WeaponNames[i], value, true) != -1)
	            {
				    if(results == 0)
				    {
	                    format(strings, sizeof(strings), "%s", WeaponNames[i]);
					}
					else
					{
					    format(strings, sizeof(strings), "%s, %s", strings, WeaponNames[i]);
					}

					results++;

	   				if(strlen(strings) > 118)
		   			{
					   SendClientMessage(playerid, WHITE, "Too many results found! Please search more specified!");
					   SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
					   return 1;
					}
	            }
	        }

			if(results == 0)
			{
			    SendClientMessage(playerid, WHITE, "Sorry, no weapons found.");
			    SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Results:");
				SendClientMessage(playerid, WHITE, strings);
				SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
			}
		}
	}
	return 1;
}

command(stopdrag, playerid, params[])
{
	#pragma unused params
	
	new string[73];
	
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnectedEx(i) && Player[i][BeingDraggedBy] == playerid)
	    {
	        format(string, sizeof(string), "* %s has stopped dragging %s.", GetName(playerid), GetName(i));
	        NearByMessage(playerid, NICESKY, string);
	        Player[i][BeingDraggedBy] = -1;
	    }
	}
	
	return 1;
}

command(drag, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /drag [playerid]");
	}
	else
	{
	    if(Player[id][Tied] >= 1 || Player[id][Cuffed] >= 1)
	    {
	        if(GetDistanceBetweenPlayers(playerid, id) < 7)
	        {
	            Player[id][BeingDraggedBy] = playerid;
				format(string, sizeof(string), "You have started to drag %s.", GetName(id));
	            SendClientMessage(playerid, WHITE, string);
	            format(string, sizeof(string), "* %s grabs ahold of %s and starts dragging them.", GetName(playerid), GetName(id));
	            NearByMessage(playerid, NICESKY, string);
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You're too far away!");
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "Your target has to be either tied or cuffed.");
	    }
	}
	return 1;
}

command(agiveweapon, playerid, params[])
{
	new WeaponN[60], Names[2][MAX_PLAYER_NAME], string[128], id, weaponid;
	if(sscanf(params, "ud", id, weaponid))
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /agiveweapon [playerid] [weaponid] (Special Weapon: 19 - Jetpack)");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
		    if(IsPlayerConnectedEx(id))
	    	{
	    	    if(weaponid >= 1 && weaponid < 47)
	    	    {
	    	    
					GetPlayerName(id, Names[0], MAX_PLAYER_NAME);
					GetPlayerName(playerid, Names[1], MAX_PLAYER_NAME);
					
	    	        if(weaponid == 19)
	    	        {
					    SetPlayerSpecialAction(id, SPECIAL_ACTION_USEJETPACK);
					    format(string, sizeof(string), "You have given %s a Jetpack (Weapon ID: 19).", GetName(id), weaponid);
		    			SendClientMessage(playerid, WHITE, string);
		    			format(string, sizeof(string), "You have been given a Jetpack, from %s.", GetName(playerid));
		    			SendClientMessage(id, WHITE, string);
		    			Player[id][HasJetpack] = 1;
		    			
		        		format(string, sizeof(string), "%s has been given weapon %d by %s.", Names[0], weaponid, Names[1]);
		        		AdminActionsLog(string);
	    	        }
	    	        else
	    	        {
				    	GetWeaponName(weaponid, WeaponN, sizeof(WeaponN));
					    GivePlayerWeaponEx(id, weaponid);
					    format(string, sizeof(string), "You have given %s a %s (Weapon ID: %d).", GetName(id), WeaponN, weaponid);
		    			SendClientMessage(playerid, WHITE, string);
		    			format(string, sizeof(string), "You have been given a %s, from %s.", WeaponN, GetName(playerid));
		    			SendClientMessage(id, WHITE, string);

		        		format(string, sizeof(string), "%s has been given weapon %d by %s.", Names[0], weaponid, Names[1]);
		        		AdminActionsLog(string);
	    			}
    			}
    			else
    			{
    			    SendClientMessage(playerid, WHITE, "Invalid weapon ID.");
    			}
	    	}
	    	else
	    	{
	    		SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    	}
	    }
	}
	return 1;
}

command(specoff, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 1)
	{
	    new string[128];
	    
		Spectator[playerid][SpecSpectatingPlayer] = -1;
		
		TogglePlayerSpectating(playerid, false);
		SetCameraBehindPlayer(playerid);
		
		SetPlayerInterior(playerid, Spectator[playerid][SpecPlayerInterior]);
		SetPlayerFacingAngle(playerid, Spectator[playerid][SpecPlayerAngle]);
		SetPlayerVirtualWorld(playerid, Spectator[playerid][SpecPlayerWorld]);
		SetPlayerPos(playerid, Spectator[playerid][SpecPlayerX], Spectator[playerid][SpecPlayerY], Spectator[playerid][SpecPlayerZ]);

		SendClientMessage(playerid, WHITE, "You've finished your session of spectating.");
		
		Player[playerid][Hospitalized] = -1;
		
		Player[playerid][PhoneStat] = 1;
		Player[playerid][ResetTimer] = 1;

		format(string, sizeof(string), "%s has finished spectating.", GetName(playerid));
		AdminActionsLog(string);
	}
	return 1;
}

command(businessname, playerid, params[])
{
	new Name[255], string[128];
	if(sscanf(params, "z", Name))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /businessname [New Name]");
	}
	else
	{
	    if(strlen(Name) >= 1 && strlen(Name) < 15)
	    {
	        if(strfind(Name, "~", true))
	        {
		        format(string, sizeof(string), "You have changed your business name to %s.", Name);
		        SendClientMessage(playerid, WHITE, string);
		        Businesses[Player[playerid][Business]][bName] = Name;
	        }
	        else
	        {
		        SendClientMessage(playerid, WHITE, "You may not use the '~' character.");
	        }
	        
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "Names must be shorter than 15 characters, and higher than 1 character.");
	    }
	}
	return 1;
}

command(spec, playerid, params[])
{
	new id, string[128], Float: health, Float: armour, healthf, armourf;
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /spec [playerid] (type /specoff to finish spectating)");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			if(IsPlayerConnectedEx(id))
			{
			    if(Spectator[playerid][SpecSpectatingPlayer] == -1)
			    {
					GetPlayerPos(playerid, Spectator[playerid][SpecPlayerX], Spectator[playerid][SpecPlayerY], Spectator[playerid][SpecPlayerZ]);
					GetPlayerFacingAngle(playerid, Spectator[playerid][SpecPlayerAngle]);
					Spectator[playerid][SpecPlayerWorld] = GetPlayerVirtualWorld(playerid);
					Spectator[playerid][SpecPlayerInterior] = GetPlayerInterior(playerid);
				}
		    	
		    	Player[playerid][PhoneStat] = 0;
		    	
			    format(string, sizeof(string), "You are now spectating Player %s.", GetName(id));
			    SendClientMessage(playerid, GREY, string);
			    GetPlayerHealth(id, health);
				GetPlayerArmour(id, armour);
				healthf = floatround(health, floatround_ceil);
				armourf = floatround(armour, floatround_ceil);
				
				SetPlayerInterior(playerid, GetPlayerInterior(id));
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(id));
				
			    format(string, sizeof(string), "Health: %d | Armour: %d | Money: %d", healthf, armourf, Player[id][Money]);
			    SendClientMessage(playerid, WHITE, string);
			    Spectator[playerid][SpecSpectatingPlayer] = id;
			    TogglePlayerSpectating(playerid, true);

			    if(IsPlayerInAnyVehicle(id))
				{
				    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(id));
				    Spectator[playerid][SpecSpectatingState] = 1;
				}
				else
				{
					PlayerSpectatePlayer(playerid, id);
					Spectator[playerid][SpecSpectatingState] = 2;
				}
				
			    Spectator[playerid][SpecSpectatingPlayer] = id;
			    SpectatorRefresh(playerid, id);
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
		}
	}
	return 1;
}

command(bar, playerid, params[])
{
	new id;
	if(sscanf(params, "d", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /bar [1-12]");
	}
	else
	{
	    if(Player[playerid][PrisonDuration] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Tied] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "You can't do this right now.");
	    }
	    else
	    {
		    switch(id)
		    {
		        case 1: ApplyAnimationEx(playerid, "BAR", "Barcustom_get", 3.1, 0, 1, 1, 1, 1);
		        case 2: ApplyAnimationEx(playerid, "BAR", "Barcustom_loop", 3.1, 1, 1, 1, 1, 1);
		        case 3: ApplyAnimationEx(playerid, "BAR", "Barcustom_order", 3.1, 0, 1, 1, 1, 1);
		        case 4: ApplyAnimationEx(playerid, "BAR", "BARman_idle", 3.1, 0, 1, 1, 1, 1);
		        case 5: ApplyAnimationEx(playerid, "BAR", "Barserve_bottle", 3.1, 0, 1, 1, 1, 1);
		        case 6: ApplyAnimationEx(playerid, "BAR", "Barserve_give", 3.1, 0, 1, 1, 1, 1);
		        case 7: ApplyAnimationEx(playerid, "BAR", "Barserve_glass", 3.1, 0, 1, 1, 1, 1);
		        case 8: ApplyAnimationEx(playerid, "BAR", "Barserve_in", 3.1, 0, 1, 1, 1, 1);
		        case 9: ApplyAnimationEx(playerid, "BAR", "Barserve_loop", 3.1, 1, 1, 1, 1, 1);
		        case 10: ApplyAnimationEx(playerid, "BAR", "Barserve_order", 3.1, 0, 1, 1, 1, 1);
		        case 11: ApplyAnimationEx(playerid, "BAR", "dnk_stndF_loop", 3.1, 1, 1, 1, 1, 1);
		        case 12: ApplyAnimationEx(playerid, "BAR", "dnk_stndM_loop", 3.1, 1, 1, 1, 1, 1);
		    }
		}
	}
	return 1;
}

command(hide, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][PrisonDuration] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Tied] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You can't do this right now.");
	}
	else
	{
		ApplyAnimationEx(playerid, "ped", "cower", 4.1, 0, 1, 1, 0, 0);
	}
	return 1;
}

command(handsup, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][IsAtEvent] >= 1)
	{
	    SendClientMessage(playerid, WHITE, "You're unable to do that at this time.");
	}
	else
	{
		if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][IsAtEvent] >= 1)
		{
			SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed or tied.");
		}
		else
		{
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
		}
	}
	return 1;
}

command(rap, playerid, params[])
{
	new id;
	if(sscanf(params, "d", id))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /rap [style: 1/2/3/4]");
	}
	else
	{
		if(Player[playerid][Tied] >= 1 || Player[playerid][IsAtEvent] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
		{
			SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
		}
	    else
	    {
		    switch(id)
		    {
				case 1: ApplyAnimationEx(playerid, "RAPPING", "RAP_A_Loop", 3.1, 1, 1, 1, 1, 1);
				case 2: ApplyAnimationEx(playerid, "RAPPING", "RAP_C_Loop", 3.1, 1, 1, 1, 1, 1);
				case 3: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkD", 3.1, 1, 1, 1, 1, 1);
				case 4: ApplyAnimationEx(playerid, "GANGS", "prtial_gngtlkH", 3.1, 1, 1, 1, 1, 1);
				default: SendClientMessage(playerid, WHITE, "SYNTAX: /rap [style: 1/2/3/4]");
		    }
	    }
	}
	return 1;
}

command(reload, playerid, params[])
{
    new id;
	if(sscanf(params, "d", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /reload [1/2]");
	}
	else
	{
	    switch(id)
	    {
	        case 1:
	        {
	            ApplyAnimationEx(playerid, "COLT45", "colt45_reload", 4.0, 0, 1, 1, 1, 1);
	        }
	        case 2:
	        {
	            ApplyAnimationEx(playerid, "UZI", "UZI_reload", 4.0, 0, 1, 1, 1, 1);
	        }
	    }
	}
	return 1;
}

command(laugh, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][IsAtEvent] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
	    ApplyAnimationEx(playerid, "RAPPING", "Laugh_01", 4.0, 1, 1, 1, 1, 1);
	}
	return 1;
}

command(dance, playerid, params[])
{
	new id;
	if(sscanf(params, "d", id))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /dance [style: 1/2/3/4]");
	}
	else
	{
		if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][IsAtEvent] >= 1)
		{
			SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
		}
	    else
	    {
		    switch(id)
		    {
				case 1:
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
					TextDrawShowForPlayer(playerid, AnimationTextDraw);
		    		Player[playerid][IsInAnimation] = 1;
				}
				case 2:
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
					TextDrawShowForPlayer(playerid, AnimationTextDraw);
		    		Player[playerid][IsInAnimation] = 1;
		    	}
				case 3:
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
					TextDrawShowForPlayer(playerid, AnimationTextDraw);
		    		Player[playerid][IsInAnimation] = 1;
		    	}
				case 4:
				{
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
					TextDrawShowForPlayer(playerid, AnimationTextDraw);
		    		Player[playerid][IsInAnimation] = 1;
		    	}
				default: SendClientMessage(playerid, WHITE, "SYNTAX: /dance [style: 1/2/3/4]");
		    }
	    }
	}
	return 1;
}

command(sit, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "PED", "SEAT_down", 3.1, 0, 1, 1, 1, 1);
	}
	return 1;
}

command(gsit, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "BEACH", "ParkSit_M_loop", 3.1, 0, 1, 1, 1, 1);
	}
	return 1;
}

command(fallback, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "PED", "FLOOR_hit_f", 3.1, 0, 1, 1, 1, 1);
	}
	return 1;
}

command(wave, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "ON_LOOKERS", "wave_loop", 3.1, 1, 1, 1, 1, 1);
	}
	return 1;
}

command(spank, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "SWEET", "sweet_ass_slap", 3.1, 0, 1, 1, 1, 1);
	}
	return 1;
}

command(middlefinger, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "PED", "fucku", 3.1, 0, 1, 1, 1, 1);
	}
	return 1;
}

command(chat, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "PED", "IDLE_CHAT", 3.1, 1, 1, 1, 1, 1);
	}
	return 1;
}

command(deal, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "DEALER", "DEALER_DEAL", 3.1, 1, 1, 1, 1, 1);
	}
	return 1;
}

command(vomit, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "FOOD", "EAT_Vomit_P", 3.1, 0, 1, 1, 1, 1);
	}
	return 1;
}

command(bomb, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "BOMBER", "BOM_Plant_Loop", 3.1, 0, 1, 1, 1, 1);
	}
	return 1;
}

command(crack, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 1, 1, 1, 1, 1);
	}
	return 1;
}

command(piss, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
	else
	{
		SetPlayerSpecialAction(playerid, 68);
		TextDrawShowForPlayer(playerid, AnimationTextDraw);
		Player[playerid][IsInAnimation] = 1;
	}
	return 1;
}

command(masturbate, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][IsAtEvent] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
	}
    else
    {
        ApplyAnimationEx(playerid, "PAULNMAC", "wank_loop", 4.1, 1, 1, 1, 1, 1);
    }
	return 1;
}

command(crossarms, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][IsAtEvent] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed or tied.");
	}
	else
	{
		ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_loop", 1, 1, 0, 0, 0, 0);
	}
	return 1;
}

command(robman, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][PrisonDuration] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Tied] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You can't do this right now.");
	}
	else
	{
		ApplyAnimationEx(playerid, "SHOP", "ROB_Loop_Threat", 4.1, 0, 1, 1, 0, 0);
	}
	return 1;
}

command(pedmove, playerid, params[])
{
	new id;
	if(sscanf(params, "d", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /pedmove [(1-10)]");
	}
	else
	{
	    if(Player[playerid][PrisonDuration] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Tied] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "You can't do this right now.");
	    }
	    else
	    {
		    switch(id)
		    {
		        case 1:
		        {
		            ApplyAnimationEx(playerid, "PED", "WOMAN_walksexy", 4.1, 1, 1, 1, 0, 0);
		        }
		        case 2:
		        {
		            ApplyAnimationEx(playerid, "PED", "WOMAN_walkold", 4.1,1,1,1,0,0);
		        }
		        case 3:
		        {
		            ApplyAnimationEx(playerid, "PED", "WOMAN_walknorm", 4.1,1,1,1,0,0);
		        }
		        case 4:
		        {
		            ApplyAnimationEx(playerid, "PED", "WOMAN_runfatold", 4.1,1,1,1,0,0);
		        }
		        case 5:
		        {
		            ApplyAnimationEx(playerid, "PED", "woman_runpanic", 4.1,1,1,1,0,0);
		        }
		        case 6:
		        {
		            ApplyAnimationEx(playerid, "PED", "WALK_drunk", 4.1,1,1,1,0,0);
		        }
		        case 7:
		        {
		            ApplyAnimationEx(playerid, "PED", "WALK_fat", 4.1,1,1,1,0,0);
		        }
		        case 8:
		        {
		            ApplyAnimationEx(playerid, "PED", "WALK_fatold", 4.1,1,1,1,0,0);
		        }
		        case 9:
		        {
		            ApplyAnimationEx(playerid, "PED", "WALK_csaw", 4.1,1,1,1,0,0);
		        }
		        case 10:
		        {
		            ApplyAnimationEx(playerid, "PED", "WALK_gang2", 4.1,1,1,1,0,0);
		        }
		        default:
		        {
		            SendClientMessage(playerid, WHITE, "SYNTAX: /pedmove [id (1-10)]");
		        }
	        }
	    }
	}
	return 1;
}

command(togpms, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][PMsEnabled] == 1)
	{
	    Player[playerid][PMsEnabled] = 0;
	    SendClientMessage(playerid, WHITE, "You have disabled PMs.");
	}
	else
	{
	    Player[playerid][PMsEnabled] = 1;
	    SendClientMessage(playerid, WHITE, "You have enabled PMs");
	}
	return 1;
}

command(listgroups, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 1)
	{
		new string[128];
		SendClientMessage(playerid, WHITE, "------------------------------------------------------------");
		for(new i = 0; i < MAX_GROUPS; i++)
		{
			format(string, sizeof(string), "Groups/Group_%d.ini", i);
			if(fexist(string))
			{
			    format(string, sizeof(string), "Name: %s (ID: %d) | Type: %d.", Groups[i][GroupName], i, Groups[i][CommandTypes]);
			    SendClientMessage(playerid, GREY, string);
			}
		}
		SendClientMessage(playerid, WHITE, "------------------------------------------------------------");
	}
	return 1;
}

command(donate, playerid, params[])
{
	new amount, string[128];
	if(sscanf(params, "d", amount))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /donate [amount]");
	}
	else
	{
	    if(Businesses[Player[playerid][InBusiness]][bType] == 8)
	    {
	        if(Player[playerid][Money] >= amount)
	        {
	            if(amount < 1)
	            {
	                SendClientMessage(playerid, WHITE, "SYNTAX: /donate [amount]");
	            }
	            else
	            {
	                Player[playerid][Money] -= amount;
	                Businesses[Player[playerid][InBusiness]][bVault] += amount;
	                format(string, sizeof(string), "You have donated $%d to this charity!", amount);
	                SendClientMessage(playerid, WHITE, string);
	                format(string, sizeof(string), "%s has donated $%d.", GetName(playerid), amount);
	                NearByMessage(playerid, NICESKY, string);
	                format(string, sizeof(string), "[BUSINESS DONATION] %s has donated %d to business %d (owned by %s).", amount, Player[playerid][InBusiness], Businesses[Player[playerid][InBusiness]][bOwner]);
	                MoneyLog(string);
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You don't have that much to donate.");
	        }
	    }
	}
	return 1;
}

command(changeplayercar, playerid, params[])
{
	new id, carid, vehslot, string[128];
	if(sscanf(params, "udd", id, carid, vehslot))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /changeplayercar [playerid] [carid] [1-3]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            switch(vehslot)
	            {
	                case 1:
	                {
			            if(carid >= 400 && carid < 611)
			            {
				            if(Player[id][PlayerCarModel] >= 1)
				            {
							    if(Player[id][CarLinkID] >= 1)
							    {
							        DestroyVehicle(Player[id][CarLinkID]);
							        Player[id][CarLinkID] = 0;
							        OwnedCarCount--;
							        CarCount--;
							    }

							    Player[playerid][OwnedCarModSlot0] = 0;
								Player[playerid][OwnedCarModSlot1] = 0;
								Player[playerid][OwnedCarModSlot2] = 0;
								Player[playerid][OwnedCarModSlot3] = 0;
								Player[playerid][OwnedCarModSlot4] = 0;
								Player[playerid][OwnedCarModSlot5] = 0;
								Player[playerid][OwnedCarModSlot6] = 0;
								Player[playerid][OwnedCarModSlot7] = 0;
								Player[playerid][OwnedCarModSlot8] = 0;
								Player[playerid][OwnedCarModSlot9] = 0;
								Player[playerid][OwnedCarModSlot10] = 0;
								Player[playerid][OwnedCarModSlot11] = 0;
								Player[playerid][OwnedCarModSlot12] = 0;
								Player[playerid][OwnedCarModSlot13] = 0;

							    Player[id][PlayerCarModel] = carid;
							    SpawnOwnedCar(id, 1);
							    format(string, sizeof(string), "You have changed %s's car model %d for their owned car (slot 1)", GetName(id), carid);
							    SendClientMessage(playerid, WHITE, string);
							}
							else
							{
							    Player[id][PlayerCarModel] = carid;
							    SpawnOwnedCar(id, 1);
							    format(string, sizeof(string), "You have given %s car model %d for their owned car (slot 1)", GetName(id), carid);
							    SendClientMessage(playerid, WHITE, string);
							}
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "Invalid car ID!");
						}
	                }
	                case 2:
	                {
			            if(carid >= 400 && carid < 611)
			            {
				            if(Player[id][PlayerCarModel2] >= 1)
				            {
							    if(Player[id][Car2LinkID] >= 1)
							    {
							        DestroyVehicle(Player[id][Car2LinkID]);
							        Player[id][Car2LinkID] = 0;
							        OwnedCarCount--;
							        CarCount--;
							    }

							    Player[playerid][Car2OwnedCarModSlot0] = 0;
								Player[playerid][Car2OwnedCarModSlot1] = 0;
								Player[playerid][Car2OwnedCarModSlot2] = 0;
								Player[playerid][Car2OwnedCarModSlot3] = 0;
								Player[playerid][Car2OwnedCarModSlot4] = 0;
								Player[playerid][Car2OwnedCarModSlot5] = 0;
								Player[playerid][Car2OwnedCarModSlot6] = 0;
								Player[playerid][Car2OwnedCarModSlot7] = 0;
								Player[playerid][Car2OwnedCarModSlot8] = 0;
								Player[playerid][Car2OwnedCarModSlot9] = 0;
								Player[playerid][Car2OwnedCarModSlot10] = 0;
								Player[playerid][Car2OwnedCarModSlot11] = 0;
								Player[playerid][Car2OwnedCarModSlot12] = 0;
								Player[playerid][Car2OwnedCarModSlot13] = 0;

							    Player[id][PlayerCarModel2] = carid;
							    SpawnOwnedCar(id, 2);
							    format(string, sizeof(string), "You have changed %s's car model %d for their owned car (slot 2)", GetName(id), carid);
							    SendClientMessage(playerid, WHITE, string);
							}
							else
							{
							    Player[id][PlayerCarModel2] = carid;
							    SpawnOwnedCar(id, 2);
							    format(string, sizeof(string), "You have given %s car model %d for their owned car (slot 2)", GetName(id), carid);
							    SendClientMessage(playerid, WHITE, string);
							}
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "Invalid car ID!");
						}
	                }
	                case 3:
	                {
			            if(carid >= 400 && carid < 611)
			            {
				            if(Player[id][PlayerCarModel3] >= 1)
				            {
							    if(Player[id][Car3LinkID] >= 1)
							    {
							        DestroyVehicle(Player[id][Car3LinkID]);
							        Player[id][Car3LinkID] = 0;
							        OwnedCarCount--;
							        CarCount--;
							    }

							    Player[playerid][Car3OwnedCarModSlot0] = 0;
								Player[playerid][Car3OwnedCarModSlot1] = 0;
								Player[playerid][Car3OwnedCarModSlot2] = 0;
								Player[playerid][Car3OwnedCarModSlot3] = 0;
								Player[playerid][Car3OwnedCarModSlot4] = 0;
								Player[playerid][Car3OwnedCarModSlot5] = 0;
								Player[playerid][Car3OwnedCarModSlot6] = 0;
								Player[playerid][Car3OwnedCarModSlot7] = 0;
								Player[playerid][Car3OwnedCarModSlot8] = 0;
								Player[playerid][Car3OwnedCarModSlot9] = 0;
								Player[playerid][Car3OwnedCarModSlot10] = 0;
								Player[playerid][Car3OwnedCarModSlot11] = 0;
								Player[playerid][Car3OwnedCarModSlot12] = 0;
								Player[playerid][Car3OwnedCarModSlot13] = 0;

							    Player[id][PlayerCarModel3] = carid;
							    SpawnOwnedCar(id, 3);
							    format(string, sizeof(string), "You have changed %s's car model %d for their owned car (slot 3)", GetName(id), carid);
							    SendClientMessage(playerid, WHITE, string);
							}
							else
							{
							    Player[id][PlayerCarModel3] = carid;
							    SpawnOwnedCar(id, 3);
							    format(string, sizeof(string), "You have given %s car model %d for their owned car (slot 3)", GetName(id), carid);
							    SendClientMessage(playerid, WHITE, string);
							}
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "Invalid car ID!");
						}
	                }
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	        }
	    }
	}
	return 1;
}

command(deployspikes, playerid, params[])
{
	#pragma unused params
	if(Groups[Player[playerid][Group]][CommandTypes] == 1)
	{
		new bool:breakingloop = false, newid = INVALID_OBJECT_ID, string[128];
		
	    for(new i=0;i<MAX_SPIKES;i++)
	    {
	        if(!breakingloop)
	        {
		        if(SpikeStrips[i][sX] == 0 && SpikeStrips[i][sY] == 0 && SpikeStrips[i][sZ] == 0) // Checking for next available ID.
		        {
					breakingloop = true;
					newid = i;
		        }
	        }
	    }
	    
	    if(newid != INVALID_OBJECT_ID)
	    {
		    GetPlayerPos(playerid, SpikeStrips[newid][sX], SpikeStrips[newid][sY], SpikeStrips[newid][sZ]);
		    GetPlayerFacingAngle(playerid, SpikeStrips[newid][sZRot]);
		    SpikeStrips[newid][sObjectID] = CreateObject(2899, SpikeStrips[newid][sX], SpikeStrips[newid][sY], SpikeStrips[newid][sZ]-0.8, 0.0, 0.0, SpikeStrips[newid][sZRot]);
		    format(string,sizeof(string),"Spike ID: %d successfully created.", newid);
		    SendClientMessage(playerid, WHITE, string);
	    }
	    else
	    {
		    SendClientMessage(playerid, WHITE, "Unable to spawn more strips, limit is 5.");
	    }
	}
	return 1;
}

command(destroyspikes, playerid, params[])
{
	new id, string[128];
	if (!sscanf(params, "i", id))
	{
        if(SpikeStrips[id][sX] == 0 && SpikeStrips[id][sY] == 0 && SpikeStrips[id][sZ] == 0)
        {
            return SendClientMessage(playerid, WHITE, "Invalid spike ID.");
        }
        else
        {
            DestroyObject(SpikeStrips[id][sObjectID]);
            SpikeStrips[id][sX] = 0; SpikeStrips[id][sY] = 0; SpikeStrips[id][sZ] = 0;
            SpikeStrips[id][sXRot] = 0; SpikeStrips[id][sYRot] = 0; SpikeStrips[id][sZRot] = 0;
            SpikeStrips[id][sObjectID] = INVALID_OBJECT_ID;
            format(string,sizeof(string),"Spike ID: %d successfully deleted.", id);
    		SendClientMessage(playerid, WHITE, string);
        }
	}
	else return SendClientMessage(playerid, WHITE, "SYNTAX: /destroyspikes [id]");
	return 1;
}

command(fingerprint, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /fingerprint [playerid]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 4 || Groups[Player[playerid][Group]][CommandTypes] == 1)
	    {
		    if(IsPlayerConnectedEx(id))
		    {
		        if(GetDistanceBetweenPlayers(id, playerid) < 7)
		        {
		            if(Player[id][Cuffed] >= 1)
		            {
		                new Name[2][MAX_PLAYER_NAME];

		                GetPlayerName(id, Name[0], MAX_PLAYER_NAME);
		                GetPlayerName(playerid, Name[1], MAX_PLAYER_NAME);

	                	if(Player[id][CriminalOffences] == 0)
	                	{
		                    format(string, sizeof(string), "* %s has grabbed ahold of %s's finger, placing it on the scanner.", Name[1], Name[0]);
		                    NearByMessage(playerid, NICESKY, string);
		                        
		                    SendClientMessage(playerid, WHITE, "--------------------------------------------------------------");
		               		SendClientMessage(playerid, GREY, "The PDA returns a null result.");
		                    SendClientMessage(playerid, WHITE, "--------------------------------------------------------------");
		               	}
		               	else
		               	{
	                        format(string, sizeof(string), "* %s has grabbed ahold of %s's finger, placing it on the scanner.", Name[1], Name[0]);
	                        NearByMessage(playerid, NICESKY, string);
	                        SendClientMessage(playerid, WHITE, "--------------------------------------------------------------");
	                        SendClientMessage(playerid, GREY, "The PDA returns a result, matching the entered print.");
	                        format(string, sizeof(string), "The print traces back to a %s.", Name[0]);
	                        SendClientMessage(playerid, GREEN, string);
	                        SendClientMessage(playerid, WHITE, "--------------------------------------------------------------");
		                }
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "You must cuff them, first.");
		            }
		        }
		        else
		        {
              		SendClientMessage(playerid, WHITE, "You're not close enough.");
		        }
		    }
	    }
	}
	return 1;
}

command(attempt, playerid, params[])
{
	new Message[128], string[128];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /attempt [action]");
	}
	else
	{
	    if(strlen(Message) < 1)
	    {
	        return 1;
	    }

		if(random(10) < 6)
		{
		    format(string, sizeof(string), "[ATTEMPT] * %s has attempted to %s, and succeeded.", GetName(playerid), Message);
			NearByMessage(playerid, NICESKY, string);
		}
		else
		{
		    format(string, sizeof(string), "[ATTEMPT] * %s has attempted to %s, but failed.", GetName(playerid), Message);
			NearByMessage(playerid, NICESKY, string);
		}
	}
	return 1;
}

command(buyid, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][InGroupHQ] == 3)
	{
	    if(Player[playerid][Money] >= 1000)
	    {
	        Player[playerid][Money] -= 1000;
	        Player[playerid][Identity]++;
			Groups[3][SafeMoney] += 1000;
	        SendClientMessage(playerid, WHITE, "You have successfully purchased some identification!");
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You must have at least $1,000.");
	    }
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You must be inside City Hall.");
	}
	
	return 1;
}

command(announce, playerid, params[])
{
	new Announcement[128], string[128];
	if(sscanf(params, "z", Announcement))
	{
		if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /announce [message]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			if(strlen(Announcement) >= 1)
			{
			    format(string, sizeof(string), "((Announcement from Server Admin %s: %s)) ", Player[playerid][AdminName], Announcement);
			    SendClientMessageToAll(LIGHTRED, string);
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "SYNTAX: /announce [message]");
			}
		}
	}
	return 1;
}

command(recordcrime, playerid, params[])
{
	new id, string[128], Crime[128];
	if(sscanf(params, "uz", id, Crime))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /recordcrime [playerid] [offence]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            if(strlen(Crime) < 1)
	            {
	                SendClientMessage(playerid, WHITE, "SYNTAX: /recordcrime [playerid] [offence]");
	            }
	            else
	            {
	                switch(GetPlayerWantedLevel(id))
	                {
	                    case 0:
	                    {
	                        SetPlayerWantedLevel(id, 1);
	                        format(Player[id][Offence1], 255, "%s", Crime);
	                        format(string, sizeof(string), "%s has been recorded for crime: %s, by %s.", GetName(id), Crime, GetName(playerid));
	                        GroupMessage(playerid, ANNOUNCEMENT, string);
	                        Player[id][CriminalOffences]++;
	                        SendClientMessage(id, WHITE, string);
	                    }
	                    case 1:
	                    {
	                        SetPlayerWantedLevel(id, 2);
	                        format(Player[id][Offence2], 255, "%s", Crime);
	                        format(string, sizeof(string), "%s has been recorded for crime: %s, by %s.", GetName(id), Crime, GetName(playerid));
	                        GroupMessage(playerid, ANNOUNCEMENT, string);
	                        Player[id][CriminalOffences]++;
	                        SendClientMessage(id, WHITE, string);
	                    }
	                    case 2:
	                    {
	                        SetPlayerWantedLevel(id, 3);
	                        format(Player[id][Offence3], 255, "%s", Crime);
	                        format(string, sizeof(string), "%s has been recorded for crime: %s, by %s.", GetName(id), Crime, GetName(playerid));
	                        GroupMessage(playerid, ANNOUNCEMENT, string);
	                        Player[id][CriminalOffences]++;
	                        SendClientMessage(id, WHITE, string);
	                    }
	                    case 3:
	                    {
	                        SetPlayerWantedLevel(id, 4);
	                        format(Player[id][Offence4], 255, "%s", Crime);
	                        format(string, sizeof(string), "%s has been recorded for crime: %s, by %s.", GetName(id), Crime, GetName(playerid));
	                        GroupMessage(playerid, ANNOUNCEMENT, string);
	                        Player[id][CriminalOffences]++;
	                        SendClientMessage(id, WHITE, string);
	                    }
	                    case 4:
	                    {
	                        SetPlayerWantedLevel(id, 5);
	                        format(Player[id][Offence5], 255, "%s", Crime);
	                        format(string, sizeof(string), "%s has been recorded for crime: %s, by %s.", GetName(id), Crime, GetName(playerid));
	                        GroupMessage(playerid, ANNOUNCEMENT, string);
	                        Player[id][CriminalOffences]++;
	                        SendClientMessage(id, WHITE, string);
	                    }
	                    case 5:
	                    {
	                        SetPlayerWantedLevel(id, 6);
	                        format(Player[id][Offence6], 255, "%s", Crime);
	                        format(string, sizeof(string), "%s has been recorded for crime: %s, by %s.", GetName(id), Crime, GetName(playerid));
	                        GroupMessage(playerid, ANNOUNCEMENT, string);
	                        Player[id][CriminalOffences]++;
	                        SendClientMessage(id, WHITE, string);
	                    }
	                    case 6:
	                    {
	                        SendClientMessage(playerid, WHITE, "That person already has 6 stars (maximum wanted level).");
	                    }
	                }
	        	}
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	        }
	    }
	}
	return 1;
}

command(wanted, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Groups[Player[playerid][Group]][CommandTypes] == 1)
	{
		SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerConnectedEx(i))
		    {
		        if(GetPlayerWantedLevel(i) >= 1)
		        {
		            format(string, sizeof(string), "%s is wanted with %d active offences.", GetName(i), GetPlayerWantedLevel(i));
		            SendClientMessage(playerid, ADMINORANGE, string);
		        }
		    }
		}
		SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
	}
	return 1;
}

command(joinjob, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][Job] < 1)
	{
		for(new h = 0; h < sizeof(Jobs); h++)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 5, Jobs[h][JobJoinPosX], Jobs[h][JobJoinPosY], Jobs[h][JobJoinPosZ]))
		    {
		        format(string, sizeof(string), "Congratulations. You have now become a %s.", Jobs[h][JobName]);
		        SendClientMessage(playerid, WHITE, string);
		        Player[playerid][Job] = h;
			}
		}
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You already have a job (type /quitjob first).");
	}
	return 1;
}

command(creategun, playerid, params[])
{
	#pragma unused params
	if(Jobs[Player[playerid][Job]][JobType] == 1)
	{
	    if(Player[playerid][PrisonDuration] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "You cannot do this right now.");
	    }
	    else
	    {
			ShowPlayerDialog(playerid, 969, DIALOG_STYLE_LIST, "Weapon Selection", "Katana (30 materials)\nCane (30 materials)\nPool Cue (33 materials)\nBaseball Bat (35 materials)\nShovel (50 materials)\nColt 45 (250 materials)\nSilenced Pistol (300 materials)\nPump Action Shotgun (550 materials)\nDesert Eagle (680 materials)\nMP5 (850 materials)\nMicro SMG (900 materials)\nAK-47 (1500 materials)\nM4A1 (2000 materials)\nSniper Rifle (2450 materials)\nCombat Shotgun (2550 materials)", "Select", "Cancel");
		}
	}
	return 1;
}

command(quitjob, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][Job] >= 1)
	{
	    if(Player[playerid][Checkpoint] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "Reach the checkpoint first, or re-connect.");
	    }
	    else
	    {
		    format(string, sizeof(string), "You have quit your job (%s).", Jobs[Player[playerid][Job]][JobName]);
		    SendClientMessage(playerid, WHITE, string);
		    Player[playerid][Job] = 0;
	    }
	}
	return 1;
}

command(getmats, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][InabilityToMatrun] >= 1)
	{
		SendClientMessage(playerid, WHITE, "Please wait the reload time, that is 1 minute.");
	}
	else
	{
		for(new h = 0; h < sizeof(Jobs); h++)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 5, Jobs[h][JobMiscLocationOneX], Jobs[h][JobMiscLocationOneY], Jobs[h][JobMiscLocationOneZ]))
		    {
		        if(Player[playerid][Job] == h && Jobs[Player[playerid][Job]][JobType] == 1)
		        {
		            if(Jobs[h][JobMiscLocationOneWorld] == GetPlayerVirtualWorld(playerid))
		            {
		                if(Player[playerid][Checkpoint] == 0)
		                {
		                    if(Player[playerid][Money] >= 1000)
		                    {
					            Player[playerid][Checkpoint] = 1;
					            Player[playerid][Money] -= 1000;
					            Player[playerid][CompleteRun] = 1;
					            SetPlayerCheckpoint(playerid, Jobs[h][JobMiscLocationTwoX], Jobs[h][JobMiscLocationTwoY], Jobs[h][JobMiscLocationTwoZ], 3.0);
					            Player[playerid][MaterialPackages] = 100;
					            SendClientMessage(playerid, WHITE, "You have collected 100 material packages. Deliver them to the red marker!");
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You need $1,000 to collect materials.");
					        }
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You already have an active checkpoint. Finish your matrun/car scrap first.");
				        }
			        }
		        }
			}
		}
	}
	return 1;
}

command(buyfightstyle, playerid, params[])
{
	if(Businesses[Player[playerid][InBusiness]][bType] == 10)
	{
	    ShowPlayerDialog(playerid, 4591, DIALOG_STYLE_LIST, "Fighting Styles", "Boxing ($500)\nKung Fu ($600)\nKneehead ($700)\nGrabkick ($800)\nElbow ($900)", "Select", "Cancel");
	}
	return 1;
}

command(usefightstyle, playerid, params[])
{
    ShowPlayerDialog(playerid, 4592, DIALOG_STYLE_LIST, "Fighting Styles", "Boxing\nKung Fu\nKneehead\nGrabkick\nElbow\nNormal", "Select", "Cancel");
    return 1;
}

command(cuff, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /cuff [playerid]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4)
	    {
	        if(Player[id][Tazed] == 1)
	        {
	            if(GetDistanceBetweenPlayers(playerid, id) < 7)
	            {
	                TogglePlayerControllable(id, false);
	                ApplyAnimation(id, "ped", "cower", 1, 1, 0, 0, 0, 0);
	            	Player[id][Cuffed] = 1;
	            	Player[id][Tazed] = 0;
	            	format(string, sizeof(string), "* %s has cuffed %s.", GetName(playerid), GetName(id));
	            	NearByMessage(playerid, NICESKY, string);
	            	format(string, sizeof(string), "You have cuffed %s.", GetName(id));
					SendClientMessage(playerid, WHITE, string);
	            	format(string, sizeof(string), "You have been cuffed by %s.", GetName(playerid));
					SendClientMessage(id, WHITE, string);
					TogglePlayerControllable(id, false);
	            }
	            else
	            {
	                SendClientMessage(playerid, WHITE, "You're too far away!");
	            }
	        }
	        else
	        {
	            if(GetDistanceBetweenPlayers(playerid, id) < 7)
	            {
	                if(GetPlayerSpecialAction(id) == SPECIAL_ACTION_HANDSUP)
	                {
	                    TogglePlayerControllable(id, false);
		                ApplyAnimation(id, "ped", "cower", 1, 1, 0, 0, 0, 0);
		            	Player[id][Cuffed] = 1;
		            	Player[id][Tazed] = 0;
		            	format(string, sizeof(string), "* %s has cuffed %s.", GetName(playerid), GetName(id));
		            	NearByMessage(playerid, NICESKY, string);
		            	format(string, sizeof(string), "You have cuffed %s.", GetName(id));
						SendClientMessage(playerid, WHITE, string);
		            	format(string, sizeof(string), "You have been cuffed by %s.", GetName(playerid));
						SendClientMessage(id, WHITE, string);
						TogglePlayerControllable(id, false);
	                }
	            }
	        }
	    }
	}
	return 1;
}

command(createjob, playerid, params[])
{
	new type, name[128], string[128];
	if(sscanf(params, "dz", type, name))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /createjob [type] [name]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        if(strlen(name) >= 1 && strlen(name) < 20)
	        {
	            SpawnedJobs++;
	            new id = SpawnedJobs++;
	            format(string, sizeof(string), "Jobs/Job_%d.ini", id);
	            dini_Create(string);

	            if(fexist(string))
	            {
		            format(Jobs[id][JobName], 255, "%s", name);
		            Jobs[id][JobJoinPosX] = 0.0;
		            Jobs[id][JobJoinPosY] = 0.0;
		            Jobs[id][JobJoinPosZ] = 0.0;
		            Jobs[id][JobJoinPosWorld] = 0;
		            Jobs[id][JobJoinPosInterior] = 0;

		            Jobs[id][JobMiscLocationOneX] = 0.0;
		            Jobs[id][JobMiscLocationOneY] = 0.0;
		            Jobs[id][JobMiscLocationOneZ] = 0.0;
		            Jobs[id][JobMiscLocationOneWorld] = 0;
		            format(Jobs[id][JobMiscLocationOneMessage], 255, "Nothing");

		            Jobs[id][JobMiscLocationTwoX] = 0.0;
		            Jobs[id][JobMiscLocationTwoY] = 0.0;
		            Jobs[id][JobMiscLocationTwoZ] = 0.0;
		            Jobs[id][JobMiscLocationTwoWorld] = 0;
		            format(Jobs[id][JobMiscLocationTwoMessage], 255, "Nothing");

		            Jobs[id][JobType] = type;

		            dini_Set(string, "JobName", Jobs[id][JobName]);
		            dini_FloatSet(string, "JobJoinPosX", Jobs[id][JobJoinPosX]);
		            dini_FloatSet(string, "JobJoinPosY", Jobs[id][JobJoinPosY]);
		            dini_FloatSet(string, "JobJoinPosZ", Jobs[id][JobJoinPosZ]);
		            dini_IntSet(string, "JobJoinPosWorld", Jobs[id][JobJoinPosWorld]);
		            dini_IntSet(string, "JobJoinPosInterior", Jobs[id][JobJoinPosInterior]);

		            dini_FloatSet(string, "JobMiscLocationOneX", Jobs[id][JobMiscLocationOneX]);
		            dini_FloatSet(string, "JobMiscLocationOneY", Jobs[id][JobMiscLocationOneY]);
		            dini_FloatSet(string, "JobMiscLocationOneZ", Jobs[id][JobMiscLocationOneZ]);
		            dini_IntSet(string, "JobMiscLocationOneWorld", Jobs[id][JobMiscLocationOneWorld]);
		            dini_IntSet(string, "JobMiscLocationOneInterior", Jobs[id][JobMiscLocationOneInterior]);
		            dini_Set(string, "JobMiscLocationOneMessage", Jobs[id][JobMiscLocationOneMessage]);

		            dini_FloatSet(string, "JobMiscLocationTwoX", Jobs[id][JobMiscLocationTwoX]);
		            dini_FloatSet(string, "JobMiscLocationTwoY", Jobs[id][JobMiscLocationTwoY]);
		            dini_FloatSet(string, "JobMiscLocationTwoZ", Jobs[id][JobMiscLocationTwoZ]);
		            dini_IntSet(string, "JobMiscLocationTwoWorld", Jobs[id][JobMiscLocationTwoWorld]);
		            dini_IntSet(string, "JobMiscLocationTwoInterior", Jobs[id][JobMiscLocationTwoInterior]);
		            dini_Set(string, "JobMiscLocationTwoMessage", Jobs[id][JobMiscLocationTwoMessage]);

					dini_IntSet(string, "JobType", Jobs[id][JobType]);

					format(string, sizeof(string), "You have created job %s (ID: %d) and set the type to %d (use /movejob to change the jobs locations).", name, id, type);
					SendClientMessage(playerid, WHITE, string);
				}
				else
				{
					SendClientMessage(playerid, WHITE, "An unexpected error has occured.");
				}
	        }
	    }
	}
	return 1;
}

command(home, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Checkpoint] >= 1)
	{
	    SendClientMessage(playerid, WHITE, "You already have an active checkpoint, please reach it or re-connect.");
	}
	else
	{
	    if(Player[playerid][House] >= 1)
	    {
		    Player[playerid][Checkpoint] = 1;
		    Player[playerid][FindingHouse] = 1;
		    SetPlayerCheckpoint(playerid, Houses[Player[playerid][House]][hExteriorX], Houses[Player[playerid][House]][hExteriorY], Houses[Player[playerid][House]][hExteriorZ], 40.0);
		    SendClientMessage(playerid, WHITE, "A checkpoint has been set to your house!");
	    }
	}
	return 1;
}

command(dropcar, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Checkpoint] >= 1)
	{
	    SendClientMessage(playerid, WHITE, "You already have an existing checkpoint, for a matrun or something else.");
	}
	else
	{
	    if(Player[playerid][InabilityToDropCar] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "Please wait the reload time, that is 30 minutes.");
	    }
	    else
	    {
		    if(IsPlayerInAnyVehicle(playerid))
		    {
				Player[playerid][Checkpoint] = 1;
			    SetPlayerCheckpoint(playerid, DropCarX, DropCarY, DropCarZ, 3.0);
			    SendClientMessage(playerid, WHITE, "Deliver your vehicle to the red checkpoint.");
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You must be in a vehicle to do this.");
		    }
	    }
	}
	return 1;
}

command(arrest, playerid, params[])
{
	new id, string[128], time, fine;
	if(sscanf(params, "udd", id, time, fine))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /arrest [playerid] [time (1 minute - 50 minutes)] [fine ($0 - $10000)");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 1)
	    {
	        if(fine < 10001 && fine >= 0)
	        {
	            if(time < 51)
	            {
					if(IsPlayerInRangeOfPoint(playerid, 5, ArrestPosX, ArrestPosY, ArrestPosZ))
					{
				    	if(GetDistanceBetweenPlayers(playerid, GetClosestPlayer(playerid))  < 5)
				    	{
				        	if(Player[GetClosestPlayer(playerid)][Cuffed] >= 1)
				        	{
				        	    if(GetPlayerWantedLevel(GetClosestPlayer(playerid)) >= 1)
				        	    {
				        	    	new ArrestedPlayer = GetClosestPlayer(playerid);
				            		Player[ArrestedPlayer][Money] -= fine;
				            		Groups[Player[playerid][Group]][SafeMoney] += fine;
				            		format(string, sizeof(string), "You have been arrested by %s. You have been given %d minutes jail time.", GetName(playerid), time);
				            		SendClientMessage(ArrestedPlayer, NICESKY, string);
				            		format(string, sizeof(string), "%s has arrested criminal %s, giving them %d minutes jail time.", GetName(playerid), GetName(ArrestedPlayer), time);
				            		GroupMessage(playerid, ANNOUNCEMENT, string);
		    						Player[ArrestedPlayer][PrisonDuration] = MinutesToSeconds(time);
		    						Player[ArrestedPlayer][PrisonID] = 2;
		    						Player[ArrestedPlayer][Cuffed] = 0;
		    						ResetPlayerWeaponsEx(ArrestedPlayer);

		    						ClearCriminalRecord(ArrestedPlayer);

		    						TogglePlayerControllable(ArrestedPlayer, true);

	    							SetPlayerInterior(ArrestedPlayer, Prison2Int);
	    							SetPlayerPos(ArrestedPlayer, Prison2X, Prison2Y, Prison2Z);
	   	 							SetPlayerVirtualWorld(ArrestedPlayer, Prison2World);
	   	 							
	   	 							SetPlayerArmour(ArrestedPlayer, 0);
	   	 						}
	   	 						else
	   	 						{
	   	 							SendClientMessage(playerid, WHITE, "You can't arrest someone who doesn't have a criminal record.");
	   	 						}
				        	}
				        	else
				        	{
				        	    SendClientMessage(playerid, WHITE, "The nearest player must be cuffed, in order to arrest them.");
				        	}
				   		}
			   		}
				}
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You can't fine for under $0, or over $10000.");
			}
	    }
	}
	return 1;
}

command(deliver, playerid, params[])
{
	#pragma unused params
	if(Businesses[Player[playerid][InBusiness]][bType] == 11)
	{
	    if(Player[playerid][Harvesting] == 7)
	    {
	        if(Businesses[Player[playerid][InBusiness]][bVault] >= 5000)
	        {
	            if(Businesses[Player[playerid][InBusiness]][bSupplyStatus] == 0)
	            {
		            Businesses[Player[playerid][InBusiness]][bSupplies] += 50;
		            Businesses[Player[playerid][InBusiness]][bVault] -= 5000;
		            Player[playerid][Money] += 5000;
		            Player[playerid][Harvesting] = 0;
		            SendClientMessage(playerid, WHITE, "You have finished the run and earned $5,000.");
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "This business isn't currently accepting deliveries.");
		        }
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You're not on a delivery.");
	    }
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You're not in a chemistry / pharmacy.");
	}
	return 1;
}

command(uncuff, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /uncuff [playerid]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] != 1 && Groups[Player[playerid][Group]][CommandTypes] != 4)
	    {
	        SendClientMessage(playerid, WHITE, "You're not a Law Enforcement Officer.");
	    }
	    else
	    {
	        if(id == playerid)
	        {
	            SendClientMessage(playerid, WHITE, "You're unable to do this right now.");
	        }
	        else
	        {
		        if(Player[id][Cuffed] >= 1)
		        {
		            if(GetDistanceBetweenPlayers(playerid, id) < 7)
		            {
		            	Player[id][Cuffed] = 0;
		            	format(string, sizeof(string), "You have been uncuffed by %s.", GetName(playerid));
		            	SendClientMessage(id, WHITE, string);
		            	format(string, sizeof(string), "* %s has uncuffed %s.", GetName(playerid), GetName(id));
		            	NearByMessage(playerid, NICESKY, string);
		            	format(string, sizeof(string), "You have uncuffed %s.", GetName(id));
		            	SendClientMessage(playerid, WHITE, string);
		            	TogglePlayerControllable(id, true);
		            	SetPlayerSpecialAction(id, SPECIAL_ACTION_NONE);
		            	ClearAnimations(id);
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "You're too far away!");
		            }
		        }
	        }
	    }
	}
	return 1;
}

command(elevator, playerid, params[])
{
	#pragma unused params
	if(IsPlayerInRangeOfPoint(playerid, 5, 276.0980, 122.1232, 1004.6172) || IsPlayerInRangeOfPoint(playerid, 5, 1572.0029, -1675.4127, 28.3955) || IsPlayerInRangeOfPoint(playerid, 5, 1568.6676, -1689.9708, 6.2188))
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4)
	    {
			ShowPlayerDialog(playerid, 3928, DIALOG_STYLE_LIST, "Elevator", "Rooftop Level\nInterior Level\nGarage Level", "Select", "Cancel");
		}
	}
	return 1;
}

command(go, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 1)
	{
		ShowPlayerDialog(playerid, 1529, DIALOG_STYLE_LIST, "Select a Location", "House Interiors\nRace Tracks\nCity Locations\nPopular Locations\nGym Interiors\nOther", "Select", "Cancel");
	}
	return 1;
}

command(showid, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /showid [playerid]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
		    if(GetDistanceBetweenPlayers(playerid, id) < 7)
		    {
			    if(Player[playerid][Identity] >= 1)
			    {
			        SendClientMessage(id, GREY, "---------------------------------------------------------------------------------------------------------------------------------");

					SendClientMessage(id, WHITE, "- Personal Identification, Registered Citizen of San Andreas. - ");
					format(string, sizeof(string), "Name: %s", GetName(playerid));
				    SendClientMessage(id, WHITE, string);
				    format(string, sizeof(string), "Age: %d", Player[playerid][Age]);
				    SendClientMessage(id, GREY, string);

				    if(Player[id][House] >= 1)
				    {
				        new location[MAX_ZONE_NAME];
						GetPlayer2DZone(playerid, location, MAX_ZONE_NAME);

					    format(string, sizeof(string), "Registered House Address: %d %s Road.", Player[id][Age], location);
					    SendClientMessage(id, GREY, string);
				    }

				    SendClientMessage(id, GREY, "---------------------------------------------------------------------------------------------------------------------------------");

					format(string, sizeof(string), "You have shown %s your identification.", GetName(id));
				    SendClientMessage(playerid, WHITE, string);
			    }
			    else
			    {
			        SendClientMessage(playerid, WHITE, "You need to buy an ID.");
			    }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You're too far away.");
		    }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player isn't connected or is not logged in.");
	    }
	}
	return 1;
}

command(resetplayer, playerid, params[])
{
    new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /resetplayer [playerid]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			Player[id][MatrunInabilityDuration] = 0;
			Player[id][InabilityToDropCar] = 0;
			Player[id][CantFish] = 0;
			Player[id][CarModDelay] = 0;
			Player[id][DetectiveCooldown] = 0;
		    format(string, sizeof(string), "You've reset %s's abillities.", GetName(id));
		    SendClientMessage(playerid, WHITE, string);
	    }
	}
	return 1;
}

command(movelocation, playerid, params[])
{
	new Location[128];
	if(sscanf(params, "z", Location))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /movelocation [usage]");
			SendClientMessage(playerid, GREY, "Prison, Jail, Spawn, LockerPos, Hospital, ArrestPos, BankInt, BankExt, OwnedCarSpawn");
	        SendClientMessage(playerid, GREY, "LockerPos2, Harvest1, Harvest2, Harvest3, Harvest4, Harvest5");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	    	if(strcmp(Location, "Prison", true) == 0)
	    	{
	        	GetPlayerPos(playerid, Prison1X, Prison1Y, Prison1Z);
	        	Prison1Int = GetPlayerInterior(playerid);
	        	Prison1World = GetPlayerVirtualWorld(playerid);
	        	
	        	dini_FloatSet("Assets.ini", "Prison1X", Prison1X);
	        	dini_FloatSet("Assets.ini", "Prison1Y", Prison1Y);
	        	dini_FloatSet("Assets.ini", "Prison1Z", Prison1Z);
	        	dini_IntSet("Assets.ini", "Prison1Int", Prison1Int);
	        	dini_IntSet("Assets.ini", "Prison1World", Prison1World);
	        	
	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the Prison location.");
	    	}
     	    else if(strcmp(Location, "Harvest1", true) == 0)
	    	{
	        	GetPlayerPos(playerid, Harvest1X, Harvest1Y, Harvest1Z);

	        	dini_FloatSet("Assets.ini", "Harvest1X", Harvest1X);
	        	dini_FloatSet("Assets.ini", "Harvest1Y", Harvest1Y);
	        	dini_FloatSet("Assets.ini", "Harvest1Z", Harvest1Z);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the Harvest1 location.");
	    	}
     	    else if(strcmp(Location, "Harvest2", true) == 0)
	    	{
	        	GetPlayerPos(playerid, Harvest2X, Harvest2Y, Harvest2Z);

	        	dini_FloatSet("Assets.ini", "Harvest2X", Harvest2X);
	        	dini_FloatSet("Assets.ini", "Harvest2Y", Harvest2Y);
	        	dini_FloatSet("Assets.ini", "Harvest2Z", Harvest2Z);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the Harvest2 location.");
	    	}
     	    else if(strcmp(Location, "Harvest3", true) == 0)
	    	{
	        	GetPlayerPos(playerid, Harvest3X, Harvest3Y, Harvest3Z);

	        	dini_FloatSet("Assets.ini", "Harvest3X", Harvest3X);
	        	dini_FloatSet("Assets.ini", "Harvest3Y", Harvest3Y);
	        	dini_FloatSet("Assets.ini", "Harvest3Z", Harvest3Z);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the Harvest3 location.");
	    	}
     	    else if(strcmp(Location, "Harvest4", true) == 0)
	    	{
	        	GetPlayerPos(playerid, Harvest4X, Harvest4Y, Harvest4Z);

	        	dini_FloatSet("Assets.ini", "Harvest4X", Harvest4X);
	        	dini_FloatSet("Assets.ini", "Harvest4Y", Harvest4Y);
	        	dini_FloatSet("Assets.ini", "Harvest4Z", Harvest4Z);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the Harvest4 location.");
	    	}
     	    else if(strcmp(Location, "Harvest5", true) == 0)
	    	{
	        	GetPlayerPos(playerid, Harvest5X, Harvest5Y, Harvest5Z);

	        	dini_FloatSet("Assets.ini", "Harvest5X", Harvest5X);
	        	dini_FloatSet("Assets.ini", "Harvest5Y", Harvest5Y);
	        	dini_FloatSet("Assets.ini", "Harvest5Z", Harvest5Z);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the Harvest5 location.");
	    	}
     	    else if(strcmp(Location, "OwnedCarSpawn", true) == 0)
	    	{
	        	GetPlayerPos(playerid, OwnedCarSpawnX, OwnedCarSpawnY, OwnedCarSpawnZ);

	        	dini_FloatSet("Assets.ini", "OwnedCarSpawnX", OwnedCarSpawnX);
	        	dini_FloatSet("Assets.ini", "OwnedCarSpawnY", OwnedCarSpawnY);
	        	dini_FloatSet("Assets.ini", "OwnedCarSpawnZ", OwnedCarSpawnZ);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the Owned Car Spawn location.");
	    	}
	    	else if(strcmp(Location, "BankExt", true) == 0)
	    	{
	        	GetPlayerPos(playerid, BankExtX, BankExtY, BankExtZ);
	        	
				DestroyDynamicPickup(BankPickupID);
				BankPickupID = CreateDynamicPickup(1239, 23, BankExtX, BankExtY, BankExtZ, 0, -1, -1, 150.0);
				
	        	dini_FloatSet("Assets.ini", "BankExtX", BankExtX);
	        	dini_FloatSet("Assets.ini", "BankExtY", BankExtY);
	        	dini_FloatSet("Assets.ini", "BankExtZ", BankExtZ);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the BankExt location.");
	    	}
	    	else if(strcmp(Location, "DropCar", true) == 0)
	    	{
	        	GetPlayerPos(playerid, DropCarX, DropCarY, DropCarZ);

	        	dini_FloatSet("Assets.ini", "DropCarX", DropCarX);
	        	dini_FloatSet("Assets.ini", "DropCarY", DropCarY);
	        	dini_FloatSet("Assets.ini", "DropCarZ", DropCarZ);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the DropCar location.");
	    	}
	    	else if(strcmp(Location, "BankInt", true) == 0)
	    	{
	        	GetPlayerPos(playerid, BankIntX, BankIntY, BankIntZ);
	        	BankIntID = GetPlayerInterior(playerid);

	        	dini_FloatSet("Assets.ini", "BankIntX", BankIntX);
	        	dini_FloatSet("Assets.ini", "BankIntY", BankIntY);
	        	dini_FloatSet("Assets.ini", "BankIntZ", BankIntZ);
	        	dini_IntSet("Assets.ini", "BankIntID", BankIntID);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the BankInt location.");
	    	}
	    	else if(strcmp(Location, "ArrestPos", true) == 0)
	    	{
	        	GetPlayerPos(playerid, ArrestPosX, ArrestPosY, ArrestPosZ);
	        	
	        	DestroyDynamicPickup(ArrestPosPickup);

	        	dini_FloatSet("Assets.ini", "ArrestPosX", ArrestPosX);
	        	dini_FloatSet("Assets.ini", "ArrestPosY", ArrestPosY);
	        	dini_FloatSet("Assets.ini", "ArrestPosZ", ArrestPosZ);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the ArrestPos location.");

				ArrestPosPickup = CreateDynamicPickup(1239, 23, ArrestPosX, ArrestPosY, ArrestPosZ, 0, -1, -1, 150.0);
			}
	    	else if(strcmp(Location, "Jail", true) == 0)
	    	{
	        	GetPlayerPos(playerid, Prison2X, Prison2Y, Prison2Z);
	        	Prison2Int = GetPlayerInterior(playerid);
	        	Prison2World = GetPlayerVirtualWorld(playerid);

	        	dini_FloatSet("Assets.ini", "Prison2X", Prison2X);
	        	dini_FloatSet("Assets.ini", "Prison2Y", Prison2Y);
	        	dini_FloatSet("Assets.ini", "Prison2Z", Prison2Z);
	        	dini_IntSet("Assets.ini", "Prison2Int", Prison2Int);
	        	dini_IntSet("Assets.ini", "Prison2World", Prison2World);
	        	
	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the Jail location.");
	    	}
	    	else if(strcmp(Location, "Hospital", true) == 0)
	    	{
	        	GetPlayerPos(playerid, HospitalSpawnX, HospitalSpawnY, HospitalSpawnZ);
	        	HospitalInt = GetPlayerInterior(playerid);

	        	dini_FloatSet("Assets.ini", "HospitalSpawnX", HospitalSpawnX);
	        	dini_FloatSet("Assets.ini", "HospitalSpawnY", HospitalSpawnY);
	        	dini_FloatSet("Assets.ini", "HospitalSpawnZ", HospitalSpawnZ);
	        	dini_IntSet("Assets.ini", "HospitalInt", HospitalInt);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the Hospital.");
	    	}
	    	else if(strcmp(Location, "LockerPos2", true) == 0)
	    	{
	        	GetPlayerPos(playerid, LockerPos2X, LockerPos2Y, LockerPos2Z);
	        	LockerPos2Int = GetPlayerInterior(playerid);

	    		dini_FloatSet("Assets.ini", "LockerPos2X", LockerPos2X);
	    		dini_FloatSet("Assets.ini", "LockerPos2Y", LockerPos2Y);
	    		dini_FloatSet("Assets.ini", "LockerPos2Z", LockerPos2Z);
	    		dini_IntSet("Assets.ini", "LockerPos2Int", LockerPos2Int);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the LockerPos2 location.");
	    	}
	    	else if(strcmp(Location, "LockerPos", true) == 0)
	    	{
	        	GetPlayerPos(playerid, LockerPosX, LockerPosY, LockerPosZ);
	        	LockerPosInt = GetPlayerInterior(playerid);

	    		dini_FloatSet("Assets.ini", "LockerPosX", LockerPosX);
	    		dini_FloatSet("Assets.ini", "LockerPosY", LockerPosY);
	    		dini_FloatSet("Assets.ini", "LockerPosZ", LockerPosZ);
	    		dini_IntSet("Assets.ini", "LockerPosInt", LockerPosInt);

	        	SendClientMessage(playerid, WHITE, "You have successfully re-located the LockerPos location.");
	    	}
	    	else if(strcmp(Location, "Spawn", true) == 0)
	    	{
	    		GetPlayerPos(playerid, SpawnX, SpawnY, SpawnZ);

	    		SpawnInt = GetPlayerInterior(playerid);
	    		SpawnWorld = GetPlayerVirtualWorld(playerid);

	    		dini_FloatSet("Spawn.ini", "SpawnX", SpawnX);
	    		dini_FloatSet("Spawn.ini", "SpawnY", SpawnY);
	    		dini_FloatSet("Spawn.ini", "SpawnZ", SpawnZ);
	    		dini_IntSet("Spawn.ini", "SpawnInt", SpawnInt);
	    		dini_IntSet("Spawn.ini", "SpawnWorld", SpawnWorld);
	    		SendClientMessage(playerid, WHITE, "You have successfully re-located the Spawn location.");
	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, WHITE, "Invalid location.");
	    	}
	    }
	}
	return 1;
}

command(lsfmd, playerid, params[])
{
	#pragma unused params
	if(Groups[Player[playerid][Group]][CommandTypes] == 3)
	{
	    if(Player[playerid][InGroupHQ] == 4)
	    {
		    ShowPlayerDialog(playerid, 9864, DIALOG_STYLE_LIST, "LSFMD Menu", "Toggle Duty\nClothing\nEquipment", "Select", "Cancel");
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You have to be inside your HQ.");
		}
	}
	return 1;
}

command(toggleradio, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][HasRadio] >= 1)
	{
	    if(Player[playerid][ToggledRadio] == 1)
	    {
	        Player[playerid][ToggledRadio] = 0;
	        SendClientMessage(playerid, WHITE, "You have switched your radio off.");
	    }
	    else
	    {
	        Player[playerid][ToggledRadio] = 1;
	        SendClientMessage(playerid, WHITE, "You have switched your radio on.");
	    }
	}
	return 1;
}

command(radiomessage, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /(r)adio(m)essage [message]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 5 || Player[playerid][InterviewPowers] == 1)
	    {
	        format(string, sizeof(string), "[%s] %s: %s", Groups[Player[playerid][Group]][GroupName], GetName(playerid), message);
	        
	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnectedEx(i) && IsPlayerInAnyVehicle(i) && Player[playerid][ToggledRadio] == 1 || Player[playerid][PortableRadio] == 1)
	            {
	                SendClientMessage(i, ORANGE, string);
	            }
	        }
	        
	        NearByMessage(playerid, ORANGE, string);
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You're not a radio presenter.");
	    }
	}
	return 1;
}

command(rm, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /(r)adio(m)essage [message]");
	}
	else
	{
	    if(Player[playerid][Group] == 5 || Player[playerid][InterviewPowers] >= 1)
	    {
	        format(string, sizeof(string), "[%s] %s: %s", Groups[Player[playerid][Group]][GroupName], GetName(playerid), message);

	        for(new i = 0; i < MAX_PLAYERS; i++)
	        {
	            if(IsPlayerConnectedEx(i) && IsPlayerInAnyVehicle(i) && Player[i][ToggledRadio] == 1 || Player[i][PortableRadio] == 1)
	            {
	                SendClientMessage(i, ORANGE, string);
	            }
	        }

	        NearByMessage(playerid, ORANGE, string);
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You're not a radio presenter.");
	    }
	}
	return 1;
}

command(grantinterviewpowers, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /grantinterviewpowers [playerid]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
	        if(Player[playerid][Group] == 5)
	        {
		        if(Player[id][InterviewPowers] == 1)
		        {
		            format(string, sizeof(string), "You have removed %s' interview powers.", GetName(id));
		            SendClientMessage(playerid, WHITE, string);
					Player[id][InterviewPowers] = 0;
		            format(string, sizeof(string), "You have been removed of tempoary interview powers by %s.", GetName(playerid));
	                SendClientMessage(id, WHITE, string);
		        }
		        else
		        {
		            format(string, sizeof(string), "You have granted %s' interview powers.", GetName(id));
		            Player[id][InterviewPowers] = 1;
		            SendClientMessage(playerid, WHITE, string);
		            format(string, sizeof(string), "You have been given tempoary interview powers by %s.", GetName(playerid));
	                SendClientMessage(id, WHITE, string);
				}
		    }
	    }
	}
	return 1;
}

command(detain, playerid, params[])
{
	new id, seat, string[128];
	if(sscanf(params, "ud", id, seat))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /detain [playerid] [seat (1-3)]");
	}
	else
	{
	    if(Player[id][Cuffed] >= 1 || Player[id][Tied] >= 1)
	    {
	        if(seat >= 3 && seat < 1)
	        {
	            SendClientMessage(playerid, WHITE, "Seat ID's vary from 1-3");
	        }
	        else
	        {
	            if(GetDistanceBetweenPlayers(playerid, id) < 5)
	            {
	                if(IsSeatOccupied(Player[playerid][LastCarID], seat) > 0)
	                {
	                    SendClientMessage(playerid, WHITE, "That seat ID is occupied!");
	                }
	                else
	                {
	             		PutPlayerInVehicle(id, Player[playerid][LastCarID], seat);
		                format(string, sizeof(string), "* %s has been detained into the vehicle by %s.", GetName(id), GetName(playerid));
						NearByMessage(playerid, NICESKY, string);
					}
	            }
	            else
	            {
	                SendClientMessage(playerid, WHITE, "You're too far away from another player.");
	            }
	        }
	    }
	}
	return 1;
}

command(listgroup, playerid, params[])
{
	new groupnumber, string[128];
	if(sscanf(params, "d", groupnumber))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /listgroup [group ID]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
		    if(groupnumber >= MAX_GROUPS || groupnumber < 1)
		    {
		        SendClientMessage(playerid, WHITE, "Invalid Group ID!");
		    }
		    else
		    {
				format(string, sizeof(string), "-------------------- %s. --------------------", Groups[groupnumber][GroupName]);
                SendClientMessage(playerid, WHITE, string);
				for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(IsPlayerConnectedEx(i) && Player[i][Group] == groupnumber)
		            {
				        switch(Player[i][GroupRank])
				        {
			    			case 0:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (0)", GetName(i), Groups[Player[i][Group]][RankName0]);
							}
							case 1:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (1)", GetName(i), Groups[Player[i][Group]][RankName1]);
							}
							case 2:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (2)", GetName(i), Groups[Player[i][Group]][RankName2]);
							}
							case 3:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (3)", GetName(i), Groups[Player[i][Group]][RankName3]);
							}
							case 4:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (4)", GetName(i), Groups[Player[i][Group]][RankName4]);
							}
							case 5:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (5)", GetName(i), Groups[Player[i][Group]][RankName5]);
							}
							case 6:
							{
								format(string, sizeof(string), "Name: %s | Rank: %s (6)", GetName(i), Groups[Player[i][Group]][RankName6]);
							}
						}

		                SendClientMessage(playerid, WHITE, string);
		            }
		        }
				format(string, sizeof(string), "-------------------- %s. --------------------", Groups[groupnumber][GroupName]);
                SendClientMessage(playerid, WHITE, string);
			}
	    }
	}
	return 1;
}

command(takecourse, playerid, params[])
{
	#pragma unused params
	if(Businesses[Player[playerid][InBusiness]][bType] == 7)
	{
	    new string[128];
		new price1 = Businesses[Player[playerid][InBusiness]][bProductPrice1];
        new price2 = Businesses[Player[playerid][InBusiness]][bProductPrice2];
        new price3 = Businesses[Player[playerid][InBusiness]][bProductPrice3];
        new price4 = Businesses[Player[playerid][InBusiness]][bProductPrice4];
        new price5 = Businesses[Player[playerid][InBusiness]][bProductPrice5];
	    format(string, sizeof(string), "Media Studies ($%d)\nCivil Law Degree ($%d)\nEnglish Degree ($%d)\nMathematics Degree ($%d)\nChemistry Degree ($%d)\n", price1, price2, price3, price4, price5);
		ShowPlayerDialog(playerid, 1230, DIALOG_STYLE_LIST, "Course List", string, "Select", "Cancel");
	}
	return 1;
}

command(g, playerid, params[])
{
	new Message[128], string[128];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /g(roup) [message]");
	}
	else
	{
	    if(Player[playerid][Group] >= 1)
	    {
		    if(strlen(Message) < 1 || !IsPlayerConnectedEx(playerid))
		    {
		        return 1;
		    }
		    else
		    {
		        if(Groups[Player[playerid][Group]][CommandTypes] != 11 && Groups[Player[playerid][Group]][CommandTypes] != 1 && Groups[Player[playerid][Group]][CommandTypes] != 3 && Groups[Player[playerid][Group]][CommandTypes] != 4)
		        {
		            if(Groups[Player[playerid][Group]][ChatDisabled] == 0)
		            {
				        switch(Player[playerid][GroupRank])
				        {
			    			case 0:
							{
								format(string, sizeof(string), "[Group Chat] %s (0) %s says: %s", Groups[Player[playerid][Group]][RankName0], GetName(playerid), Message);
							}
							case 1:
							{
								format(string, sizeof(string), "[Group Chat] %s (1) %s says: %s", Groups[Player[playerid][Group]][RankName1], GetName(playerid), Message);
							}
							case 2:
							{
								format(string, sizeof(string), "[Group Chat] %s (2) %s says: %s", Groups[Player[playerid][Group]][RankName2], GetName(playerid), Message);
							}
							case 3:
							{
								format(string, sizeof(string), "[Group Chat] %s (3) %s says: %s", Groups[Player[playerid][Group]][RankName3], GetName(playerid), Message);
							}
							case 4:
							{
								format(string, sizeof(string), "[Group Chat] %s (4) %s says: %s", Groups[Player[playerid][Group]][RankName4], GetName(playerid), Message);
							}
							case 5:
							{
								format(string, sizeof(string), "[Group Chat] %s (5) %s says: %s", Groups[Player[playerid][Group]][RankName5], GetName(playerid), Message);
							}
							case 6:
							{
								format(string, sizeof(string), "[Group Chat] %s (6) %s says: %s", Groups[Player[playerid][Group]][RankName6], GetName(playerid), Message);
							}
						}

						GroupMessage(playerid, DEPARTMENT_CHAT, string);
						GroupChatLog(string);
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "Your Group's chat has been disabled.");
					}
				}
				else
				{
				    SendClientMessage(playerid, WHITE, "This group does not have an OOC chat.");
				}
			}
		}
		else
		{
			SendClientMessage(playerid, WHITE, "Invalid group!");
		}
	}
	return 1;
}

command(togglegroupchat, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Group] >= 1 && Player[playerid][GroupRank] >= 5)
	{
	    if(Groups[Player[playerid][Group]][ChatDisabled] == 0)
	    {
	        Groups[Player[playerid][Group]][ChatDisabled] = 1;
	        SendClientMessage(playerid, WHITE, "You have disabled group chat.");
	    }
	    else
	    {
	        Groups[Player[playerid][Group]][ChatDisabled] = 0;
	        SendClientMessage(playerid, WHITE, "You have enabled group chat.");
	    }
	}
	return 1;
}

command(unfreezebank, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /unfreezebank [playerid]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 4 && Player[playerid][GroupRank] >= 5)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            format(string, sizeof(string), "You have unfrozen %s's bank account.", GetName(id));
	            SendClientMessage(playerid, WHITE, string);
	            Player[id][BankStatus] = 0;
			}
	        else
	        {
	            SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
	    }
	}
	return 1;
}

command(freezebank, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /freezebank [playerid]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 4 && Player[playerid][GroupRank] >= 5)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            format(string, sizeof(string), "You have frozen %s's bank account.", GetName(id));
	            SendClientMessage(playerid, WHITE, string);
	            Player[id][BankStatus] = 1;
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
	    }
	}
	return 1;
}

command(r, playerid, params[])
{
	new Message[128], Name[MAX_PLAYER_NAME], string[128];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /r(adio) [message]");
	}
	else
	{
	    if(strlen(Message) < 1 || !IsPlayerConnectedEx(playerid))
	    {
	        return 1;
	    }
	    else
	    {
	        if(Groups[Player[playerid][Group]][CommandTypes] == 11 || Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4 || Groups[Player[playerid][Group]][CommandTypes] == 3)
	        {
	            GetPlayerName(playerid, Name, sizeof(Name));
	            
	        	switch(Player[playerid][GroupRank])
	        	{
	    			case 0:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName0], Name, Message);
					case 1:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName1], Name, Message);
					case 2:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName2], Name, Message);
					case 3:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName3], Name, Message);
					case 4:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName4], Name, Message);
					case 5:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName5], Name, Message);
					case 6:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName6], Name, Message);
					default: format(string, sizeof(string), "[Radio Chat] Undefined %s says: %s", Name, Message);
				}

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(Player[playerid][Group] == Player[i][Group] && Player[i][ToggedRadio] == 0)
				    {
				        SendClientMessage(i, RADIO_CHAT, string);
				    }
				}
				
				format(string, sizeof(string), "[Radio] %s says: %s", Name, Message);
				NearByMessage(playerid, GREY, string);
				
				GroupChatLog(string);
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "Your group does not have a radio.");
			}
		}
	}
	return 1;
}

command(acceptbackup, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /acceptbackup [playerid]");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4 || Groups[Player[playerid][Group]][CommandTypes] == 3)
		{
		    if(IsPlayerConnectedEx(id))
		    {
		        if(Player[playerid][Checkpoint] >= 1)
		        {
		            SendClientMessage(playerid, WHITE, "You already have an existing checkpoint, please reach it or re-connect!");
		        }
		        else
		        {
				    if(Player[id][RequestingBackup] >= 1)
				    {
				        Player[playerid][AttendingBackupCall] = id;
				        Player[playerid][Checkpoint] = 1;
				        format(string, sizeof(string), "You are now attending the call of %s!", GetName(id));
				        SendClientMessage(playerid, WHITE, string);
				    }
				    else
				    {
				        SendClientMessage(playerid, WHITE, "Inactive backup call.");
				    }
			    }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Inactive backup call.");
		    }
		}
	}
	return 1;
}

command(cancelbackup, playerid, params[])
{
	if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4 || Groups[Player[playerid][Group]][CommandTypes] == 3)
	{
	    Player[playerid][RequestingBackup] = 0;
	    SendClientMessage(playerid, WHITE, "Cleared.");
	}
	return 1;
}

command(backup, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4 || Groups[Player[playerid][Group]][CommandTypes] == 3)
	{
	    format(string, sizeof(string), "%s is requesting for backup (type /acceptbackup %d).", GetName(playerid), playerid);
	    GroupMessage(playerid, ADMINORANGE, string);
	    Player[playerid][RequestingBackup] = 1;
	}
	return 1;
}

command(settax, playerid, params[])
{
	new taxpercent;
	if(sscanf(params, "d", taxpercent))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /settax [percent]");
		SendClientMessage(playerid, GREY, "40PERCENT (maximum) and 1PERCENT (minimum)");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 4)
	    {
	        if(taxpercent < 1 || taxpercent >= 40)
	        {
	            SendClientMessage(playerid, GREY, "40PERCENT (maximum) and 1PERCENT (minimum)");
	        }
	        else
	        {
	            new string[60];
	            format(string, sizeof(string), "You have set the taxrate to %d (was %d).", taxpercent, Tax);
                SendClientMessage(playerid, WHITE, string);
				Tax = taxpercent;
				dini_IntSet("Assets.ini", "Taxrate", Tax);
	        }
	    }
	}
	return 1;
}

command(radio, playerid, params[])
{
	new Message[128], Name[MAX_PLAYER_NAME], string[128];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /r(adio) [message]");
	}
	else
	{
	    if(strlen(Message) < 1 || !IsPlayerConnectedEx(playerid))
	    {
	        return 1;
	    }
	    else
	    {
	        if(Groups[Player[playerid][Group]][CommandTypes] == 11 || Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4 || Groups[Player[playerid][Group]][CommandTypes] == 3)
	        {
	            GetPlayerName(playerid, Name, sizeof(Name));

	        	switch(Player[playerid][GroupRank])
	        	{
	    			case 0:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName0], Name, Message);
					case 1:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName1], Name, Message);
					case 2:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName2], Name, Message);
					case 3:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName3], Name, Message);
					case 4:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName4], Name, Message);
					case 5:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName5], Name, Message);
					case 6:	format(string, sizeof(string), "[Radio Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName6], Name, Message);
					default: format(string, sizeof(string), "[Radio Chat] Undefined %s says: %s", Name, Message);
				}

				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(Player[playerid][Group] == Player[i][Group] && Player[i][ToggedRadio] == 0)
				    {
				        SendClientMessage(i, RADIO_CHAT, string);
				    }
				}

				format(string, sizeof(string), "[Radio] %s says: %s", Name, Message);
				NearByMessage(playerid, GREY, string);
				GroupChatLog(string);
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "Your group does not have a radio.");
			}
		}
	}
	return 1;
}

command(stopanim, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Tied] >= 1 || Player[playerid][IsAtEvent] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
	{
		SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are in an event, cuffed, tazed or tied.");
	}
	else
	{
		ClearAnimations(playerid);
		StopLoopingAnimation(playerid);
		TogglePlayerControllable(playerid, true);
	}
	return 1;
}

command(do, playerid, params[])
{
	new Message[128], string[128];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /do [action]");
	}
	else
	{
	    if(strlen(Message) < 1 || !IsPlayerConnectedEx(playerid))
	    {
	        return 1;
	    }
	    else
		{
	    	format(string, sizeof(string), "* %s ((%s)) ", Message, GetName(playerid));
			NearByMessage(playerid, 0xd0b6e3FF, string);
		}
	}
	return 1;
}

command(profile, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /profile [playerid]");
	}
	else
	{
	    if(Jobs[Player[playerid][Job]][JobType] == 4)
	    {
		    if(IsPlayerConnectedEx(id))
		    {
		        SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
				format(string, sizeof(string), "Citizen's Registered Name: %s", GetName(id));
				SendClientMessage(playerid, GREY, string);
				format(string, sizeof(string), "Citizen's Age: %d", Player[id][Age]);
				SendClientMessage(playerid, GREY, string);
				
				if(Player[id][Gender] == 1)
				{
					SendClientMessage(playerid, GREY, "Citizen's Gender: Male");
				}
				else
				{
				    SendClientMessage(playerid, GREY, "Citizen's Gender: Female");
				}

		        SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		    }
	    }
	}
	return 1;
}

command(find, playerid, params[])
{
	new id, string[128], Float: PlayerLocationX, Float: PlayerLocationY, Float: PlayerLocationZ;
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /find [playerid]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
	        if(Jobs[Player[playerid][Job]][JobType] == 4)
	        {
	            if(Player[playerid][DetectiveCooldown] >= 1)
	            {
	                SendClientMessage(playerid, WHITE, "You must wait the reload time (30 seconds).");
	            }
	            else
	            {
	                if(Player[playerid][Checkpoint] >= 1)
	                {
	                    SendClientMessage(playerid, WHITE, "You already have an existing checkpoint. Reach it first.");
	                }
	                else
	                {
	                    if(Player[id][AdminDuty] >= 1)
	                    {
	                        SendClientMessage(playerid, WHITE, "Player can't be found.");
	                    }
	                    else
	                    {
	                        if(GetPlayerInterior(id) >= 1 || GetPlayerVirtualWorld(id) >= 1)
	                        {
	                            SendClientMessage(playerid, WHITE, "That player is an interior or an alternative virtual world.");
	                        }
	                        else
	                        {
			                	GetPlayerPos(id, PlayerLocationX, PlayerLocationY, PlayerLocationZ);
			                	SetPlayerCheckpoint(playerid, PlayerLocationX, PlayerLocationY, PlayerLocationZ, 6.0);
			                	format(string, sizeof(string), "A checkpoint has been set, %s was last seen at the marked area.", GetName(id));
			                	SendClientMessage(playerid, WHITE, string);
			                	Player[playerid][Detecting] = 1;
			                	Player[playerid][DetectiveCooldown] = 1;
		                	}
	                	}
	                }
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You're not a Detective.");
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    }
	}
	return 1;
}

command(b, playerid, params[])
{
	new Message[128], string[128];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /b [message]");
	}
	else
	{
	    if(strlen(Message) < 1 || !IsPlayerConnectedEx(playerid))
	    {
	        return 1;
	    }
	    else
	    {
	        if(Player[playerid][PrisonID] == 1)
	        {
				SendClientMessage(playerid, WHITE, "You may not use this channel right now.");
	        }
	        else
	        {
		    	format(string, sizeof(string), "%s says: ((%s)) ", GetName(playerid), Message);
				NearByMessage(playerid, WHITE, string);
			}
		}
	}
	return 1;
}

command(me, playerid, params[]) {
	new
	    string[128]; // Updated this as I forgot about the whole params usage at the time of originally creating this.... but seeing as how noobs constantly rip this command I might as well give them some good code to rip from! (yes I'm talking about you, RealCop228 and all the others)

	if(isnull(params)) {
	    return SendClientMessage(playerid, WHITE, "SYNTAX: /me [action]");
	}
	else {
	    if(Player[playerid][PrisonID] == 1) {
	        SendClientMessage(playerid, WHITE, "You're unable to do this right now!");
	    }
	    else {
	        format(string, sizeof(string), "* %s %s", GetName(playerid), params);
	        NearByMessage(playerid, 0xd0b6e3FF, string);
	        
			Player[playerid][MeActions]++;

			switch(Player[playerid][MeActions]) {
			    case 100: {
				    SendClientMessage(playerid, WHITE, "You have unlocked a new achievement!");
				    SendClientMessage(playerid, GREY, "You have executed 100 /me actions.");
				    Player[playerid][AchievementRank]++;
			    }
			    case 200: {
			    	SendClientMessage(playerid, WHITE, "You have unlocked a new achievement!");
					SendClientMessage(playerid, GREY, "You have executed 200 /me actions.");
					Player[playerid][AchievementRank]++;
				}
			}
	    }
	}
	return 1;
}

command(achievements, playerid, params[])
{
	#pragma unused params
	ShowPlayerDialog(playerid, 364, DIALOG_STYLE_LIST, "ACHIEVEMENTS", "Me Actions\nQuiz Questions\nAdvertisements\nMatruns\n", "Select", "Cancel");
	return 1;
}

command(omute, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /omute [playerid]");
			SendClientMessage(playerid, GREY, "This can be used to reverse the mute effect (effectively unmute).");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
		    if(IsPlayerConnectedEx(id))
	    	{
	        	if(Player[id][oMuted] == 0)
	        	{
	        		format(string, sizeof(string), "You have muted %s from OOC chat.", GetName(id));
	    			Player[id][oMuted] = 1;
	    			SendClientMessage(playerid, WHITE, string);
	    		}
	    		else
	    		{
	        		format(string, sizeof(string), "You have unmuted %s from OOC chat.", GetName(id));
	    			Player[id][oMuted] = 0;
	    			SendClientMessage(playerid, WHITE, string);
	    		}
	    	}
    		else
	    	{
	    		SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    	}
		}
	}
	return 1;
}

command(nmute, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /nmute [playerid]");
			SendClientMessage(playerid, GREY, "This can be used to reverse the mute effect (effectively unmute).");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
		    if(IsPlayerConnectedEx(id))
	    	{
	        	if(Player[id][nMuted] == 0)
	        	{
	        		format(string, sizeof(string), "You have muted %s from newbie chat.", GetName(id));
	    			Player[id][nMuted] = 1;
	    			SendClientMessage(playerid, WHITE, string);
	    		}
	    		else
	    		{
	        		format(string, sizeof(string), "You have unmuted %s from newbie chat.", GetName(id));
	    			Player[id][nMuted] = 0;
	    			SendClientMessage(playerid, WHITE, string);
	    		}
	    	}
    		else
	    	{
	    		SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    	}
		}
	}
	return 1;
}

command(mute, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /mute [playerid]");
			SendClientMessage(playerid, GREY, "This can be used to reverse the mute effect (effectively unmute).");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
		    if(IsPlayerConnectedEx(id))
	    	{
	        	if(Player[id][Muted] == 0)
	        	{
	        	    if(Player[playerid][AdminLevel] >= Player[id][AdminLevel])
	        	    {
		        		format(string, sizeof(string), "You have muted %s.", GetName(id));
		    			Player[id][Muted] = 1;
		    			SendClientMessage(playerid, WHITE, string);
	    			}
	    		}
	    		else
	    		{
	        		format(string, sizeof(string), "You have unmuted %s.", GetName(id));
	    			Player[id][Muted] = 0;
	    			SendClientMessage(playerid, WHITE, string);
	    		}
	    	}
    		else
	    	{
	    		SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    	}
		}
		else
		{
		    SendClientMessage(playerid, GREY, "You're not authenticated.");
		}

	}
	return 1;
}

command(bonuscar, playerid, params[])
{
	new string[128], carid;
	if(sscanf(params, "d", carid))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /bonuscar [vehicle id]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        if(carid == 0)
	        {
	            SendClientMessage(playerid, WHITE, "You have removed the bonus car.");
	            BonusCar = 0;
	        }
	        else
	        {
			    BonusCar = carid;
			    format(string, sizeof(string), "You have set the bonus car to %s!", VehicleNames[BonusCar-400]);
			    SendClientMessage(playerid, WHITE, string);
		    }
		}
	}
	return 1;
}

command(warn, playerid, params[])
{
	new string[128], id, reason[128];
	if(sscanf(params, "uz", id, reason))
	{
		if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /warn [playerid] [reason]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
		    if(strlen(reason) > 20)
		    {
		        SendClientMessage(playerid, WHITE, "Reasons must be under 20 characters.");
		        return 1;
		    }
			else if(IsPlayerConnectedEx(id))
			{
			    if(Player[playerid][AdminLevel] < Player[id][AdminLevel] || Player[playerid][AdminLevel] < 1)
			    {
			        SendClientMessage(playerid, WHITE, "You just can't do that.");
			    }
			    else
			    {
			        if(Player[id][AdminLevel] < 1)
			        {
			            Player[playerid][AdminActions]++;
			            SendClientMessage(playerid, WHITE, "You have earned an admin action!");
			        }
			        
		            if(strcmp(Player[id][Warning1], "None", true) == 0)
		            {
						format(Player[id][Warning1], 255, "%s (from %s)", reason, GetName(playerid));
						format(string, sizeof(string), "You have successfully warned %s, for %s. This is their first warning.", GetName(id), reason);
		                SendClientMessage(playerid, WHITE, string);
		                format(string, sizeof(string), "You have been warned by Server Admin %s, defined reason: %s.", GetName(playerid), reason);
		                SendClientMessage(id, GREY, string);
		                SendClientMessage(id, ADMINORANGE, "This is your first warn. You have two remaining, before you are auto-banned.");
						format(string, sizeof(string), "%s has warned %s.", GetName(playerid), GetName(id));
						AdminActionsLog(string);
					}
		            else if(strcmp(Player[id][Warning2], "None", true) == 0)
		            {
						format(Player[id][Warning2], 255, "%s (from %s)", reason, GetName(playerid));
						format(string, sizeof(string), "You have successfully warned %s, for %s. This is their second warning.", GetName(id), reason);
		                SendClientMessage(playerid, WHITE, string);
		                format(string, sizeof(string), "You have been warned by Server Admin %s, for: %s.", GetName(playerid), reason);
		                SendClientMessage(id, GREY, string);
		                SendClientMessage(id, ADMINORANGE, "This is your second warn. On your next, you will be auto-banned.");
						format(string, sizeof(string), "%s has warned %s.", GetName(playerid), GetName(id));
						AdminActionsLog(string);
					}
		            else if(strcmp(Player[id][Warning3], "None", true) == 0)
		            {
					    new hour, minute, second, day, year, month;
				        gettime(hour, minute, second);
				        getdate(year, month, day);
			            new IP[21];
			    		GetPlayerIp(id, IP, sizeof(IP));
						format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | THREE WARNINGS (%s) | %s", day, month, year, hour, minute, IP, GetName(id), reason, GetName(playerid));
						BanLog(string);
		                format(string, sizeof(string), "Ban: %s has been banned by %s, defined reason: %s (third warning)", GetName(id), Player[playerid][AdminName], reason);
		                SendClientMessageToAll(LIGHTRED, string);
		                AdminActionsLog(string);
						format(Player[id][Warning3], 255, "%s (from %s)", reason, GetName(playerid));
						format(string, sizeof(string), "You have successfully warned %s, for %s. This is their third warning.", GetName(id), reason);
		                SendClientMessage(playerid, WHITE, string);
		                format(string, sizeof(string), "You have been warned by Admin %s, for: %s.", reason, GetName(playerid));
		                SendClientMessage(id, GREY, string);
		                SendClientMessage(id, ADMINORANGE, "You are now going to be banned, as this is your third warning.");
		                Player[id][Banned] = 1;
		                SavePlayerData(id);
		                Ban(id);
		            }
	            }
            }
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "Invalid ID.");
		}
	}
	return 1;
}

command(joinevent, playerid, params[])
{
	#pragma unused params
	if(CurrentEvent == 1)
	{
	    GetPlayerHealth(playerid, Player[playerid][LastHealth]);
	    GetPlayerArmour(playerid, Player[playerid][LastArmour]);

	    if(Player[playerid][IsAtEvent] == 0)
	    {
	        if(IsPlayerSpawned(playerid))
	        {
	            if(Player[playerid][PrisonID] >= 1 && Player[playerid][PrisonDuration] >= 1 || Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Tied] >= 1)
	            {
	                SendClientMessage(playerid, WHITE, "You can't participate as you're prisoned, jailed, cuffed, tied or tazed.");
	            }
	            else
	            {
		            TogglePlayerControllable(playerid, false);
		            Player[playerid][LastSkin] = GetPlayerSkin(playerid);
			        ResetPlayerWeapons(playerid);
			    	SetPlayerInterior(playerid, EventInt);
			    	SetPlayerVirtualWorld(playerid, EventWorld);
			    	SetPlayerPos(playerid, EventX, EventY, EventZ);
			    	Player[playerid][IsAtEvent] = 1;
			    	SendClientMessage(playerid, WHITE, "You have successfully joined the event. Please wait, the event will start shortly!");
			    	GivePlayerWeapon(playerid, EventWeapon1, 999999);
			    	GivePlayerWeapon(playerid, EventWeapon2, 999999);
			    	GivePlayerWeapon(playerid, EventWeapon3, 999999);
			    	GivePlayerWeapon(playerid, EventWeapon4, 999999);
			    	SetPlayerSkin(playerid, EventSkin);
			    	GivePlayerWeapon(playerid, EventWeapon5, 999999);
			    	SetPlayerHealth(playerid, EventHP);
			    	SetPlayerArmour(playerid, EventArmour);
		    	}
	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, WHITE, "You can't join as you're not currently spawned.");
	    	}
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You are already participating in an event!");
	    }
	}
	else if(CurrentEvent == 2)
	{
	    SendClientMessage(playerid, WHITE, "Sorry, it appears you have missed the event. Please wait until the next!");
	}
	return 1;
}

command(startevent, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][AdminLevel] >= 3)
	{
		if(CurrentEvent == 0)
		{
		    CurrentEvent = 1;
		    format(string, sizeof(string), "Server Admin %s has set up an event, type /joinevent to participate!", GetName(playerid));
		    SendClientMessageToAll(LIGHTRED, string);
		}
		else if(CurrentEvent == 1)
		{
		    CurrentEvent = 2;
		    format(string, sizeof(string), "Server Admin %s has started the event. Best of luck playing!", GetName(playerid));
		    SendClientMessageToAll(LIGHTRED, string);

		    for(new i = 0; i < MAX_PLAYERS; i++)
		    {
		        if(IsPlayerConnectedEx(i))
		        {
		            if(Player[i][IsAtEvent] == 1)
		            {
		                TogglePlayerControllable(i, true);
		                EC++;
		                SendClientMessage(i, WHITE, "Good luck! You'll be refunded at the end, have fun.");
		            }
				}
		    }
		}
	}
	return 1;
}

command(eventproperties, playerid, params[])
{
	new	desiredhp, desiredarmour, desiredwep1, desiredwep2, desiredskin, desiredwep3, desiredwep4, desiredwep5;
	if(sscanf(params, "dddddddd", desiredhp, desiredarmour, desiredwep1, desiredwep2, desiredwep3, desiredwep4, desiredwep5, desiredskin))
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /eventproperties [health] [armour] [weapon1] [weapon2] [weapon3] [weapon4] [weapon5] [skin]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
		    if(IsInvalidSkin(desiredskin))
		    {
		        SendClientMessage(playerid, WHITE, "Invalid skin ID!");
		    }
		    else
		    {
			    EventHP = desiredhp;
			    EventArmour = desiredarmour;
			    EventWeapon1 = desiredwep1;
			    EventWeapon2 = desiredwep2;
			    EventWeapon3 = desiredwep3;
			    EventWeapon4 = desiredwep4;
			    EventWeapon5 = desiredwep5;
			    GetPlayerPos(playerid, EventX, EventY, EventZ);
			    EventWorld = GetPlayerVirtualWorld(playerid);
			    EventInt = GetPlayerInterior(playerid);
			    EventSkin = desiredskin;
			    SendClientMessage(playerid, WHITE, "You have set the properties. Type /startevent to start the event, or use the same command to change the properties.");
		    }
		}
	}
	return 1;
}

command(admins, playerid, params[])
{
	#pragma unused params
	new string[128];

	SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");

	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnectedEx(i))
		{
		    if(Player[i][AdminDuty] == 1)
		    {
		        if(Player[i][AFKStat] == 1)
		        {
		        	format(string, sizeof(string), "Administrator %s (Level %d) is currently away from keyboard.", GetName(i), Player[i][AdminLevel]);
			        SendClientMessage(playerid, YELLOW, string);
		        }
		        else
		        {
			        format(string, sizeof(string), "Administrator %s (Level %d) is currently on administration duty.", GetName(i), Player[i][AdminLevel]);
			        SendClientMessage(playerid, GREEN, string);
		        }
		    }
		    else
		    {
		        if(Player[playerid][AdminLevel] >= 1)
		        {
			        if(Player[i][AdminLevel] >= 1 && Player[i][AFKStat] == 1)
			        {
			        	format(string, sizeof(string), "Administrator %s (Level %d) is currently away from keyboard and off admin duty.", GetName(i), Player[i][AdminLevel]);
				        SendClientMessage(playerid, GREY, string);
			        }
			        else if(Player[i][AdminLevel] >= 1 && Player[i][AFKStat] == 0)
			        {
				        format(string, sizeof(string), "Administrator %s (Level %d) is currently off admin duty.", GetName(i), Player[i][AdminLevel]);
				        SendClientMessage(playerid, GREY, string);
			        }
		        }
		    }
		}
	}
	
	SendClientMessage(playerid, WHITE, "---------------------------------------------------------------------------------------------------------------------------------");
	return 1;
}

command(adminduty, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][AdminLevel] >= 1)
	{
		if(Player[playerid][AdminDuty] == 0)
		{
		    if(strlen(Player[playerid][AdminName]) >= 1 || strcmp(Player[playerid][AdminName], "Nothing", true) == 0)
		    {
		        SendClientMessage(playerid, WHITE, "You are now on admin duty. You will appear on the /admins list and you'll be able to view reports.");
		        Player[playerid][AdminDuty] = 1;

		        if(Player[playerid][AdminLevel] >= 3)
		        {
		        	SetPlayerHealth(playerid, 500000);
		        }
		        
		        format(Player[playerid][NormalName], 255, "%s", GetName(playerid));

		        SetPlayerName(playerid, Player[playerid][AdminName]);
		        SetPlayerSkin(playerid, Player[playerid][AdminSkin]);
		        
		        if(Player[playerid][HospitalTime] >= 1)
		        {
		            Player[playerid][HospitalTime] = 0;
		            SetCameraBehindPlayer(playerid);
		            SetPlayerPos(playerid, SpawnX, SpawnY, SpawnZ);
		            SetPlayerDrunkLevel(playerid, 0);
		            SendClientMessage(playerid, WHITE, "You have been de-hospitalized.");
		        }

		        format(string, sizeof(string), "%s (%s) is now on Admin Duty.", GetName(playerid), Player[playerid][NormalName]);
		        SendToAdmins(ADMINORANGE, string, 0);
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You haven't set an administrators' name yet.");
	        }
		}
		else
		{
	        SendClientMessage(playerid, WHITE, "You're now off admin duty, though you will still see admin chat.");
		    Player[playerid][AdminDuty] = 0;
		    
		    SetPlayerColor(playerid, WHITE);

			if(Player[playerid][AdminLevel] >= 3)
		    {
		    	SetPlayerHealth(playerid, 100);
		    }
		    
		    if(strlen(Player[playerid][NormalName]) > 1)
		    {
		    	SetPlayerName(playerid, Player[playerid][NormalName]);
		    }
		    
		    SetPlayerSkin(playerid, Player[playerid][LastSkin]);
		    
	        format(string, sizeof(string), "%s (%s) is now off Admin Duty.", Player[playerid][AdminName], GetName(playerid));
	        SendToAdmins(ADMINORANGE, string, 0);
		}
	}
	return 1;
}

command(heal, playerid, params[])
{
	new id, healreqprice, string[128];
	if(sscanf(params, "ud", id, healreqprice))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /heal [playerid] [healprice]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id) && id != playerid)
	    {
	        if(Groups[Player[playerid][Group]][CommandTypes] == 3)
	        {
	            if(healreqprice >= 1000 || healreqprice < 1)
	            {
	                SendClientMessage(playerid, WHITE, "The maximum heal price is $1000, you also can't go lower than $1.");
	            }
	            else
	            {
	                if(GetDistanceBetweenPlayers(id, playerid) < 5)
	                {
				        new Float: Health, HealthInt;
				        GetPlayerHealth(id, Health);

				        HealthInt = floatround(Health, floatround_ceil);

				        if(HealthInt >= 100)
				        {
				            SendClientMessage(playerid, WHITE, "That person already has full health.");
				        }
				        else
				        {
				            format(string, sizeof(string), "%s has requested to heal you, for $%d (type /approve healrequest to approve the request).", GetName(playerid), healreqprice);
				            Player[playerid][AttemptingToHeal] = id;
				            Player[id][HealPrice] = healreqprice;
				            SendClientMessage(id, ANNOUNCEMENT, string);
				            format(string, sizeof(string), "You have requested to heal %s, for $%d. Wait for them to approve it.", GetName(id), healreqprice);
				            SendClientMessage(playerid, WHITE, string);
				        }
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "You're not close enough to that player.");
			        }
		        }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "Invalid ID, or that's you.");
	        }
	    }
	}
	return 1;
}

command(changeclothes, playerid, params[])
{
	new slot;
	if(sscanf(params, "d", slot))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /changeclothes [Slot (1-3)]");
	}
	else
	{
	    if(Player[playerid][House] >= 1)
	    {
		    if(Player[playerid][InHouse] == Player[playerid][House])
		    {
			    switch(slot)
			    {
					case 1:
					{
						SetPlayerSkin(playerid, Player[playerid][PlayerSkinSlot1]);
						Player[playerid][LastSkin] = Player[playerid][PlayerSkinSlot1];
						SendClientMessage(playerid, WHITE, "You have switched your skin, to slot 1.");
					}
					case 2:
					{
						SetPlayerSkin(playerid, Player[playerid][PlayerSkinSlot2]);
						Player[playerid][LastSkin] = Player[playerid][PlayerSkinSlot2];
						SendClientMessage(playerid, WHITE, "You have switched your skin, to slot 2.");
					}
					case 3:
					{
						SetPlayerSkin(playerid, Player[playerid][PlayerSkinSlot3]);
						Player[playerid][LastSkin] = Player[playerid][PlayerSkinSlot3];
						SendClientMessage(playerid, WHITE, "You have switched your skin, to slot 3.");
					}
			    }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You must be inside your house, to change your clothes.");
		    }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You don't own a house.");
	    }
	}
	return 1;
}

command(setprice, playerid, params[])
{
	new string[128], price, product;
	if(sscanf(params, "dd", product, price))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /setprice [product] [price] (Maximum Price: $50,000)");
	    switch(Businesses[Player[playerid][Business]][bType])
	    {
	        case 1:
			{
				SendClientMessage(playerid, GREY, "Product 1 - Rope");
				SendClientMessage(playerid, GREY, "Product 2 - Rags");
				SendClientMessage(playerid, GREY, "Product 3 - Phone");
				SendClientMessage(playerid, GREY, "Product 4 - Phonebook");
				SendClientMessage(playerid, GREY, "Product 5 - Bottle o' Sprunk");
				SendClientMessage(playerid, GREY, "Product 6 - Phone Credit Voucher");
				SendClientMessage(playerid, GREY, "Product 7 - Spraycan");
				SendClientMessage(playerid, GREY, "Product 8 - Walkie Talkie");
				SendClientMessage(playerid, GREY, "Product 9 - Vehicle Radio");
			}
			case 2:
			{
			    SendClientMessage(playerid, GREY, "Product 1 - Every Skin Available");
			}
			case 3:
			{
	        	SendClientMessage(playerid, GREY, "Product 1 - Wine");
	        	SendClientMessage(playerid, GREY, "Product 2 - Beer");
	        	SendClientMessage(playerid, GREY, "Product 3 - Sprunk");
			}
			case 5:
			{
			    SendClientMessage(playerid, GREY, "Product 1 - Rope");
	        	SendClientMessage(playerid, GREY, "Product 2 - Small White Vibrator");
	        	SendClientMessage(playerid, GREY, "Product 3 - Silver Vibrator");
	        	SendClientMessage(playerid, GREY, "Product 4 - Large White Vibrator");
	        	SendClientMessage(playerid, GREY, "Product 5 - Priest Costume");
	        	SendClientMessage(playerid, GREY, "Product 6 - Naughty Police Woman Costume");
	        	SendClientMessage(playerid, GREY, "Product 7 - Cat Woman Costume");
			}
			case 7:
			{
			    SendClientMessage(playerid, GREY, "Product 1 - Media Studies");
	        	SendClientMessage(playerid, GREY, "Product 2 - Civil Law Degree");
	        	SendClientMessage(playerid, GREY, "Product 3 - Intermediate English Degree");
	        	SendClientMessage(playerid, GREY, "Product 4 - Intermediate Mathematics Degree");
	        	SendClientMessage(playerid, GREY, "Product 5 - Intermediate Chemistry Degree");
			}
			case 11:
			{
			    SendClientMessage(playerid, GREY, "Product 1 - 5 grams of Pot");
	        	SendClientMessage(playerid, GREY, "Product 2 - 5 grams of Cocaine");
			}
			case 12:
			{
			    SendClientMessage(playerid, GREY, "Product 1 - Sprunk");
	        	SendClientMessage(playerid, GREY, "Product 2 - Vegetarian Surprise");
	        	SendClientMessage(playerid, GREY, "Product 3 - Meat Feast Pizza");
			}
	    }
	}
	else
	{
	    if(price < 50000 && price >= 1)
	    {
		    if(Businesses[Player[playerid][Business]][bType] == 1)
		    {
		        if(product >= 1 && product < 10)
		        {
		            switch(product)
		            {
		                case 1:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice1] = price;
		                    format(string, sizeof(string), "You have set the price of Rope to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 2:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice2] = price;
		                    format(string, sizeof(string), "You have set the price of Rags to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 3:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice3] = price;
		                    format(string, sizeof(string), "You have set the price of a Phone to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 4:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice4] = price;
		                    format(string, sizeof(string), "You have set the price of a Phonebook to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 5:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice5] = price;
		                    format(string, sizeof(string), "You have set the price of a Bottle o' Sprunk to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 6:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice6] = price;
		                    format(string, sizeof(string), "You have set the price of a Phone Credit Voucher to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 7:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice7] = price;
		                    format(string, sizeof(string), "You have set the price of a Spraycan to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 8:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice8] = price;
		                    format(string, sizeof(string), "You have set the price of a Walkie Talkie to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 9:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice9] = price;
		                    format(string, sizeof(string), "You have set the price of a Vehicle Radio to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Invalid product slot!");
					SendClientMessage(playerid, GREY, "Product 1 - Rope");
					SendClientMessage(playerid, GREY, "Product 2 - Rags");
					SendClientMessage(playerid, GREY, "Product 3 - Phone");
					SendClientMessage(playerid, GREY, "Product 4 - Phonebook");
					SendClientMessage(playerid, GREY, "Product 5 - Bottle o' Sprunk");
					SendClientMessage(playerid, GREY, "Product 6 - Phone Credit Voucher");
					SendClientMessage(playerid, GREY, "Product 7 - Spraycan");
					SendClientMessage(playerid, GREY, "Product 8 - Walkie Talkie");
					SendClientMessage(playerid, GREY, "Product 9 - Vehicle Radio");
		        }
		    }

		    if(Businesses[Player[playerid][Business]][bType] == 7)
		    {
		        if(product >= 1 && product < 6)
		        {
		            switch(product)
		            {
		                case 1:
		                {
				            Businesses[Player[playerid][Business]][bProductPrice1] = price;
				            format(string, sizeof(string), "You have set the price of Media Studies to $%d.", price);
				            SendClientMessage(playerid, WHITE, string);
		                }
		                case 2:
		                {
				            Businesses[Player[playerid][Business]][bProductPrice2] = price;
				            format(string, sizeof(string), "You have set the price of Civil Law Degree to $%d.", price);
				            SendClientMessage(playerid, WHITE, string);
		                }
		                case 3:
		                {
				            Businesses[Player[playerid][Business]][bProductPrice3] = price;
				            format(string, sizeof(string), "You have set the price of Intermediate English Degree to $%d.", price);
				            SendClientMessage(playerid, WHITE, string);
		                }
		                case 4:
		                {
				            Businesses[Player[playerid][Business]][bProductPrice4] = price;
				            format(string, sizeof(string), "You have set the price of Intermediate Mathematics Degree to $%d.", price);
				            SendClientMessage(playerid, WHITE, string);
		                }
		                case 5:
		                {
				            Businesses[Player[playerid][Business]][bProductPrice5] = price;
				            format(string, sizeof(string), "You have set the price of Intermediate Chemistry Degree to $%d.", price);
				            SendClientMessage(playerid, WHITE, string);
		                }
		            }
		        }
		        else
		        {
				    SendClientMessage(playerid, GREY, "Product 1 - Media Studies");
		        	SendClientMessage(playerid, GREY, "Product 2 - Civil Law Degree");
		        	SendClientMessage(playerid, GREY, "Product 3 - Intermediate English Degree");
		        	SendClientMessage(playerid, GREY, "Product 4 - Intermediate Mathematics Degree");
		        	SendClientMessage(playerid, GREY, "Product 5 - Intermediate Chemistry Degree");
		        }
		    }

		    if(Businesses[Player[playerid][Business]][bType] == 11)
		    {
		        if(product >= 1 && product < 3)
		        {
		            switch(product)
		            {
		                case 1:
		                {
				            Businesses[Player[playerid][Business]][bProductPrice1] = price;
				            format(string, sizeof(string), "You have set the price of 5 grams of Pot to $%d.", price);
				            SendClientMessage(playerid, WHITE, string);
		                }
		                case 2:
		                {
				            Businesses[Player[playerid][Business]][bProductPrice2] = price;
				            format(string, sizeof(string), "You have set the price of 5 grams of Cocaine to $%d.", price);
				            SendClientMessage(playerid, WHITE, string);
		                }
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Invalid product slot!");
		        	SendClientMessage(playerid, GREY, "Product 1 - 5 grams of Pot");
		        	SendClientMessage(playerid, GREY, "Product 1 - 5 grams of Cocaine");
		        }
		    }

		    if(Businesses[Player[playerid][Business]][bType] == 2)
		    {
		        if(product == 1)
		        {
		            Businesses[Player[playerid][Business]][bProductPrice1] = price;
		            format(string, sizeof(string), "You have set the skin price to $%d.", price);
		            SendClientMessage(playerid, WHITE, string);
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Invalid product slot!");
		        	SendClientMessage(playerid, GREY, "Product 1 - Every Skin Available");
		        }
		    }

		    if(Businesses[Player[playerid][Business]][bType] == 12)
		    {
		        if(product >= 1 && product < 4)
		        {
		            switch(product)
		            {
		                case 1:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice1] = price;
		                    format(string, sizeof(string), "You have set the price of Sprunk to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 2:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice2] = price;
		                    format(string, sizeof(string), "You have set the price of Vegetarian Surprise to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 3:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice3] = price;
		                    format(string, sizeof(string), "You have set the price of Meat Feast Pizza to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Invalid product slot!");
				    SendClientMessage(playerid, GREY, "Product 1 - Sprunk");
		        	SendClientMessage(playerid, GREY, "Product 2 - Vegetarian Surprise");
		        	SendClientMessage(playerid, GREY, "Product 3 - Meat Feast Pizza");
		        }
		    }

		    if(Businesses[Player[playerid][Business]][bType] == 3)
		    {
		        if(product >= 1 && product < 4)
		        {
		            switch(product)
		            {
		                case 1:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice1] = price;
		                    format(string, sizeof(string), "You have set the price of Wine to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 2:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice2] = price;
		                    format(string, sizeof(string), "You have set the price of Beer to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 3:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice3] = price;
		                    format(string, sizeof(string), "You have set the price of Sprunk to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Invalid product slot!");
		        	SendClientMessage(playerid, GREY, "Product 1 - Wine");
		        	SendClientMessage(playerid, GREY, "Product 2 - Beer");
		        	SendClientMessage(playerid, GREY, "Product 3 - Sprunk");
		        }
		    }

		    if(Businesses[Player[playerid][Business]][bType] == 5)
		    {
		        if(product >= 1 && product < 8)
		        {
		            switch(product)
		            {
		                case 1:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice1] = price;
		                    format(string, sizeof(string), "You have set the price of Rope to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 2:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice2] = price;
		                    format(string, sizeof(string), "You have set the price of a Small White Vibrator to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 3:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice3] = price;
		                    format(string, sizeof(string), "You have set the price of a Silver Vibrator to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 4:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice4] = price;
		                    format(string, sizeof(string), "You have set the price of a Large White Vibrator to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 5:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice5] = price;
		                    format(string, sizeof(string), "You have set the price of Priest Clothing to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 6:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice6] = price;
		                    format(string, sizeof(string), "You have set the price of a Naughty Police Woman Costume to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		                case 7:
		                {
		                    Businesses[Player[playerid][Business]][bProductPrice7] = price;
		                    format(string, sizeof(string), "You have set the price of a Cat Woman Costume to $%d.", price);
		                    SendClientMessage(playerid, WHITE, string);
		                }
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Invalid product slot!");
		        	SendClientMessage(playerid, GREY, "Product 1 - Rope");
		        	SendClientMessage(playerid, GREY, "Product 2 - Small White Vibrator");
		        	SendClientMessage(playerid, GREY, "Product 3 - Silver Vibrator");
		        	SendClientMessage(playerid, GREY, "Product 4 - Large White Vibrator");
		        	SendClientMessage(playerid, GREY, "Product 5 - Priest Costume");
		        	SendClientMessage(playerid, GREY, "Product 6 - Naughty Police Woman Costume");
		        	SendClientMessage(playerid, GREY, "Product 7 - Cat Woman Costume");
		        }
		    }
		}
	}
	return 1;
}

command(buyclothes, playerid, params[])
{
	if(Player[playerid][House] >= 1)
	{
		new skinid, slot;
		if(sscanf(params, "dd", slot, skinid))
		{
		    SendClientMessage(playerid, WHITE, "SYNTAX: /buyclothes [Slot (1-3)] [Skin ID]");
		    if(Businesses[Player[playerid][Business]][bType] == 2)
		    {
		        new string[128];
			    format(string, sizeof(string), "Skins in this store cost $%d.", Businesses[Player[playerid][InBusiness]][bProductPrice1]);
				SendClientMessage(playerid, WHITE, string);
			}
		}
		else
		{
		    if(Businesses[Player[playerid][InBusiness]][bType] == 2)
		    {
		        if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
		        {
			        if(slot >= 1 && slot < 4)
			        {
					    if(IsInvalidSkin(skinid))
					    {
					        SendClientMessage(playerid, WHITE, "Invalid skin ID!");
					    }
					    else
					    {
					        if(skinid == 286 || skinid == 287 || skinid == 285 || skinid == 284 || skinid == 288 || skinid == 283 || skinid == 282 || skinid == 281 || skinid == 280)
						    {
							    if(Groups[Player[playerid][Group]][CommandTypes] == 1)
						        {
									switch(slot)
									{
									    case 1: Player[playerid][PlayerSkinSlot1] = skinid;
									    case 2: Player[playerid][PlayerSkinSlot2] = skinid;
									    case 3: Player[playerid][PlayerSkinSlot3] = skinid;
									}

						            SetPlayerSkin(playerid, skinid);
						            Player[playerid][LastSkin] = skinid;
						            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
						            SendClientMessage(playerid, WHITE, "You will not be charged for these clothes.");
						        }
						        else
						        {
						            SendClientMessage(playerid, WHITE, "These clothes can only be used by Law Enforcement.");
						        }
					        }
					        else
					        {
					        	if(Groups[Player[playerid][Group]][Skin0] == skinid || Groups[Player[playerid][Group]][Skin1] == skinid || Groups[Player[playerid][Group]][Skin2] == skinid || Groups[Player[playerid][Group]][Skin3] == skinid || Groups[Player[playerid][Group]][Skin4] == skinid || Groups[Player[playerid][Group]][Skin5] == skinid || Groups[Player[playerid][Group]][Skin6] == skinid)
					            {
						            SendClientMessage(playerid, WHITE, "These are on the house! They're your group clothes.");
						            SetPlayerSkin(playerid, skinid);
						        	Player[playerid][LastSkin] = skinid;
						        	Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;

									switch(slot)
									{
									    case 1: Player[playerid][PlayerSkinSlot1] = skinid;
									    case 2: Player[playerid][PlayerSkinSlot2] = skinid;
									    case 3: Player[playerid][PlayerSkinSlot3] = skinid;
									}
					            }
					            else
					            {
						            if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1])
						            {
							        	SendClientMessage(playerid, WHITE, "You have purchased this pair of clothes!");
							            SetPlayerSkin(playerid, skinid);
							            Player[playerid][LastSkin] = skinid;
							            Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
							            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
							            Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];

										switch(slot)
										{
										    case 1: Player[playerid][PlayerSkinSlot1] = skinid;
										    case 2: Player[playerid][PlayerSkinSlot2] = skinid;
										    case 3: Player[playerid][PlayerSkinSlot3] = skinid;
										}
						            }
						            else
						            {
						                new string[128];
						                format(string, sizeof(string), "You must be able to pay $%d for a pair of clothes.", Businesses[Player[playerid][InBusiness]][bProductPrice1]);
						                SendClientMessage(playerid, WHITE, string);
						            }
					            }
					        }
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, WHITE, "Invalid slot, use slot 1 - 3.");
				    }
			    }
			    else
			    {
			        SendClientMessage(playerid, WHITE, "This business is currently out of stock!");
			    }
		    }
		}
	}
	else
	{
		new skinid;
		if(sscanf(params, "d", skinid))
		{
		    SendClientMessage(playerid, WHITE, "SYNTAX: /buyclothes [Skin ID]");
		    if(Businesses[Player[playerid][Business]][bType] == 2)
		    {
		        new string[128];
			    format(string, sizeof(string), "Skins in this store cost $%d.", Businesses[Player[playerid][InBusiness]][bProductPrice1]);
				SendClientMessage(playerid, WHITE, string);
			}
		}
		else
		{
		    if(Businesses[Player[playerid][InBusiness]][bType] == 2)
		    {
		        if(Businesses[Player[playerid][InBusiness]][bSupplies] >= 1)
		        {
				    if(IsInvalidSkin(skinid))
				    {
				        SendClientMessage(playerid, WHITE, "Invalid skin ID!");
				    }
				    else
				    {
				        if(skinid == 286 || skinid == 287 || skinid == 285 || skinid == 284 || skinid == 288 || skinid == 283 || skinid == 282 || skinid == 281 || skinid == 280)
					    {
						    if(Groups[Player[playerid][Group]][CommandTypes] == 1)
					        {
								Player[playerid][LastSkin] = skinid;
					            SetPlayerSkin(playerid, skinid);
					            Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
					            SendClientMessage(playerid, WHITE, "You will not be charged for these clothes.");
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "These clothes can only be used by Law Enforcement.");
					        }
				        }
					    else
					    {
					    	if(Groups[Player[playerid][Group]][Skin0] == skinid || Groups[Player[playerid][Group]][Skin1] == skinid || Groups[Player[playerid][Group]][Skin2] == skinid || Groups[Player[playerid][Group]][Skin3] == skinid || Groups[Player[playerid][Group]][Skin4] == skinid || Groups[Player[playerid][Group]][Skin5] == skinid || Groups[Player[playerid][Group]][Skin6] == skinid)
					        {
						        SendClientMessage(playerid, WHITE, "These are on the house! They're your group clothes.");
						        SetPlayerSkin(playerid, skinid);
					        	Player[playerid][LastSkin] = skinid;
				        		Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
				            }
					        else
					        {
						    	if(Player[playerid][Money] >= Businesses[Player[playerid][InBusiness]][bProductPrice1])
						        {
							    	SendClientMessage(playerid, WHITE, "You have purchased this pair of clothes!");
							        SetPlayerSkin(playerid, skinid);
							        Player[playerid][LastSkin] = skinid;
							        Player[playerid][Money] -= Businesses[Player[playerid][InBusiness]][bProductPrice1];
							        Businesses[Player[playerid][InBusiness]][bSupplies] -= 1;
							        Businesses[Player[playerid][InBusiness]][bVault] += Businesses[Player[playerid][InBusiness]][bProductPrice1];
					            }
					            else
					            {
					                new string[128];
					                format(string, sizeof(string), "You must have %d to purchase this pair of clothes.", Businesses[Player[playerid][InBusiness]][bProductPrice1]);
					                SendClientMessage(playerid, WHITE, string);
					            }
				            }
				        }
				    }
			    }
			    else
			    {
			        SendClientMessage(playerid, WHITE, "This business is currently out of stock!");
			    }
		    }
		}
	}
	return 1;
}

command(movehouse, playerid, params[])
{
	new Usage[128], id, string[128];
	if(sscanf(params, "dz", id, Usage))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /movehouse [houseid] [usage]");
			SendClientMessage(playerid, GREY, "Usages: Exterior & Interior.");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	        format(string, sizeof(string), "Houses/House_%d.ini", id);
	        if(strcmp(Usage, "exterior", true) == 0)
        	{
	        	if(!fexist(string))
	        	{
	        	    SendClientMessage(playerid, WHITE, "Invalid house ID!");
	            	return 1;
	        	}
	        	else
	        	{
	        	    DestroyDynamicPickup(Houses[id][HPickupID]);
	        	    GetPlayerPos(playerid, Houses[id][hExteriorX], Houses[id][hExteriorY], Houses[id][hExteriorZ]);

			        if(strcmp(Houses[id][hOwner], "Nobody", true) == 0)
					{
		            	Houses[id][HPickupID] = CreateDynamicPickup(1273, 23, Houses[id][hExteriorX], Houses[id][hExteriorY], Houses[id][hExteriorZ], 0, -1, -1, 150.0);
		            }
		            else
		            {
		                Houses[id][HPickupID] = CreateDynamicPickup(1272, 23, Houses[id][hExteriorX], Houses[id][hExteriorY], Houses[id][hExteriorZ], 0, -1, -1, 150.0);
		            }

	        	    SendClientMessage(playerid, WHITE, "Exterior changed!");
	        	    SaveHouse(id);
	        	}
        	}
	        else if(strcmp(Usage, "interior", true) == 0)
        	{
	        	if(!fexist(string))
	        	{
	        	    SendClientMessage(playerid, WHITE, "Invalid house ID!");
	            	return 1;
	        	}
	        	else
	        	{
	        	    GetPlayerPos(playerid, Houses[id][hInteriorX], Houses[id][hInteriorY], Houses[id][hInteriorZ]);
	        	    Houses[id][hInteriorID] = GetPlayerInterior(playerid);
	        	    SendClientMessage(playerid, WHITE, "Interior changed!");
	        	    SaveHouse(id);
	        	}
        	}
		}
	}
	return 1;
}

command(unmodcar, playerid, params[])
{
	new id;
	if(sscanf(params, "d", id))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /unmodcar [1-3]");
	}
	else
	{
	    switch(id)
	    {
	        case 1:
	        {
	            if(Player[playerid][PlayerCarModel] > 0)
	            {
				    if(GetPlayerVehicleID(playerid) == Player[playerid][CarLinkID])
				    {
					    if(Player[playerid][CarModDelay] == 0)
						{
						    new Float: tmpdamage;

						    Player[playerid][CarPaintJobID] = 0;
							Player[playerid][CarCol1] = 0;
							Player[playerid][CarCol2] = 0;
							Player[playerid][OwnedCarModSlot0] = 0;
							Player[playerid][OwnedCarModSlot1] = 0;
							Player[playerid][OwnedCarModSlot2] = 0;
							Player[playerid][OwnedCarModSlot3] = 0;
							Player[playerid][OwnedCarModSlot4] = 0;
							Player[playerid][OwnedCarModSlot5] = 0;
							Player[playerid][OwnedCarModSlot6] = 0;
							Player[playerid][OwnedCarModSlot7] = 0;
							Player[playerid][OwnedCarModSlot8] = 0;
							Player[playerid][OwnedCarModSlot9] = 0;
							Player[playerid][OwnedCarModSlot10] = 0;
							Player[playerid][OwnedCarModSlot11] = 0;
							Player[playerid][OwnedCarModSlot12] = 0;
							Player[playerid][OwnedCarModSlot13] = 0;
							ChangeVehiclePaintjob(Player[playerid][CarLinkID], 0);
					        GetVehicleHealth(Player[playerid][CarLinkID], tmpdamage);
						    GetVehicleZAngle(Player[playerid][CarLinkID], Player[playerid][CarZAngle]);
						    GetVehiclePos(Player[playerid][CarLinkID], Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
						    DestroyVehicle(Player[playerid][CarLinkID]);

						    OwnedCarCount--;
						    CarCount--;

						    SpawnOwnedCar(playerid, 1);
						    PutPlayerInVehicle(playerid, Player[playerid][CarLinkID], 0);
						    Player[playerid][CarModDelay] = 1;
						    SetVehicleHealth(Player[playerid][CarLinkID], tmpdamage);
						    SendClientMessage(playerid, WHITE, "Your car has respawned and the modifications have been removed.");
					    }
					    else
					    {
					        SendClientMessage(playerid, WHITE, "Please wait your reload time (60 seconds).");
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, WHITE, "You have to be in your car to do this. Use /callcar if you've lost it.");
				    }
	            }
			}
			case 2:
			{
	            if(Player[playerid][PlayerCarModel2] > 0)
	            {
				    if(GetPlayerVehicleID(playerid) == Player[playerid][Car2LinkID])
				    {
					    if(Player[playerid][CarModDelay] == 0)
						{
						    new Float: tmpdamage;

							Player[playerid][Car2Col1] = 0;
							Player[playerid][Car2Col2] = 0;
							Player[playerid][Car2OwnedCarModSlot0] = 0;
							Player[playerid][Car2OwnedCarModSlot1] = 0;
							Player[playerid][Car2OwnedCarModSlot2] = 0;
							Player[playerid][Car2OwnedCarModSlot3] = 0;
							Player[playerid][Car2OwnedCarModSlot4] = 0;
							Player[playerid][Car2OwnedCarModSlot5] = 0;
							Player[playerid][Car2OwnedCarModSlot6] = 0;
							Player[playerid][Car2OwnedCarModSlot7] = 0;
							Player[playerid][Car2OwnedCarModSlot8] = 0;
							Player[playerid][Car2OwnedCarModSlot9] = 0;
							Player[playerid][Car2OwnedCarModSlot10] = 0;
							Player[playerid][Car2OwnedCarModSlot11] = 0;
							Player[playerid][Car2OwnedCarModSlot12] = 0;
							Player[playerid][Car2OwnedCarModSlot13] = 0;
					        GetVehicleHealth(Player[playerid][Car2LinkID], tmpdamage);
						    GetVehicleZAngle(Player[playerid][Car2LinkID], Player[playerid][Car2ZAngle]);
						    GetVehiclePos(Player[playerid][Car2LinkID], Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
						    DestroyVehicle(Player[playerid][Car2LinkID]);

						    OwnedCarCount--;
						    CarCount--;
						    
       						Player[playerid][Car2PaintJobID] = 0;
						    SpawnOwnedCar(playerid, 2);
						    PutPlayerInVehicle(playerid, Player[playerid][Car2LinkID], 0);
						    Player[playerid][CarModDelay] = 1;
						    SetVehicleHealth(Player[playerid][Car2LinkID], tmpdamage);
						    SendClientMessage(playerid, WHITE, "Your car has respawned and the modifications have been removed.");
					    }
					    else
					    {
					        SendClientMessage(playerid, WHITE, "Please wait your reload time (60 seconds).");
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, WHITE, "You have to be in your car to do this. Use /callcar if you've lost it.");
				    }
	            }
			}
			case 3:
			{
	            if(Player[playerid][PlayerCarModel3] > 0)
	            {
				    if(GetPlayerVehicleID(playerid) == Player[playerid][Car3LinkID])
				    {
					    if(Player[playerid][CarModDelay] == 0)
						{
						    new Float: tmpdamage;

							Player[playerid][Car3Col1] = 0;
							Player[playerid][Car3Col2] = 0;
							Player[playerid][Car3OwnedCarModSlot0] = 0;
							Player[playerid][Car3OwnedCarModSlot1] = 0;
							Player[playerid][Car3OwnedCarModSlot2] = 0;
							Player[playerid][Car3OwnedCarModSlot3] = 0;
							Player[playerid][Car3OwnedCarModSlot4] = 0;
							Player[playerid][Car3OwnedCarModSlot5] = 0;
							Player[playerid][Car3OwnedCarModSlot6] = 0;
							Player[playerid][Car3OwnedCarModSlot7] = 0;
							Player[playerid][Car3OwnedCarModSlot8] = 0;
							Player[playerid][Car3OwnedCarModSlot9] = 0;
							Player[playerid][Car3OwnedCarModSlot10] = 0;
							Player[playerid][Car3OwnedCarModSlot11] = 0;
							Player[playerid][Car3OwnedCarModSlot12] = 0;
							Player[playerid][Car3OwnedCarModSlot13] = 0;
					        GetVehicleHealth(Player[playerid][Car3LinkID], tmpdamage);
						    GetVehicleZAngle(Player[playerid][Car3LinkID], Player[playerid][Car3ZAngle]);
						    GetVehiclePos(Player[playerid][Car3LinkID], Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
						    DestroyVehicle(Player[playerid][Car3LinkID]);

						    OwnedCarCount--;
						    CarCount--;

       						Player[playerid][Car3PaintJobID] = 0;
						    SpawnOwnedCar(playerid, 2);
						    PutPlayerInVehicle(playerid, Player[playerid][Car3LinkID], 0);
						    Player[playerid][CarModDelay] = 1;
						    SetVehicleHealth(Player[playerid][Car3LinkID], tmpdamage);
						    SendClientMessage(playerid, WHITE, "Your car has respawned and the modifications have been removed.");
					    }
					    else
					    {
					        SendClientMessage(playerid, WHITE, "Please wait your reload time (60 seconds).");
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, WHITE, "You have to be in your car to do this. Use /callcar if you've lost it.");
				    }
	            }
			}
			default:
			{
			    SendClientMessage(playerid, WHITE, "Invalid vehicle slot.");
			}
	    }
	}
	return 1;
}

command(setbusinesssupplies, playerid, params[])
{
	new amount, id, string[128];
	if(sscanf(params, "dd", id, amount))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /setbusinesssupplies [businessid] [amount]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
		    format(string, sizeof(string), "Businesses/Business_%d.ini", id);
		    if(fexist(string))
		    {
		        Businesses[id][bSupplies] = amount;
		        format(string, sizeof(string), "You have set business %d (%s)'s supplies to %d.", id, Businesses[id][bName], amount);
		        SendClientMessage(playerid, WHITE, string);
		        SaveBusiness(id);
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Invalid business ID.");
		    }
	    }
	}
	return 1;
}

command(movebusiness, playerid, params[])
{
	new Usage[128], id, string[128];
	if(sscanf(params, "dz", id, Usage))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /movebusiness [businessid] [usage]");
			SendClientMessage(playerid, GREY, "Usages: Exterior & Interior.");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	        format(string, sizeof(string), "Businesses/Business_%d.ini", id);
	        if(strcmp(Usage, "exterior", true) == 0)
        	{
	        	if(!fexist(string))
	        	{
	        	    SendClientMessage(playerid, WHITE, "Invalid business ID!");
	            	return 1;
	        	}
	        	else
	        	{
	        	    DestroyDynamicPickup(Businesses[id][bPickupID]);
	        	    Businesses[id][bExteriorID] = GetPlayerInterior(playerid);
	        	    GetPlayerPos(playerid, Businesses[id][bExteriorX], Businesses[id][bExteriorY], Businesses[id][bExteriorZ]);
	        	    Businesses[id][bPickupID] = CreateDynamicPickup(1239, 23, Businesses[id][bExteriorX], Businesses[id][bExteriorY], Businesses[id][bExteriorZ], 0, -1, -1, 150.0);
	        	    SendClientMessage(playerid, WHITE, "Exterior changed!");
	        	    SaveBusiness(id);
	        	}
        	}
	        else if(strcmp(Usage, "interior", true) == 0)
        	{
	        	if(!fexist(string))
	        	{
	        	    SendClientMessage(playerid, WHITE, "Invalid house ID!");
	            	return 1;
	        	}
	        	else
	        	{
	        	    GetPlayerPos(playerid, Businesses[id][bInteriorX], Businesses[id][bInteriorY], Businesses[id][bInteriorZ]);
	        	    Businesses[id][bInteriorID] = GetPlayerInterior(playerid);
	        	    SendClientMessage(playerid, WHITE, "Interior changed!");
	        	    SaveBusiness(id);
	        	}
        	}
		}
	}
	return 1;
}

command(killspotlight, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 1)
	{
		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerConnectedEx(i) && Player[i][SpotlightEffect] == 1)
		    {
		        Player[i][SpotlightEffect] = 0;
		        Player[i][Checkpoint] = 0;
		        DisablePlayerCheckpoint(i);
		    }
		}

		Spotlight = -1;

		SendClientMessage(playerid, WHITE, "Killed the spotlight.");
	}
	return 1;
}

command(adivorce, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /adivorce [playerid]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
		    if(IsPlayerConnectedEx(id))
		    {
		        format(string, sizeof(string), "You have forced an admin divorce for %s.", GetName(id));
		        SendClientMessage(playerid, WHITE, string);
		        format(string, sizeof(string), "Server Admin %s has cleared your marrital record.", GetName(playerid));
		        SendClientMessage(id, WHITE, string);
		        format(Player[id][MarriedTo], 255, "Nobody");
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		    }
	    }
	}
	return 1;
}

command(agotohouse, playerid, params[])
{
	new Usage[128], id, string[128];
	if(sscanf(params, "dz", id, Usage))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /agotohouse [houseid] [usage]");
			SendClientMessage(playerid, GREY, "Usages: Exterior & Interior.");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
	        format(string, sizeof(string), "Houses/House_%d.ini", id);
	        if(strcmp(Usage, "exterior", true) == 0)
        	{
	        	if(!fexist(string))
	        	{
	        	    SendClientMessage(playerid, WHITE, "Invalid house ID!");
	            	return 1;
	        	}
	        	else
	        	{
	        	    SetPlayerInterior(playerid, Houses[id][hExteriorID]);
	        	    SetPlayerPos(playerid, Houses[id][hExteriorX], Houses[id][hExteriorY], Houses[id][hExteriorZ]);
	        	    SetPlayerVirtualWorld(playerid, 0);
	        	}
        	}
	        else if(strcmp(Usage, "interior", true) == 0)
        	{
	        	if(!fexist(string))
	        	{
	        	    SendClientMessage(playerid, WHITE, "Invalid house ID!");
	            	return 1;
	        	}
	        	else
	        	{
	        	    SetPlayerInterior(playerid, Houses[id][hInteriorID]);
	        	    SetPlayerPos(playerid, Houses[id][hInteriorX], Houses[id][hInteriorY], Houses[id][hInteriorZ]);
	        	    SetPlayerVirtualWorld(playerid, id);
	        	}
        	}
		}
	}
	return 1;
}

// This command has been removed as of 18/11/2010. You can uncomment it to re-enable it.
// The reason the command was removed is because of the fact that a majority of the scriptfiles for businesses are missing in the SVN repository,
// and they won't be uploaded. Uncomment case 6125 in OnPlayerDialogResponse as well to re-enable this command.
/*command(map, playerid, params[])
{
	#pragma unused params
	ShowPlayerDialog(playerid, 6125, DIALOG_STYLE_LIST, "Select a Location", "Bank\nMechanic Job\nGuard Job\nDetective Job\nLSPD HQ\nVehicle Dealership\nLawyer Job\nCollege\nDelivery Job\n", "Select", "Cancel");
	return 1;
}*/

command(movejob, playerid, params[])
{
	new Usage[128], id, string[128];
	if(sscanf(params, "dz", id, Usage))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /movejob [jobid] [usage]");
			SendClientMessage(playerid, GREY, "Usages: JoinPos, Location1, Location2");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	        format(string, sizeof(string), "Jobs/Job_%d.ini", id);
	        if(strcmp(Usage, "JoinPos", true) == 0)
        	{
	        	if(!fexist(string))
	        	{
	        	    SendClientMessage(playerid, WHITE, "Invalid job ID!");
	            	return 1;
	        	}
	        	else
	        	{
	        	    DestroyDynamicPickup(Jobs[id][JobJoinPosPickupID]);
	        	    Jobs[id][JobJoinPosInterior] = GetPlayerInterior(playerid);
	        	    Jobs[id][JobJoinPosWorld] = GetPlayerVirtualWorld(playerid);
	        	    GetPlayerPos(playerid, Jobs[id][JobJoinPosX], Jobs[id][JobJoinPosY], Jobs[id][JobJoinPosZ]);
	        	    Jobs[id][JobJoinPosPickupID] = CreateDynamicPickup(1239, 23, Jobs[id][JobJoinPosX], Jobs[id][JobJoinPosY], Jobs[id][JobJoinPosZ], Jobs[id][JobJoinPosWorld], -1, -1, 150.0);
	        	    SendClientMessage(playerid, WHITE, "Join Job position updated.");
	        	    SaveJobs();
	        	}
        	}
	        else if(strcmp(Usage, "location1", true) == 0)
        	{
	        	if(!fexist(string))
	        	{
	        	    SendClientMessage(playerid, WHITE, "Invalid job ID!");
	            	return 1;
	        	}
	        	else
	        	{
	        	    DestroyDynamicPickup(Jobs[id][JobMiscLocationOnePickupID]);
	        	    Jobs[id][JobMiscLocationOneInterior] = GetPlayerInterior(playerid);
	        	    Jobs[id][JobMiscLocationOneWorld] = GetPlayerVirtualWorld(playerid);
	        	    GetPlayerPos(playerid, Jobs[id][JobMiscLocationOneX], Jobs[id][JobMiscLocationOneY], Jobs[id][JobMiscLocationOneZ]);
	        	    Jobs[id][JobMiscLocationOnePickupID] = CreateDynamicPickup(1239, 23, Jobs[id][JobMiscLocationOneX], Jobs[id][JobMiscLocationOneY], Jobs[id][JobMiscLocationOneZ], Jobs[id][JobMiscLocationOneWorld], -1, -1, 150.0);
	        	    SendClientMessage(playerid, WHITE, "Join Job position updated.");
	        	    SaveJobs();
	        	}
        	}
	        else if(strcmp(Usage, "location2", true) == 0)
        	{
	        	if(!fexist(string))
	        	{
	        	    SendClientMessage(playerid, WHITE, "Invalid job ID!");
	            	return 1;
	        	}
	        	else
	        	{
	        	    DestroyDynamicPickup(Jobs[id][JobMiscLocationTwoPickupID]);
	        	    Jobs[id][JobMiscLocationTwoInterior] = GetPlayerInterior(playerid);
	        	    Jobs[id][JobMiscLocationTwoWorld] = GetPlayerVirtualWorld(playerid);
	        	    GetPlayerPos(playerid, Jobs[id][JobMiscLocationTwoX], Jobs[id][JobMiscLocationTwoY], Jobs[id][JobMiscLocationTwoZ]);
	        	    Jobs[id][JobMiscLocationTwoPickupID] = CreateDynamicPickup(1239, 23, Jobs[id][JobMiscLocationTwoX], Jobs[id][JobMiscLocationTwoY], Jobs[id][JobMiscLocationTwoZ], Jobs[id][JobMiscLocationTwoWorld], -1, -1, 150.0);
	        	    SendClientMessage(playerid, WHITE, "Join Job position updated.");
	        	    SaveJobs();
	        	}
        	}
		}
	}
	return 1;
}

command(unblindfold, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /unblindfold [playerid]");
	}
	else
	{
	    if(!IsPlayerConnectedEx(id))
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or is not logged in.");
	    }
	    else
	    {
	        if(GetDistanceBetweenPlayers(playerid, id) < 5)
	        {
	            if(Player[playerid][Cuffed] >= 1 || Player[playerid][HospitalTime] >= 1 || Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1)
	            {
	                SendClientMessage(playerid, WHITE, "You can't do this right now.");
	            }
	            else
	            {
	                if(Player[id][Blindfolded] >= 1)
	                {
						Player[id][Blindfolded] = 0;
						SetPlayerDrunkLevel(id, 0);
						SetCameraBehindPlayer(id);
						format(string, sizeof(string), "* %s grabs the rag off of %s's face.", GetName(playerid), GetName(id));
						NearByMessage(playerid, NICESKY, string);
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "That player isn't even tied.");
					}
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You're too far away.");
	        }
        }
	}
	return 1;
}

command(togquizes, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][ToggedQUIZ] == 1)
	{
	    Player[playerid][ToggedQUIZ] = 0;
	    SendClientMessage(playerid, WHITE, "You will now see quiz messages.");
	}
	else
	{
	    Player[playerid][ToggedQUIZ] = 1;
	    SendClientMessage(playerid, WHITE, "You will no longer see quiz messages.");
	}
	return 1;
}

command(endround, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 4)
	{
	    if(ActiveQuiz >= 1)
	    {
	        ActiveQuiz = 0;
	        QuizText("The quiz round has been finished!");
	    }
	}
	return 1;
}

command(startround, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 4)
	{
		ShowPlayerDialog(playerid, 4541, DIALOG_STYLE_INPUT, "Quiz Question", "Please set the question for the Quiz.", "Done", "Cancel");
	}
	return 1;
}

command(shakehand, playerid, params[])
{
	new style, id, string[128];
	if(sscanf(params, "ud", id, style))
	{
    	SendClientMessage(playerid, WHITE, "SYNTAX: /shakehand [playerid] [1-9]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
	        if(GetDistanceBetweenPlayers(playerid, id) < 2)
	        {
	            if(style >= 1 && style < 10)
	            {
		            Player[id][PendingHandshakeStyle] = style;
		            Player[id][PendingHandshake] = playerid;
		            format(string, sizeof(string), "You have requested to shake %s's hand.", GetName(id));
		            SendClientMessage(playerid, WHITE, string);
		            format(string, sizeof(string), "%s is requesting to shake your hand... Type /approve handshake to shake hands!", GetName(playerid));
		            SendClientMessage(id, NICESKY, string);
	            }
	            else
	            {
	                SendClientMessage(playerid, WHITE, "SYNTAX: /handshake [playerid] [1-9]");
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "Please stand closer to them.");
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or is not logged in.");
	    }
	}
	return 1;
}

command(quizhint, playerid, params[])
{
	new hint[128], string[128];
	if(sscanf(params, "z", hint))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	    	SendClientMessage(playerid, WHITE, "SYNTAX: /quizhint [hint]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	        if(strlen(hint) >= 1)
	        {
	            format(string, sizeof(string), "((Quiz HINT from %s: %s)) ", GetName(playerid), hint);
	            QuizText(string);
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "SYNTAX: /quizhint [hint]");
	        }
	    }
	}
	return 1;
}

command(forcetutorial, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
	    	SendClientMessage(playerid, WHITE, "SYNTAX: /forcetutorial [playerid]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
		    if(IsPlayerConnectedEx(id))
		    {
				if(Player[id][AdminLevel] < Player[playerid][AdminLevel])
				{
				    format(string, sizeof(string), "You have forced %s in to the tutorial.", GetName(id));
				    SendClientMessage(playerid, WHITE, string);
				    
		    		PutPlayerInTutorial(id, 0);
		    	}
		    	else
		    	{
		    	    SendClientMessage(playerid, WHITE, "You can't do that to a higher level admin.");
		    	}
		    }
	    }
    }
    return 1;
}

command(answerq, playerid, params[])
{
	new answer[128], string[128];
	if(sscanf(params, "z", answer))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /answerq [answer]");
	}
	else
	{
	    if(ActiveQuiz >= 1)
	    {
	        if(strlen(answer) >= 1)
	        {
		        if(strcmp(answer, QuizAnswer, true) == 0)
		        {
		            format(string, sizeof(string), "%s has the correct answer!", GetName(playerid));
		            QuizText(string);
					Player[playerid][AnsweredQuizQuestions]++;
					
					switch(Player[playerid][AnsweredQuizQuestions])
					{
					    case 100:
					    {
					        SendClientMessage(playerid, WHITE, "You have unlocked a new achievement!");
					        SendClientMessage(playerid, GREY, "You have submitted 100 correct quiz answers.");
					        Player[playerid][AchievementRank]++;
					    }
					    case 200:
					    {
					        SendClientMessage(playerid, WHITE, "You have unlocked a new achievement!");
					        SendClientMessage(playerid, GREY, "You have submitted 200 correct quiz answers");
					        Player[playerid][AchievementRank]++;
					    }
					}
		        }
		        else
		        {
				    format(string, sizeof(string), "%s has submitted the answer: %s", GetName(playerid), answer);
				    SendToAdmins(ADMINORANGE, string, 1);
				}
				
			    format(string, sizeof(string), "You have submitted: %s.", answer);
			    SendClientMessage(playerid, WHITE, string);
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "SYNTAX: /answerq [answer]");
		    }
	    }
	}
	return 1;
}

command(clearchat, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 4)
	{
	    for(new i = 0; i < 60; i++)
	    {
	        SendClientMessageToAll(GREY, "Clearing Chat...");
	    }
	}

	return 1;
}

command(gag, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /gag [playerid]");
	}
	else
	{
	    if(!IsPlayerConnectedEx(id))
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or is not logged in.");
	    }
	    else
	    {
		    if(Player[playerid][Rags] >= 1)
		    {
		        if(GetDistanceBetweenPlayers(playerid, id) < 5)
		        {
		            if(Player[playerid][Cuffed] >= 1 || Player[playerid][HospitalTime] >= 1 || Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1)
		            {
		                SendClientMessage(playerid, WHITE, "You can't do this right now.");
		            }
		            else
		            {
		                if(Player[id][Tied] >= 1 || Player[id][Cuffed] >= 1)
		                {
			                Player[id][Gagged] = 1;
							format(string, sizeof(string), "* %s grabs a rag, and ties it around %s's mouth.", GetName(playerid), GetName(id));
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][Rags]--;
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "You must cuff/tie them first.");
						}
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You're too far away.");
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You have no rags left.");
		    }
	    }
	}
	return 1;
}

command(ungag, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /ungag [playerid]");
	}
	else
	{
	    if(!IsPlayerConnectedEx(id))
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or is not logged in.");
	    }
	    else
	    {
		    if(Player[playerid][Rags] >= 1)
		    {
		        if(GetDistanceBetweenPlayers(playerid, id) < 5)
		        {
		            if(Player[playerid][Cuffed] >= 1 || Player[playerid][HospitalTime] >= 1 || Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1)
		            {
		                SendClientMessage(playerid, WHITE, "You can't do this right now.");
		            }
		            else
		            {
		                if(Player[id][Tied] >= 1 || Player[id][Cuffed] >= 1)
		                {
			                Player[id][Gagged] = 0;
							format(string, sizeof(string), "* %s has whipped the rag off of %s's mouth.", GetName(playerid), GetName(id));
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][Rags]--;
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "You must cuff/tie them first.");
						}
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You're too far away.");
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You have no rags left.");
		    }
	    }
	}
	return 1;
}

command(blindfold, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /blindfold [playerid]");
	}
	else
	{
	    if(!IsPlayerConnectedEx(id))
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or is not logged in.");
	    }
	    else
	    {
		    if(Player[playerid][Rags] >= 1)
		    {
		        if(GetDistanceBetweenPlayers(playerid, id) < 5)
		        {
		            if(Player[playerid][Cuffed] >= 1 || Player[playerid][HospitalTime] >= 1 || Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1)
		            {
		                SendClientMessage(playerid, WHITE, "You can't do this right now.");
		            }
		            else
		            {
			            if(Player[id][Tied] >= 1 || Player[id][Cuffed] >= 1)
			            {
			                Player[playerid][Rags]--;
						    SetPlayerDrunkLevel(id, 50000);
							SetPlayerCameraLookAt(id, -830.8118, -1360.3612, 87.0289);
							format(string, sizeof(string), "* %s grabs a rag, and ties it around %s's eyes.", GetName(playerid), GetName(id));
							NearByMessage(playerid, NICESKY, string);
							Player[id][Blindfolded] = 1;
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You must cuff/tie them first.");
			            }
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You're too far away.");
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You have no rags left.");
		    }
	    }
	}
	return 1;
}

command(houseprice, playerid, params[])
{
	new money, id, string[128];
	if(sscanf(params, "dd", id, money))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	    	SendClientMessage(playerid, WHITE, "SYNTAX: /houseprice [houseid] [usage]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
	        format(string, sizeof(string), "Houses/House_%d.ini", id);
        	if(!fexist(string))
        	{
        	    SendClientMessage(playerid, WHITE, "Invalid house ID!");
            	return 1;
        	}
        	else
        	{
        	    Houses[id][HousePrice] = money;
        	    SaveHouse(id);
        	}
		}
	}
	return 1;
}

command(businessprice, playerid, params[])
{
	new money, id, string[128];
	if(sscanf(params, "dd", id, money))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /businessprice [businessid] [usage]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
	        format(string, sizeof(string), "Businesses/Business_%d.ini", id);
	        
        	if(!fexist(string))
        	{
        	    SendClientMessage(playerid, WHITE, "Invalid business ID!");
            	return 1;
        	}
        	else
        	{
        	    Businesses[id][bPrice] = money;
        	    SaveBusiness(id);
        	}
		}
	}
	return 1;
}

command(businesstype, playerid, params[])
{
	new type, id, string[128];
	if(sscanf(params, "dd", id, type))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /businesstype [businessid] [type]");
		    SendClientMessage(playerid, WHITE, "Types: 1 - 24/7 | 2 - Clothing | 3 - Club (/buydrink) | 4 - Advertisement Agency | 5 - Sex Shop | 6 - Vehicle Dealership");
	        SendClientMessage(playerid, WHITE, "Types: 7 - College | 8 - Charity | 9 - Church | 10 - Gym | 11 - Pharmacy | 12 - Restraunt");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	        format(string, sizeof(string), "Businesses/Business_%d.ini", id);

        	if(!fexist(string))
        	{
        	    SendClientMessage(playerid, WHITE, "Invalid business ID!");
            	return 1;
        	}
        	else
        	{
        	    Businesses[id][bType] = type;
        	    SaveBusiness(id);
        	    format(string, sizeof(string), "You have set the business type to %d.", type);
        	    SendClientMessage(playerid, WHITE, string);
        	}
		}
	}
	return 1;
}

command(stun, playerid, params[])
{
	#pragma unused params
	new string[128], NearestPlayer = GetClosestPlayer(playerid);

    if(Groups[Player[playerid][Group]][CommandTypes] != 1 && Groups[Player[playerid][Group]][CommandTypes] != 4)
    {
        SendClientMessage(playerid, WHITE, "You're not a law enforcement officer!");
    }
    else if(Groups[Player[NearestPlayer][Group]][CommandTypes] == 1 || Groups[Player[NearestPlayer][Group]][CommandTypes] == 4)
    {
        SendClientMessage(playerid, WHITE, "Nearest player is a law enforcer!");
    }
    else
    {
	    if(GetDistanceBetweenPlayers(NearestPlayer, playerid) < 6)
        {
            if(Player[NearestPlayer][Tazed] == 0)
            {
                if(!IsPlayerInAnyVehicle(NearestPlayer))
                {
    				TogglePlayerControllable(NearestPlayer, false);
    				Player[NearestPlayer][Tazed] = 1;
    	    		format(string, sizeof(string), "* %s has stunned %s, with their taser.", GetName(playerid), GetName(NearestPlayer));
    	    		NearByMessage(playerid, NICESKY, string);
    	    		SendClientMessage(NearestPlayer, WHITE, "You have been tased. The effect will last for 12 seconds.");
    	    		SetTimerEx("UntazePlayer", 12000, false, "d", NearestPlayer);
    	    	}
    	    	else
    	    	{
    	    	    SendClientMessage(playerid, WHITE, "The suspect is in a vehicle, you can't tase whilst they're in a vehicle.");
    	    	}
    	    }
    	    else
    	    {
    	        SendClientMessage(playerid, WHITE, "That player is already stunned.");
    	    }
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "No players in range!");
		}
	}
	return 1;
}

command(hostname, playerid, params[])
{
	new name[128], string[128];
	if(sscanf(params, "z", name))
	{
	    if(Player[playerid][AdminLevel] >= 6)
	    {
	    	SendClientMessage(playerid, WHITE, "SYNTAX: /hostname [new name]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 6)
	    {
	        format(string, sizeof(string), "You have changed the server's name to %s.", name);
	        SendClientMessage(playerid, WHITE, string);
	        format(string, sizeof(string), "hostname %s", name);
	        SendRconCommand(string);
	    }
	}
	return 1;
}

command(unfreeze, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	    	SendClientMessage(playerid, WHITE, "SYNTAX: /unfreeze [playerid]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
	    	if(IsPlayerConnectedEx(id))
	    	{
	    	    if(Player[id][Cuffed] >= 1 || Player[id][Tazed] >= 1)
	    	    {
	    	        SendClientMessage(playerid, WHITE, "You can't unfreeze a tazed / cuffed player.");
	    	    }
	    	    else
	    	    {
		        	TogglePlayerControllable(id, true);
		        	format(string, sizeof(string), "You have un-frozen player %s.", GetName(id));
		        	SendClientMessage(playerid, WHITE, string);
	        	}
	    	}
	    	else
	    	{
	        	SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    	}
	    }
	}
	return 1;
}

command(drop, playerid, params[])
{
	new string[128];
	format(string, sizeof(string), "Pot (%d grams)\nCocaine (%d grams)\nMaterials (%d materials)\nWeapons\nPhone\nWalkie Talkie\n", Player[playerid][Pot], Player[playerid][Cocaine], Player[playerid][Materials]);
    ShowPlayerDialog(playerid, 4621, DIALOG_STYLE_LIST, "Inventory", string, "Drop", "Cancel");
	return 1;
}

command(setcargroup, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "d", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	    	SendClientMessage(playerid, WHITE, "SYNTAX: /setcargroup [group ID]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	        if(IsPlayerInAnyVehicle(playerid))
	        {
	            if(id >= 0 && id < MAX_GROUPS)
	            {
	                if(GetVehicleFileID(GetPlayerVehicleID(playerid))  == 0)
	                {
	                    SendClientMessage(playerid, WHITE, "That doesn't seem to be a saved vehicle.");
	                }
	                else
	                {
	                    if(id == 0)
	                    {
	                        SendClientMessage(playerid, WHITE, "You have unlocked this vehicle.");
	                        Vehicles[GetVehicleFileID(GetPlayerVehicleID(playerid))][CarGroup] = 0;
	                    }
	                    else
	                    {
				            Vehicles[GetVehicleFileID(GetPlayerVehicleID(playerid))][CarGroup] = id;
				            format(string, sizeof(string), "You have locked this vehicle to Group %s.", Groups[id][GroupName]);
				            SendClientMessage(playerid, WHITE, string);
				            SaveExistingVehicle(GetPlayerVehicleID(playerid));
			            }
		            }
		        }
		        else
		        {
		            format(string, sizeof(string), "Invalid Group ID (groups vary from ID 1 to ID %d).", MAX_GROUPS);
		            SendClientMessage(playerid, WHITE, string);
		        }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You're not in a valid vehicle.");
	        }
	    }
	}
	return 1;
}

command(givecar, playerid, params[])
{
	new id, vehslot, string[128];
	if(sscanf(params, "ud", id, vehslot))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /givecar [playerid] [1-3]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
	        if(vehslot >= 1 && vehslot < 4)
			{
			    switch(vehslot)
			    {
			        case 1:
			        {
			            if(Player[playerid][PlayerCarModel] >= 1)
			            {
				            if(GetDistanceBetweenPlayers(playerid, id) < 7)
				            {
				                Player[id][PendingCarReceival] = playerid;
				                Player[id][GivingSlot] = 1;
				                format(string, sizeof(string), "You have requested to give your vehicle to %s from slot 1.", GetName(id));
				                SendClientMessage(playerid, WHITE, string);
				                format(string, sizeof(string), "%s is requesting to give you their vehicle (type /approve givecar).", GetName(playerid));
				                SendClientMessage(id, NICESKY, string);
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "You're too far away!");
				            }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have a vehicle in this slot.");
			            }
			        }
			        case 2:
			        {
			            if(Player[playerid][PlayerCarModel2] >= 1)
			            {
				            if(GetDistanceBetweenPlayers(playerid, id) < 7)
				            {
				                Player[id][PendingCarReceival] = playerid;
				                Player[id][GivingSlot] = 2;
				                format(string, sizeof(string), "You have requested to give your vehicle to %s from slot 2.", GetName(id));
				                SendClientMessage(playerid, WHITE, string);
				                format(string, sizeof(string), "%s is requesting to give you their vehicle (type /approve givecar).", GetName(playerid));
				                SendClientMessage(id, NICESKY, string);
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "You're too far away!");
				            }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have a vehicle in this slot.");
			            }
			        }
			        case 3:
			        {
			            if(Player[playerid][PlayerCarModel3] >= 1)
			            {
				            if(GetDistanceBetweenPlayers(playerid, id) < 7)
				            {
				                Player[id][PendingCarReceival] = playerid;
				                Player[id][GivingSlot] = 3;
				                format(string, sizeof(string), "You have requested to give your vehicle to %s from slot 3.", GetName(id));
				                SendClientMessage(playerid, WHITE, string);
				                format(string, sizeof(string), "%s is requesting to give you their vehicle (type /approve givecar).", GetName(playerid));
				                SendClientMessage(id, NICESKY, string);
				            }
				            else
				            {
				                SendClientMessage(playerid, WHITE, "You're too far away!");
				            }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have a vehicle in this slot.");
			            }
			        }
			    }
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "Invalid vehicle slot.");
			}
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That specified player not connected or isn't logged in.");
	    }
	}
	return 1;
}

command(give, playerid, params[])
{
	new item[128], quantity, id, string[128];
	if(sscanf(params, "udz", id, quantity, item))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /give [playerid] [quantity] [item]");
	    SendClientMessage(playerid, GREY, "Items: Pot, Cocaine, Rags, Rope, Materials");
	}
	else
	{
	    if(quantity < 1)
	    {
	        SendClientMessage(playerid, WHITE, "Invalid amount.");
	    }
	    else
	    {
		    if(strcmp(item, "materials", true) == 0)
		    {
		        if(Player[playerid][Materials] >= quantity)
		        {
		            if(IsPlayerConnectedEx(id))
		            {
		                if(GetDistanceBetweenPlayers(playerid, id) < 7)
		                {
		                    Player[id][Materials] += quantity;
		                    Player[playerid][Materials] -= quantity;
							format(string, sizeof(string), "You have passed %d materials on to %s.", quantity, GetName(id));
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "You have been given %d materials, from %s.", quantity, GetName(playerid));
							SendClientMessage(id, WHITE, string);
							format(string, sizeof(string), "* %s has passed %d materials to %s.", GetName(playerid), quantity, GetName(id));
							NearByMessage(playerid, NICESKY, string);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "You're too far away.");
		                }
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You don't have enough materials.");
				}
		    }
		    else if(strcmp(item, "rags", true) == 0)
		    {
		        if(Player[playerid][Rags] >= quantity)
		        {
		            if(IsPlayerConnectedEx(id))
		            {
		                if(GetDistanceBetweenPlayers(playerid, id) < 7)
		                {
		                    Player[id][Rags] += quantity;
		                    Player[playerid][Rags] -= quantity;
							format(string, sizeof(string), "You have passed %d rags on to %s.", quantity, GetName(id));
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "You have been given %d rags, from %s.", quantity, GetName(playerid));
							SendClientMessage(id, WHITE, string);
							format(string, sizeof(string), "* %s has passed %d rags to %s.", GetName(playerid), quantity, GetName(id));
							NearByMessage(playerid, NICESKY, string);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "You're too far away.");
		                }
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You don't have enough rags.");
				}
		    }
		    else if(strcmp(item, "rope", true) == 0)
		    {
		        if(Player[playerid][Rope] >= quantity)
		        {
		            if(IsPlayerConnectedEx(id))
		            {
		                if(GetDistanceBetweenPlayers(playerid, id) < 7)
		                {
		                    Player[id][Rope] += quantity;
		                    Player[playerid][Rope] -= quantity;
							format(string, sizeof(string), "You have passed %d lines of rope on to %s.", quantity, GetName(id));
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "You have been given %d lines of rope, from %s.", quantity, GetName(playerid));
							SendClientMessage(id, WHITE, string);
							format(string, sizeof(string), "* %s has passed %d lines of rope to %s.", GetName(playerid), quantity, GetName(id));
							NearByMessage(playerid, NICESKY, string);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "You're too far away.");
		                }
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You don't have enough rope.");
				}
		    }
		    else if(strcmp(item, "Cocaine", true) == 0)
		    {
		        if(Player[playerid][Cocaine] >= quantity)
		        {
		            if(IsPlayerConnectedEx(id))
		            {
		                if(GetDistanceBetweenPlayers(playerid, id) < 7)
		                {
		                    Player[id][Cocaine] += quantity;
		                    Player[playerid][Cocaine] -= quantity;
							format(string, sizeof(string), "You have passed %d grams of Cocaine on to %s.", quantity, GetName(id));
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "You have been given %d grams of Cocaine, from %s.", quantity, GetName(playerid));
							SendClientMessage(id, WHITE, string);
							format(string, sizeof(string), "* %s has passed %d grams of Cocaine to %s.", GetName(playerid), quantity, GetName(id));
							NearByMessage(playerid, NICESKY, string);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "You're too far away.");
		                }
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "That specified player not connected or isn't logged in.");
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You don't have enough Cocaine.");
				}
		    }
		    else if(strcmp(item, "Pot", true) == 0)
		    {
		        if(Player[playerid][Pot] >= quantity)
		        {
		            if(IsPlayerConnectedEx(id))
		            {
		                if(GetDistanceBetweenPlayers(playerid, id) < 7)
		                {
		                    Player[id][Pot] += quantity;
		                    Player[playerid][Pot] -= quantity;
							format(string, sizeof(string), "You have passed %d grams of Pot on to %s.", quantity, GetName(id));
							SendClientMessage(playerid, WHITE, string);
							format(string, sizeof(string), "You have been given %d grams of Pot, from %s.", quantity, GetName(playerid));
							SendClientMessage(id, WHITE, string);
							format(string, sizeof(string), "* %s has passed %d grams of Pot to %s.", GetName(playerid), quantity, GetName(id));
							NearByMessage(playerid, NICESKY, string);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "You're too far away.");
		                }
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "That specified player not connected or isn't logged in.");
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You don't have enough Pot.");
				}
		    }
		}
	}
	return 1;
}

command(anticheat, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 5)
	{
	    if(CurrentEvent >= 1)
	    {
	        if(Anticheat == -1)
	        {
	            Anticheat = 0;
	            SendClientMessage(playerid, WHITE, "You have disabled the anticheat.");
	        }
	        else
	        {
	        	SendClientMessage(playerid, WHITE, "You can't enable the anticheat in an event.");
	        }
	    }
	    else
	    {
		    if(Anticheat == 0)
		    {
		        Anticheat = 1;
		        SendClientMessage(playerid, WHITE, "You have enabled the anticheat.");
		    }
		    else
		    {
		        Anticheat = 0;
		        SendClientMessage(playerid, WHITE, "You have disabled the anticheat.");
		    }
	    }
	}
	return 1;
}

command(getsupplies, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Checkpoint] >= 1)
	{
	    SendClientMessage(playerid, WHITE, "You must first reach your concurrent checkpoint.");
	}
	else
	{
	    if(Jobs[Player[playerid][Job]][JobType] == 5)
	    {
	 		for(new h = 0; h < sizeof(Jobs); h++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 5, Jobs[h][JobMiscLocationOneX], Jobs[h][JobMiscLocationOneY], Jobs[h][JobMiscLocationOneZ]))
			    {
			        if(Player[playerid][Job] == h && Jobs[Player[playerid][Job]][JobType] == 5)
			        {
			            if(Jobs[h][JobMiscLocationOneWorld] == GetPlayerVirtualWorld(playerid))
			            {
						    SendClientMessage(playerid, WHITE, "Please select the supplies type you wish to collect.");
						    ShowPlayerDialog(playerid, 1621, DIALOG_STYLE_LIST, "Delivery Job", "Grocery Supplies (24/7)\nClothes (Skin Shops)\nAlcohol (Bars / Clubs)\nAdult Toys (Porn Shops)\nFood (Restraunts)\n", "Select", "Cancel");
						}
					}
				}
			}
		}
	}
	return 1;
}

command(studioobjects, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Group] == 5)
	{
	    if(Player[playerid][GroupRank] >= 5)
	    {
		    if(StudioObjectsSpawned == 1)
		    {
		        StudioObjectsSpawned = 0;
		        for(new i = 0; i < MAX_STUDIO_OBJECTS; i++)
				{
				    DestroyDynamicObject(StudioObjects[i]);
				}
		    }
		    else
		    {
		        StudioObjectsSpawned = 1;
				StudioObjects[0] = CreateDynamicObject(1424, 1502.8394775391, -1583.5865478516, 13.060384750366, 0.000000, 0.000000, 89.324493408203, -1, -1, -1, 250.0);
				StudioObjects[1] = CreateDynamicObject(1424, 1501.8811035156, -1584.5316162109, 13.060384750366, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[2] = CreateDynamicObject(1424, 1500.0139160156, -1584.5579833984, 13.060384750366, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[3] = CreateDynamicObject(1424, 1498.1630859375, -1584.5771484375, 13.060384750366, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[4] = CreateDynamicObject(1424, 1496.3121337891, -1584.5844726563, 13.060384750366, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[5] = CreateDynamicObject(1424, 1494.4666748047, -1584.5993652344, 13.060384750366, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[6] = CreateDynamicObject(1425, 1442.1081542969, -1590.1590576172, 12.8353099823, 0.000000, 0.000000, 268.69067382813, -1, -1, -1, 250.0);
				StudioObjects[7] = CreateDynamicObject(1423, 1443.9427490234, -1588.8822021484, 13.09375, 0.000000, 0.000000, 89.324493408203, -1, -1, -1, 250.0);
				StudioObjects[8] = CreateDynamicObject(1423, 1444.7576904297, -1591.1243896484, 13.09375, 0.000000, 0.000000, 326.25524902344, -1, -1, -1, 250.0);
				StudioObjects[9] = CreateDynamicObject(1423, 1447.2380371094, -1591.7987060547, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[10] = CreateDynamicObject(1423, 1449.8553466797, -1591.7955322266, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[11] = CreateDynamicObject(1423, 1452.3983154297, -1591.8347167969, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[12] = CreateDynamicObject(1423, 1454.9035644531, -1591.8175048828, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[13] = CreateDynamicObject(1228, 1444.3485107422, -1586.060546875, 12.96800327301, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[14] = CreateDynamicObject(1423, 1457.5024414063, -1591.7775878906, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[15] = CreateDynamicObject(1423, 1460.1005859375, -1591.79296875, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[16] = CreateDynamicObject(1423, 1462.6976318359, -1591.7899169922, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[17] = CreateDynamicObject(1423, 1465.3508300781, -1591.7807617188, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[18] = CreateDynamicObject(1423, 1467.9906005859, -1591.8200683594, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[19] = CreateDynamicObject(1423, 1470.6121826172, -1591.8656005859, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[20] = CreateDynamicObject(1423, 1473.2136230469, -1591.8610839844, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[21] = CreateDynamicObject(1423, 1475.7937011719, -1591.8469238281, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[22] = CreateDynamicObject(1423, 1478.4024658203, -1591.8955078125, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[23] = CreateDynamicObject(1423, 1481.0582275391, -1591.8861083984, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[24] = CreateDynamicObject(1423, 1483.6923828125, -1591.8922119141, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[25] = CreateDynamicObject(1423, 1486.4251708984, -1591.8852539063, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[26] = CreateDynamicObject(1423, 1489.1274414063, -1591.8316650391, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[27] = CreateDynamicObject(1423, 1491.8916015625, -1591.8214111328, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[28] = CreateDynamicObject(1423, 1494.5946044922, -1591.8095703125, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[29] = CreateDynamicObject(1423, 1497.3735351563, -1591.7801513672, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[30] = CreateDynamicObject(1423, 1500.0612792969, -1591.822265625, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[31] = CreateDynamicObject(1423, 1502.6558837891, -1591.8129882813, 13.09375, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[32] = CreateDynamicObject(1423, 1504.1467285156, -1590.7327880859, 13.09375, 0.000000, 0.000000, 268.69067382813, -1, -1, -1, 250.0);
				StudioObjects[33] = CreateDynamicObject(1423, 1504.1456298828, -1588.1284179688, 13.09375, 0.000000, 0.000000, 91.309509277344, -1, -1, -1, 250.0);
				StudioObjects[34] = CreateDynamicObject(1423, 1505.1781005859, -1586.7438964844, 13.2578125, 0.000000, 0.000000, 0.000000, -1, -1, -1, 250.0);
				StudioObjects[35] = CreateDynamicObject(1423, 1506.2008056641, -1585.1943359375, 13.2578125, 0.000000, 0.000000, 89.324493408203, -1, -1, -1, 250.0);
				StudioObjects[36] = CreateDynamicObject(1423, 1507.3255615234, -1583.3948974609, 13.2578125, 0.000000, 0.000000, 41.684783935547, -1, -1, -1, 250.0);
		    }
		}
	}
	
	return 1;
}

command(dgates, playerid, params[])
{
	#pragma unused params
	if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4)
	{
	    GetDynamicObjectPos(dGates[0], Positions[0][0], Positions[0][1], Positions[0][2]);
	    GetDynamicObjectPos(dGates[1], Positions[1][0], Positions[1][1], Positions[1][2]);
	    GetDynamicObjectPos(dGates[2], Positions[2][0], Positions[2][1], Positions[2][2]);
	    
	    if(IsPlayerInRangeOfPoint(playerid, 15.0, Positions[0][0], Positions[0][1], Positions[0][2]))
	    {
	        switch(dGateStatus[0])
	        {
	            case 0:
	            {
	                MoveDynamicObject(dGates[0], 641.03759765625, -426.08184814453, 10.757417678833, 1);
	                dGateStatus[0] = 1;
	                SendClientMessage(playerid, WHITE, "Opening...");
	            }
	            case 1:
	            {
	                MoveDynamicObject(dGates[0], 641.03759765625, -426.08184814453, 18.757417678833, 1);
	                dGateStatus[0] = 0;
	                SendClientMessage(playerid, WHITE, "Closing...");
	            }
	        }
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 15.0, Positions[1][0], Positions[1][1], Positions[1][2]))
	    {
	        switch(dGateStatus[1])
	        {
	            case 0:
	            {
	                MoveDynamicObject(dGates[1], 879.41540527344, -559.67053222656, 14.263460159302, 1);
	                dGateStatus[1] = 1;
	                SendClientMessage(playerid, WHITE, "Opening...");
	            }
	            case 1:
	            {
	                MoveDynamicObject(dGates[1], 879.41540527344, -559.67053222656, 22.263460159302, 1);
	                dGateStatus[1] = 0;
	                SendClientMessage(playerid, WHITE, "Closing...");
	            }
	        }
	    }
	    else if(IsPlayerInRangeOfPoint(playerid, 15.0, Positions[2][0], Positions[2][1], Positions[2][2]))
	    {
	        switch(dGateStatus[2])
	        {
	            case 0:
	            {
	                MoveDynamicObject(dGates[2], 681.40765380859, -656.54528808594, 10.757417678833, 1);
	                dGateStatus[2] = 1;
	                SendClientMessage(playerid, WHITE, "Opening...");
	            }
	            case 1:
	            {
	                MoveDynamicObject(dGates[2], 681.40765380859, -656.54528808594, 18.757417678833, 1);
	                dGateStatus[2] = 0;
	                SendClientMessage(playerid, WHITE, "Closing...");
	            }
	        }
	    }
	}
	
	return 1;
}

command(gate, playerid, params[])
{
	#pragma unused params

	new string[128];

	if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4)
	{
		GetPlayerPos(playerid, Positions[0][0], Positions[0][1], Positions[0][2]);
        GetDynamicObjectPos(lspdgate, Positions[1][0], Positions[1][1], Positions[1][2]);
		GetDynamicObjectPos(ImpoundGate, Positions[2][0], Positions[2][1], Positions[2][2]);
		GetDynamicObjectPos(PrisonGate, Positions[3][0], Positions[3][1], Positions[3][2]);

		if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[1][0], Positions[1][1], Positions[1][2]) < 30.0)
		{
			if(GateOpen == 0)
			{
				format(string, sizeof(string), "* %s uses their remote to open the gates.", GetName(playerid));
                NearByMessage(playerid, NICESKY, string);
                MoveDynamicObject(lspdgate, 1588.5617, -1638.0871, 5.7200, 1);
                GateOpen = 1;
                SetTimer("CloseLspdGate", 5000, false);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "The gate is already open, wait for it to close.");
			}
		}
		else if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[2][0], Positions[2][1], Positions[2][2]) < 30.0)
		{
			if(ImpoundOpen == 0)
			{
				format(string, sizeof(string), "* %s uses their remote to open the gates.", GetName(playerid));
                NearByMessage(playerid, NICESKY, string);
                DestroyDynamicObject(ImpoundGate);
				ImpoundGate = CreateDynamicObject(968, 1544.681640625, -1630.8916015625, 13.054567337036, 0, 0, 90); // Gate open coords
                ImpoundOpen = 1;
                SetTimer("CloseImpoundGate", 5000, false);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "The gate is already open, wait for it to close.");
			}
		}
		else if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[3][0], Positions[3][1], Positions[3][2]) < 30.0)
		{
			if(PrisonGateOpen == 0)
			{
				format(string, sizeof(string), "* %s uses their remote to open the gates.", GetName(playerid));
                NearByMessage(playerid, NICESKY, string);
				MoveDynamicObject(PrisonGate, 1788.4794921875, -1600.173828125, 19.745199203491, 1);
				PrisonGateOpen = 1;
				SetTimer("PrisonGateTimer", 5000, false);
			}
			else
			{
				SendClientMessage(playerid, WHITE, "The gate is already open, wait for it to close.");
			}
		}
	}
	else if(Player[playerid][Group] == 11)
	{
		GetPlayerPos(playerid, Positions[0][0], Positions[0][1], Positions[0][2]);
		GetDynamicObjectPos(MarketGate, Positions[1][0], Positions[1][1], Positions[1][2]);

		if(MarketGateOpen == 0)
		{
			format(string, sizeof(string), "* %s uses their remote to open the gates.", GetName(playerid));
            NearByMessage(playerid, NICESKY, string);
			MoveDynamicObject(MarketGate, 828.37866210938, -1357.3833007813, 4.50577330589294, 1);
			MarketGateOpen = 1;
		}
		else
		{
			format(string, sizeof(string), "* %s uses their remote to close the gates.", GetName(playerid));
            NearByMessage(playerid, NICESKY, string);
			MoveDynamicObject(MarketGate, 828.37866210938, -1357.3833007813, 0.50577330589294, 1);
			MarketGateOpen = 0;
		}
	}
	else
    {
        if(Player[playerid][Group] == 5)
        {
			GetPlayerPos(playerid, Positions[0][0], Positions[0][1], Positions[0][2]);
	        GetDynamicObjectPos(CGate1, Positions[1][0], Positions[1][1], Positions[1][2]);

			if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[1][0], Positions[1][1], Positions[1][2]) < 30.0)
			{
				if(CGateOpen == 0)
				{
					format(string, sizeof(string), "* %s uses their remote to open the doors.", GetName(playerid));
					NearByMessage(playerid, NICESKY, string);
					MoveDynamicObject(CGate1, 1479.6882324219, -1649.5045166016, -38.890918731689, 1);
					MoveDynamicObject(CGate2, 1485.3944091797, -1649.4760742188, -38.890918731689, 1);
					CGateOpen = 1;
				}
				else
				{
					format(string, sizeof(string), "* %s uses their remote to close the doors.", GetName(playerid));
					NearByMessage(playerid, NICESKY, string);
					MoveDynamicObject(CGate1, 1481.1398925781, -1649.4718017578, -38.890918731689, 1);
					MoveDynamicObject(CGate2, 1484.1184082031, -1649.4512939453, -38.890918731689, 1);
					CGateOpen = 0;
				}
			}
		}
    }
	return 1;
}

command(findhouse, playerid, params[])
{
	new houseid, string[128];
	if(sscanf(params, "d", houseid))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /findhouse [houseid]");
	}
	else
	{
        if(Jobs[Player[playerid][Job]][JobType] == 4)
        {
            if(Player[playerid][DetectiveCooldown] >= 1)
            {
                SendClientMessage(playerid, WHITE, "You must wait the reload time (30 seconds).");
            }
            else
            {
                if(Player[playerid][Checkpoint] >= 1)
                {
                    SendClientMessage(playerid, WHITE, "You already have a checkpoint spawned.");
                }
                else
                {
                    if(houseid > SpawnedHouses)
                    {
                        SendClientMessage(playerid, WHITE, "Invalid house ID.");
                    }
                    else
                    {
	                    format(string, sizeof(string), "A checkpoint has been spawned for House ID %d.", houseid);
	                    SendClientMessage(playerid, WHITE, string);
	                    SetPlayerCheckpoint(playerid, Houses[houseid][hExteriorX], Houses[houseid][hExteriorY], Houses[houseid][hExteriorZ], 10.0);
	                    Player[playerid][Checkpoint] = 69;
                    }
                }
            }
		}
	}
	return 1;
}

command(confiscate, playerid, params[])
{
	new id, item[128], string[128];
	if(sscanf(params, "uz", id, item))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /confiscate [playerid] [item]");
	    SendClientMessage(playerid, GREY, "Items: Pot, Cocaine, Materials, Weapons, Phone, WalkieTalkie");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
	        if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4 || Player[playerid][AdminLevel] >= 2)
	        {
		        if(GetDistanceBetweenPlayers(playerid, id) < 9)
		        {
		            if(strcmp(item, "pot", true) == 0)
		            {
		                if(Player[id][Pot] >= 1)
		                {
			                format(string, sizeof(string), "* %s has confiscated %s's Pot (%d grams).", GetName(playerid), GetName(id), Player[id][Pot]);
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][Pot] += Player[id][Pot];
			                Player[id][Pot] = 0;
			                format(string, sizeof(string), "You have confiscated %s's Pot (%d grams).", GetName(id), Player[id][Pot]);
			                SendClientMessage(playerid, WHITE, string);
			                format(string, sizeof(string), "%s has confiscated your Pot .", GetName(playerid));
			                SendClientMessage(id, WHITE, string);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "There is no Pot to confiscate.");
		                }
		            }
		            else if(strcmp(item, "weapons", true) == 0)
		            {
		                format(string, sizeof(string), "* %s has confiscated %s's Weapons.", GetName(playerid), GetName(id));
						NearByMessage(playerid, NICESKY, string);
						ResetPlayerWeaponsEx(id);
		                format(string, sizeof(string), "%s has confiscated your Weapons.", GetName(playerid));
		                SendClientMessage(id, WHITE, string);
		            }
		            else if(strcmp(item, "phone", true) == 0)
		            {
		                format(string, sizeof(string), "* %s has confiscated %s's Phone.", GetName(playerid), GetName(id));
						NearByMessage(playerid, NICESKY, string);
						Player[id][PhoneN] = -1;
		                format(string, sizeof(string), "%s has confiscated your Phone.", GetName(playerid));
		                SendClientMessage(id, WHITE, string);
		            }
		            else if(strcmp(item, "walkietalkie", true) == 0)
		            {
		                format(string, sizeof(string), "* %s has confiscated %s's Walkie Talkie.", GetName(playerid), GetName(id));
						NearByMessage(playerid, NICESKY, string);
						Player[id][WalkieTalkie] = 0;
		                format(string, sizeof(string), "%s has confiscated your Walkie Talkie.", GetName(playerid));
		                SendClientMessage(id, WHITE, string);
		            }
		            else if(strcmp(item, "cocaine", true) == 0)
		            {
		                if(Player[id][Cocaine] >= 1)
		                {
			                format(string, sizeof(string), "* %s has confiscated %s's Cocaine (%d grams).", GetName(playerid), GetName(id), Player[id][Cocaine]);
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][Cocaine] += Player[id][Cocaine];
			                Player[id][Cocaine] = 0;
			                format(string, sizeof(string), "You have confiscated %s's Cocaine (%d grams).", GetName(id), Player[id][Pot]);
			                SendClientMessage(playerid, WHITE, string);
			                format(string, sizeof(string), "%s has confiscated your Cocaine.", GetName(playerid));
			                SendClientMessage(id, WHITE, string);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "There is no Cocaine to confiscate.");
		                }
		            }
		            else if(strcmp(item, "materials", true) == 0)
		            {
		                if(Player[id][Materials] >= 1)
		                {
			                format(string, sizeof(string), "* %s has confiscated %s's Materials (%d materials).", GetName(playerid), GetName(id), Player[id][Materials]);
							NearByMessage(playerid, NICESKY, string);
							Player[playerid][Materials] += Player[id][Materials];
			                Player[id][Materials] = 0;
			                format(string, sizeof(string), "You have confiscated %s's Materials (%d Materials).", GetName(id), Player[id][Materials]);
			                SendClientMessage(playerid, WHITE, string);
			                format(string, sizeof(string), "%s has confiscated your Materials.", GetName(playerid));
			                SendClientMessage(id, WHITE, string);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "There is no Materials to confiscate.");
		                }
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You're too far away!");
		        }
		    }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    }
	}
	return 1;
}

command(freeze, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
	    	SendClientMessage(playerid, WHITE, "SYNTAX: /freeze [playerid]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
	    	if(IsPlayerConnectedEx(id))
	    	{
	        	TogglePlayerControllable(id, false);
	        	format(string, sizeof(string), "You have frozen player %s.", GetName(id));
	        	SendClientMessage(playerid, WHITE, string);
	    	}
	    	else
	    	{
	        	SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    	}
	    }
	}
	return 1;
}

command(changeranktitle, playerid, params[])
{
	new Name[128], Rank, string[128];
	if (sscanf(params, "dz", Rank, Name))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /changeranktitle [rank (1-5)] [new title]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        if(strlen(Name) < 20 && strlen(Name) >= 1)
	        {
		        switch(Rank)
		        {
		            case 1:
		            {
		                format(OOCRanks[Rank1], sizeof(OOCRanks[Rank1]), "%s", Name);
		                dini_Set("Ranks.ini", "Rank1", OOCRanks[Rank1]);
		                format(string, sizeof(string), "You have changed Rank 1's title to '%s'.", OOCRanks[Rank1]);
		                SendClientMessage(playerid, WHITE, string);
		            }
		            case 2:
		            {
		                format(OOCRanks[Rank2], sizeof(OOCRanks[Rank2]), "%s", Name);
		                dini_Set("Ranks.ini", "Rank2", OOCRanks[Rank2]);
		                format(string, sizeof(string), "You have changed Rank 2's title to '%s'.", OOCRanks[Rank2]);
		                SendClientMessage(playerid, WHITE, string);
		            }
		            case 3:
		            {
		                format(OOCRanks[Rank3], sizeof(OOCRanks[Rank3]), "%s", Name);
		                dini_Set("Ranks.ini", "Rank3", OOCRanks[Rank3]);
		                format(string, sizeof(string), "You have changed Rank 3's title to '%s'.", OOCRanks[Rank3]);
		                SendClientMessage(playerid, WHITE, string);
		            }
		            case 4:
		            {
		                format(OOCRanks[Rank4], sizeof(OOCRanks[Rank4]), "%s", Name);
		                dini_Set("Ranks.ini", "Rank4", OOCRanks[Rank4]);
		                format(string, sizeof(string), "You have changed Rank 4's title to '%s'.", OOCRanks[Rank4]);
		                SendClientMessage(playerid, WHITE, string);
		            }
		            case 5:
		            {
		                format(OOCRanks[Rank5], sizeof(OOCRanks[Rank5]), "%s", Name);
		                dini_Set("Ranks.ini", "Rank5", OOCRanks[Rank5]);
		                format(string, sizeof(string), "You have changed Rank 5's title to '%s'.", OOCRanks[Rank5]);
		                SendClientMessage(playerid, WHITE, string);
		            }
		            default:
		            {
		                SendClientMessage(playerid, WHITE, "SYNTAX: /changeranktitle [rank (1-5)] [new title]");
		            }
		        }
	        }
	        else
			{
			    SendClientMessage(playerid, WHITE, "Rank names must be longer than 1 character and shorter than 20 characters.");
			}
	    }
	}
	return 1;
}

command(playerwarns, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /playerwarns [playerid]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
	        SendClientMessage(playerid, WHITE, "------------------------------------------------------");
	        format(string, sizeof(string), "Name: %s", GetName(id));
	        SendClientMessage(playerid, WHITE, string);
	        format(string, sizeof(string), "First Warning: %s", Player[id][Warning1]);
	        SendClientMessage(playerid, GREY, string);
	        format(string, sizeof(string), "Second Warning: %s", Player[id][Warning2]);
	        SendClientMessage(playerid, GREY, string);
	        format(string, sizeof(string), "Third Warning: %s", Player[id][Warning3]);
	        SendClientMessage(playerid, GREY, string);
	        SendClientMessage(playerid, WHITE, "------------------------------------------------------");
	    }
	}
	return 1;
}

command(gotocarid, playerid, params[])
{
	new id, string[40];
	if(sscanf(params, "d", id))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	    	SendClientMessage(playerid, WHITE, "SYNTAX: /gotocarid [carid]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	        new Float: PosX, Float: PosY, Float: PosZ;
	        GetVehiclePos(id, PosX, PosY, PosZ);
	        SetPlayerPos(playerid, PosX, PosY, PosZ);
	        format(string, sizeof(string), "Teleported to vehicle ID %d.", id);
	        SendClientMessage(playerid, WHITE, string);
	    }
	}
	return 1;
}

command(recordcheck, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /recordcheck [playerid]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4)
	    {
	    	if(IsPlayerConnectedEx(id))
	    	{
	    	    SendClientMessage(playerid, WHITE, "------------------------------------------------------");
	    	    format(string, sizeof(string), "Name: %s", GetName(id));
	    	    SendClientMessage(playerid, WHITE, string);
		        format(string, sizeof(string), "Registered Offences %d.", Player[id][CriminalOffences]);
	    	    SendClientMessage(playerid, GREY, string);
	    	    format(string, sizeof(string), "First Active Record: %s", Player[id][Offence1]);
	    	    SendClientMessage(playerid, GREY, string);
	    	    format(string, sizeof(string), "Second Active Record: %s", Player[id][Offence2]);
	    	    SendClientMessage(playerid, GREY, string);
	    	    format(string, sizeof(string), "Third Active Record: %s", Player[id][Offence3]);
	    	    SendClientMessage(playerid, GREY, string);
	    	    format(string, sizeof(string), "Fourth Active Record: %s", Player[id][Offence4]);
	    	    SendClientMessage(playerid, GREY, string);
	    	    format(string, sizeof(string), "Fifth Active Record: %s", Player[id][Offence5]);
		        SendClientMessage(playerid, GREY, string);
		        format(string, sizeof(string), "Sixth Active Record: %s", Player[id][Offence6]);
	    	    SendClientMessage(playerid, GREY, string);
	    	    SendClientMessage(playerid, WHITE, "------------------------------------------------------");
	    	}
	    }
	}
	return 1;
}

command(hangup, playerid, params[])
{
	#pragma unused params
	TextDrawHideForPlayer(playerid, CellPhoneTextDraw);
	Player[playerid][OnPhoneTime] = 0;
	Player[Player[playerid][CellphoneConsole]][OnPhoneTime] = 0;
	SendClientMessage(playerid, WHITE, "You have terminated the current call.");
	SendClientMessage(Player[playerid][CellphoneConsole], WHITE, "Your call has been terminated by the other party.");

	if(GetPlayerSpecialAction(Player[playerid][CellphoneConsole]) == SPECIAL_ACTION_USECELLPHONE)
	{
	    SetPlayerSpecialAction(Player[playerid][CellphoneConsole], SPECIAL_ACTION_STOPUSECELLPHONE);
	}

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_USECELLPHONE)
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_STOPUSECELLPHONE);
	}

	if(Player[playerid][CellphoneConsole] != -1)
	{
	    Player[Player[playerid][CellphoneConsole]][CellphoneConsole] = -1;
	    Player[playerid][CellphoneConsole] = -1;
	}

	return 1;
}

command(contract, playerid, params[])
{
	new Reason[128], id, price, string[128];
	if(sscanf(params, "udz", id, price, Reason))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /contract [playerid] [price] [reason]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 2)
	    {
	        SendClientMessage(playerid, WHITE, "Hitmen can't place contracts.");
	    }
	    else
	    {
		    if(strlen(Reason) < 1)
		    {
		        SendClientMessage(playerid, WHITE, "SYNTAX: /contract [playerid] [price] [reason]");
		        return 1;
		    }
		    else
		    {
			    if(IsPlayerConnectedEx(id))
			    {
		    	    if(Player[playerid][Money] >= price)
		        	{
		            	if(price >= 1000000 || price < 15555)
		            	{
		                	SendClientMessage(playerid, WHITE, "The maximum you can place is $1,000,000 and can't be smaller than $15,555.");
		            	}
		            	else
		            	{
	                    	if(playerid == id)
	                    	{
	                    	    SendClientMessage(playerid, WHITE, "You can't place a contract on yourself.");
	                    	}
	                    	else
	                    	{
	                    	    if(Player[id][ContractPrice] >= 1)
	                    	    {
	                    	        SendClientMessage(playerid, WHITE, "Unable to place contract.");
	                    	    }
	                    	    else
	                    	    {
	                				Player[playerid][Money] -= price;
	                				format(Player[id][Contract], 255, "%s (from %s)", Reason, GetName(playerid));
	                				Player[id][ContractPrice] = price;
	                				format(string, sizeof(string), "You have successfullly placed a contract on %s, for $%d. For the reason: %s.", GetName(id), price, Reason);
	                				SendClientMessage(playerid, WHITE, string);
	                				format(string, sizeof(string), "A hit has become available on %s, for $%d.", GetName(id), price);
									for(new i = 0; i < MAX_PLAYERS; i++)
									{
									    if(IsPlayerConnectedEx(i))
									    {
									        if(Groups[Player[i][Group]][CommandTypes] == 2)
									        {
									            SendClientMessage(i, ANNOUNCEMENT, string);
									        }
									    }
									}
						    	}
							}
						}
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "You can't afford that.");
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Player not connected or logged in.");
		        }
		    }
		}
	}
	return 1;
}

command(disbandgroup, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Group] >= 1 && Player[playerid][GroupRank] >= 6)
	{
	    new second, grptemp = Player[playerid][Group];
	    
	    gettime(Groups[Player[playerid][Group]][DisbandHour], Groups[Player[playerid][Group]][DisbandMinute], second);
	    getdate(Groups[Player[playerid][Group]][DisbandDay], Groups[Player[playerid][Group]][DisbandMonth], Groups[Player[playerid][Group]][DisbandYear]);
	    
	    for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnectedEx(i) && Player[i][Group] == grptemp)
	        {
	            SendClientMessage(i, RED, "You have been kicked from the group, reason: Disbandation.");
	            Player[i][Group] = 0;
	            Player[i][GroupRank] = 0;
	        }
	    }
	    
	    format(Groups[grptemp][GroupName], 255, "Nothing");
	}
	return 1;
}

/*command(answer, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][BeingCalled] != -1)
	{
	    Player[playerid][CellphoneConsole] = Player[playerid][BeingCalled];
	    Player[Player[playerid][BeingCalled]][OnPhoneTime] = 1;
	    Player[Player[playerid][BeingCalled]][CellphoneConsole] = playerid;
	    SendClientMessage(playerid, WHITE, "You have picked up the phone.");
	    SendClientMessage(Player[playerid][BeingCalled], WHITE, "The other party has answered the call.");
	    Player[Player[playerid][BeingCalled]][CallConnectingTime] = -1;
	    Player[playerid][BeingCalled] = -1;
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
	    Player[Player[playerid][BeingCalled]][Calling] = -1;
	    TextDrawHideForPlayer(playerid, CellPhoneTextDraw);
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You're not being called.");
	}
	return 1;
}*/

command(unmodallcars, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 4)
	{
	    new Float: CarPoss[3], SlotComp;
		for(new i = 0; i < 400; i++)
		{
		    GetVehiclePos(i, CarPoss[0], CarPoss[1], CarPoss[2]);
		    
		    if(CarPoss[0] != 0.00 && CarPoss[1] != 0.00 && CarPoss[2] != 0.00)
		    {
		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_SPOILER);
		        RemoveVehicleComponent(i, SlotComp);
		        
		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_HOOD);
		        RemoveVehicleComponent(i, SlotComp);
		        
		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_ROOF);
		        RemoveVehicleComponent(i, SlotComp);
		        
		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_SIDESKIRT);
		        RemoveVehicleComponent(i, SlotComp);
		        
		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_LAMPS);
		        RemoveVehicleComponent(i, SlotComp);
		        
		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_NITRO);
		        RemoveVehicleComponent(i, SlotComp);
		        
		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_EXHAUST);
		        RemoveVehicleComponent(i, SlotComp);

		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_WHEELS);
		        RemoveVehicleComponent(i, SlotComp);

		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_STEREO);
		        RemoveVehicleComponent(i, SlotComp);

		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_HYDRAULICS);
		        RemoveVehicleComponent(i, SlotComp);
		        
		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_FRONT_BUMPER);
		        RemoveVehicleComponent(i, SlotComp);
		        
		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_REAR_BUMPER);
		        RemoveVehicleComponent(i, SlotComp);
		        
		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_VENT_RIGHT);
		        RemoveVehicleComponent(i, SlotComp);
		        
		        SlotComp = GetVehicleComponentInSlot(i, CARMODTYPE_VENT_LEFT);
		        RemoveVehicleComponent(i, SlotComp);
		    }
		}

	}
	
	return 1;
}

command(adisbandgroup, playerid, params[])
{
	new grptemp, string[128];
	if(sscanf(params, "d", grptemp))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /adisbandgroup [id]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
		    if(grptemp >= 1 && grptemp < 20)
		    {
			    new second;

			    gettime(Groups[Player[playerid][Group]][DisbandHour], Groups[Player[playerid][Group]][DisbandMinute], second);
			    getdate(Groups[Player[playerid][Group]][DisbandDay], Groups[Player[playerid][Group]][DisbandMonth], Groups[Player[playerid][Group]][DisbandYear]);

			    for(new i = 0; i < MAX_PLAYERS; i++)
			    {
			        if(IsPlayerConnectedEx(i) && Player[i][Group] == grptemp)
			        {
			            SendClientMessage(i, ADMINORANGE, "You have been kicked from the group, reason: Disbandation.");
			            Player[i][Group] = 0;
			            Player[i][GroupRank] = 0;
			        }
			    }
			    format(string, sizeof(string), "You have disbanded group %d (%s).", grptemp, Groups[grptemp][GroupName]);
			    SendClientMessage(playerid, WHITE, string);
			    format(Groups[grptemp][GroupName], 255, "Nothing");
		    }
	    }
	}
	return 1;
}

command(gov, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /gov [message]");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1 && Player[playerid][Group] != 0 || Groups[Player[playerid][Group]][CommandTypes] == 4 && Player[playerid][Group] != 0)
		{
		    if(Player[playerid][GroupRank] >= 5)
		    {
			    SendClientMessageToAll(GREY, "----------------------------- [Government Notice] ----------------------------- ");
			    format(string, sizeof(string), "%s: %s says: %s", Groups[Player[playerid][Group]][GroupName], GetName(playerid), message);
			    SendClientMessageToAll(WHITE, string);
			    SendClientMessageToAll(GREY, "----------------------------- [Government Notice] ----------------------------- ");
			}
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You're not a LEO.");
		}
	}
	return 1;
}

command(departments, playerid, params[])
{
	new Message[128], Name[MAX_PLAYER_NAME], string[128];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /(d)epartments [message]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4 || Groups[Player[playerid][Group]][CommandTypes] == 3)
	    {
	        GetPlayerName(playerid, Name, sizeof(Name));

	    	switch(Player[playerid][GroupRank])
			{
	    		case 0: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName0], Name, Message);
				case 1: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName1], Name, Message);
				case 2:	format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName2], Name, Message);
				case 3: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName3], Name, Message);
				case 4:	format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName4], Name, Message);
				case 5:	format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName5], Name, Message);
				case 6: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName6], Name, Message);
				default: format(string, sizeof(string), "ERROR! %s has used /d, but they're not a valid rank!", Name);
			}

			for(new i = 0; i < MAX_GROUPS; i++)
		    {
		        if(Groups[i][CommandTypes] == 1 || Groups[i][CommandTypes] == 4 || Groups[i][CommandTypes] == 3)
		        {
		            LiteralGroupMessage(i, DEPARTMENT_CHAT, string);
		        }
		    }

			format(string, sizeof(string), "[Departmental Radio] %s says: %s", Name, Message);
		    NearByMessage(playerid, GREY, string);
		    
		    GroupChatLog(string);
	    }
	}
	return 1;
}

command(d, playerid, params[])
{
	new Message[128], Name[MAX_PLAYER_NAME], string[128];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /(d)epartments [message]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4 || Groups[Player[playerid][Group]][CommandTypes] == 3)
	    {
	        GetPlayerName(playerid, Name, sizeof(Name));
	        
	    	switch(Player[playerid][GroupRank])
			{
	    		case 0: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName0], Name, Message);
				case 1: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName1], Name, Message);
				case 2:	format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName2], Name, Message);
				case 3: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName3], Name, Message);
				case 4:	format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName4], Name, Message);
				case 5:	format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName5], Name, Message);
				case 6: format(string, sizeof(string), "[Department Chat] %s %s says: %s", Groups[Player[playerid][Group]][RankName6], Name, Message);
				default: format(string, sizeof(string), "ERROR! %s has used /d, but they're not a valid rank!", Name);
			}

			for(new i = 0; i < MAX_GROUPS; i++)
		    {
		        if(Player[i][ToggedRadio] == 0 && Groups[i][CommandTypes] == 1 || Groups[i][CommandTypes] == 4 || Groups[i][CommandTypes] == 3)
		        {
		            LiteralGroupMessage(i, DEPARTMENT_CHAT, string);
		        }
		    }
		    
			format(string, sizeof(string), "[Departmental Radio] %s says: %s", Name, Message);
		    NearByMessage(playerid, GREY, string);
		    
		    GroupChatLog(string);
	    }
	}
	return 1;
}

command(megaphone, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /(m)egaphone [message]");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1 && Player[playerid][Group] != 0 || Groups[Player[playerid][Group]][CommandTypes] == 3 && Player[playerid][Group] != 0)
		{
		    format(string, sizeof(string), "[Megaphone] %s: %s", GetName(playerid), message);
		    NearByMessageEx(playerid, ORANGE, string, 50);
		    ICChatLog(string);
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You're not a LEO/medic.");
		}
	}
	return 1;
}

command(m, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /(m)egaphone [message]");
	}
	else
	{
		if(Groups[Player[playerid][Group]][CommandTypes] == 1 && Player[playerid][Group] != 0 || Groups[Player[playerid][Group]][CommandTypes] == 3 && Player[playerid][Group] != 0)
		{
		    if(IsPlayerInAnyVehicle(playerid))
		    {
			    format(string, sizeof(string), "[Megaphone] %s: %s", GetName(playerid), message);
			    NearByMessageEx(playerid, ORANGE, string, 50);
			    ICChatLog(string);
			    
			    for(new i = 0; i < SpawnedHouses; i++)
			    {
			        if(IsPlayerInRangeOfPoint(playerid, 15, Houses[i][hExteriorX], Houses[i][hExteriorX], Houses[i][hExteriorX]))
			        {
			            for(new f = 0; i < SpawnedHouses; f++)
			            {
			                if(Player[f][InHouse] == i)
			                {
			                    NearByMessageEx(f, ORANGE, string, 50);
			                }
			            }
			        }
			    }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You must be in a vehicle.");
		    }
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You're not a LEO/medic.");
		}
	}
	return 1;
}

command(travelannouncement, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /travelannouncement [message]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 11 && Player[playerid][GroupRank] >= 5)
	    {
		    format(string, sizeof(string), "Travel Announcement from %s: %s", GetName(playerid), message);
		    SendClientMessageToAll(GREEN, string);
		    ICChatLog(string);
	    }
	}
	return 1;
}

command(shout, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /(s)hout [message]");
	}
	else
	{
	    if(Player[playerid][PrisonID] == 1)
	    {
	        SendClientMessage(playerid, WHITE, "You may not speak ICly whilst you're in OOC prison.");
	    }
	    else
	    {
            if(Player[playerid][Gagged] >= 1)
            {
                SendClientMessage(playerid, WHITE, "You're currently unable to speak ICly as you're gagged.");
            }
            else
            {
			    format(string, sizeof(string), "%s shouts: %s!", GetName(playerid), message);
			    NearByMessageEx(playerid, WHITE, string, 25.0);
			    ICChatLog(string);
		    }
	    }
	}
	return 1;
}

command(spotlight, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /spotlight [playerid]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            format(string, sizeof(string), "You have set %s (ID: %d) as the Spotlight player.", GetName(id), id);
	            SendClientMessage(playerid, WHITE, string);
				Spotlight = id;
				format(string, sizeof(string), "%s has been set as the Spotlight Player by %s!", GetName(id), GetName(playerid));
				SendClientMessageToAll(ANNOUNCEMENT, string);
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	        }
	    }
	}
	return 1;
}

command(low, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /low [message]");
	}
	else
	{
        if(Player[playerid][PrisonID] == 1)
        {
			SendClientMessage(playerid, WHITE, "You may not use this channel right now.");
        }
        else
        {
            if(Player[playerid][Gagged] >= 1)
            {
                SendClientMessage(playerid, WHITE, "You're currently unable to speak ICly as you're gagged.");
            }
            else
            {
			    format(string, sizeof(string), "%s whispers: %s", GetName(playerid), message);
			    NearByMessageEx(playerid, WHITE, string, 2.0);
			    ICChatLog(string);
		    }
	    }
	}
	return 1;
}

command(untie, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /untie [playerid]");
	}
	else
	{
		if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
		{
			SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
		}
		else
		{
		    if(IsPlayerConnectedEx(id))
		    {
	            if(GetDistanceBetweenPlayers(playerid, id) < 7)
	            {
	                if(Player[id][Tied] >= 1)
	                {
	                    new randomc = random(4);

	                    switch(randomc)
	                    {
	                        case 0, 1, 2:
	                        {
	                    		format(string, sizeof(string), "* %s has attempted to untie %s, but failed.", GetName(playerid), GetName(id));
	                    		NearByMessage(playerid, NICESKY, string);
	                    	}
	                    	case 3, 4:
	                    	{
	                    		format(string, sizeof(string), "* %s has attempted to untie %s, and succeeded.", GetName(playerid), GetName(id));
	                    		NearByMessage(playerid, NICESKY, string);
			                    Player[id][Tied] = 0;
			                    TogglePlayerControllable(id, true);
	                    	}
	                    }
	                }
	            }
	            else
	            {
	                SendClientMessage(playerid, WHITE, "You're too far away!");
	            }
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
		}
	}
	return 1;
}

command(supplystatus, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Business] >= 1)
	{
	    if(Businesses[Player[playerid][Business]][bSupplyStatus] == 1)
	    {
	        Businesses[Player[playerid][Business]][bSupplyStatus] = 0;
	        SendClientMessage(playerid, WHITE, "Your business is now accepting supplies again.");
	    }
	    else
	    {
	        Businesses[Player[playerid][Business]][bSupplyStatus] = 1;
	        SendClientMessage(playerid, WHITE, "Your business is no longer accepting supplies.");
	    }
	}
	return 1;
}

command(tie, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /tie [playerid]");
	}
	else
	{
		if(Player[playerid][Tied] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Cuffed] >= 1)
		{
			SendClientMessage(playerid, WHITE, "You cannot do this at this time as you are cuffed, tazed or tied.");
		}
		else
		{
		    if(IsPlayerConnectedEx(id))
		    {
	            if(Player[playerid][Rope] >= 1)
	            {
		            if(GetDistanceBetweenPlayers(playerid, id) < 5 && GetPlayerVehicleID(playerid) == GetPlayerVehicleID(id) && GetPlayerState(playerid) == 2 || GetPlayerSpecialAction(id) == SPECIAL_ACTION_HANDSUP)
		            {
			        	new randomc = random(4);
	                    switch(randomc)
	                    {
	                        case 0:
	                        {
	                            format(string, sizeof(string), "* %s has attempted to tie %s, but failed.", GetName(playerid), GetName(id));
	                            NearByMessage(playerid, NICESKY, string);
	                        }
	                        case 1, 2, 3, 4:
	                        {
	                            format(string, sizeof(string), "* %s has attempted to tie %s, and succeeded.", GetName(playerid), GetName(id));
	                            NearByMessage(playerid, NICESKY, string);
	                            Player[id][Tied] = 1;
	                            TogglePlayerControllable(id, false);
	                            Player[playerid][Rope]--;
	                        }
	                    }
	        		}
	        		else
	        		{
	        		    SendClientMessage(playerid, WHITE, "That player doesn't have their hands up or you're not in the same vehicle as them.");
	        		}
	        	}
	        	else
	        	{
	        	    SendClientMessage(playerid, WHITE, "You've not got any rope left.");
	        	}
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		    }
		}
	}
	return 1;
}

command(s, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /(s)hout [message]");
	}
	else
	{
	    if(Player[playerid][PrisonID] == 1)
	    {
	        SendClientMessage(playerid, WHITE, "You may not speak ICly whilst you're in OOC prison.");
	    }
	    else
	    {
            if(Player[playerid][Gagged] >= 1)
            {
                SendClientMessage(playerid, WHITE, "You're currently unable to speak ICly as you're gagged.");
            }
            else
            {
			    format(string, sizeof(string), "%s shouts: %s!", GetName(playerid), message);
			    NearByMessageEx(playerid, WHITE, string, 25.0);
			    ICChatLog(string);
		    }
	    }
	}
	return 1;
}

command(getnumber, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /getnumber [playerid]");
	}
	else
	{
	    if(Player[playerid][PhoneBook] >= 1)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            if(Player[id][PhoneN] == -1)
	            {
	                format(string, sizeof(string), "%s is not registered to have a phone.", GetName(id));
	                SendClientMessage(playerid, WHITE, string);
	            }
	            else
	            {
				    format(string, sizeof(string), "%s's phone number is %d.", GetName(id), Player[id][PhoneN]);
				    SendClientMessage(playerid, WHITE, string);
			    }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		    }
	    }
	}
	return 1;
}

command(ss, playerid, params[])
{
	#pragma unused params
	if(Groups[Player[playerid][Group]][CommandTypes] == 4)
	{
	    new string[128];
	    if(IsPlayerInRangeOfPoint(playerid, 5, LockerPos2X, LockerPos2Y, LockerPos2Z))
	    {
	        if(GetPlayerInterior(playerid) == LockerPos2Int)
	        {
	            format(string, sizeof(string), "%s Menu", Groups[Player[playerid][Group]][GroupName]);
	    		ShowPlayerDialog(playerid, 3432, DIALOG_STYLE_LIST, string, "Toggle Duty\nEquipment\nRelease a Suspect\nClothing\nClear a Suspect\n", "Select", "Cancel");
			}
		}
  	}
	return 1;
}

command(lspd, playerid, params[])
{
	#pragma unused params
	if(Groups[Player[playerid][Group]][CommandTypes] == 1 && Player[playerid][Group] != 0 || Groups[Player[playerid][Group]][CommandTypes] == 4)
	{
	    new string[128];
	    if(IsPlayerInRangeOfPoint(playerid, 5, LockerPosX, LockerPosY, LockerPosZ))
	    {
	        if(GetPlayerInterior(playerid) == LockerPosInt)
	        {
	            format(string, sizeof(string), "%s Menu", Groups[Player[playerid][Group]][GroupName]);
	    		ShowPlayerDialog(playerid, 3432, DIALOG_STYLE_LIST, string, "Toggle Duty\nEquipment\nRelease a Suspect\nClothing\nClear a Suspect\n", "Select", "Cancel");
			}
		}
  	}
	return 1;
}

command(pda, playerid, params[])
{
	#pragma unused params
	if(Groups[Player[playerid][Group]][CommandTypes] == 2 && Player[playerid][Group] != 0)
	{
	    if(Player[playerid][GroupRank] >= 4)
	    {
			ShowPlayerDialog(playerid, 3433, DIALOG_STYLE_LIST, "Hitman Menu", "Contract List\nActive Agents\nTargets of Interest (over $250,000)\nLaw Enforcement\nEquipment\nAssign a Contract", "Select", "Cancel");
	    }
		else
		{
			ShowPlayerDialog(playerid, 3433, DIALOG_STYLE_LIST, "Hitman Menu", "Contract List\nActive Agents\nTargets of Interest (over $250,000)\nLaw Enforcement\nEquipment", "Select", "Cancel");
		}
	}
	return 1;
}

command(checkweapons, playerid, params[])
{
	new id;
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /checkweapons [playerid]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	        SendClientMessage(playerid, GREY, "--------------------------------------------------------------------------------------");
	    	ReturnWeapons(playerid, id);
	    	SendClientMessage(playerid, GREY, "--------------------------------------------------------------------------------------");
	    }
	}
	return 1;
}

command(frisk, playerid, params[])
{
	new id;
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /frisk [playerid]");
	}
	else
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4)
	    {
	        if(GetDistanceBetweenPlayers(playerid, id) < 5)
	        {
	        	SendClientMessage(playerid, GREY, "------------------------------------------------------");
	    		ReturnWeapons(playerid, id);
	    		if(Player[id][Cocaine] >= 1)
	    		{
	    		    SendClientMessage(playerid, WHITE, "- Cocaine");
	    		}
	    		if(Player[id][Pot] >= 1)
	    		{
	    		    SendClientMessage(playerid, WHITE, "- Pot");
	    		}
	    		if(Player[id][Materials] >= 1)
	    		{
	    		    SendClientMessage(playerid, WHITE, "- Materials");
	    		}
	    		SendClientMessage(playerid, GREY, "------------------------------------------------------");
	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, WHITE, "You're too far away.");
	    	}
	    }
	}
	return 1;
}

command(setleader, playerid, params[])
{
	new GroupID, id, string[128];
	if(sscanf(params, "ud", id, GroupID))
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /setleader [playerid] [group id]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 3)
	    {
	    	format(string, sizeof(string), "Groups/Group_%d.ini", GroupID);
			if(fexist(string))
			{
			
				if(Player[id][Group] >= 1 && GroupID != Player[id][Group])
				{
			    	format(string, sizeof(string), "%s has left the group (admin-set to another group).", GetName(id));
			    	GroupMessage(id, ANNOUNCEMENT, string);
				}
				
		    	format(string, sizeof(string), "You have set %s to be the leader of Group %s.", GetName(id), Groups[GroupID][GroupName]);
		    	SendClientMessage(playerid, WHITE, string);
		    	format(string, sizeof(string), "You have been appointed to lead group %s, by %s.", Groups[GroupID][GroupName], GetName(playerid));
		    	SendClientMessage(id, WHITE, string);
		    	Player[id][Group] = GroupID;
		    	Player[id][GroupRank] = 6;
		    	format(string, sizeof(string), "%s has joined the group (admin-set).", GetName(id));
		    	GroupMessage(id, ANNOUNCEMENT, string);
			}
			else
			{
		    	SendClientMessage(playerid, WHITE, "Invalid group ID.");
			}
		}
	}
	return 1;
}

command(changeviplevel, playerid, params[])
{
	new level, id, string[128];
	if(sscanf(params, "ud", id, level))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /changeviplevel [playerid] [level]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			if(IsPlayerConnectedEx(id))
			{
			    Player[id][VipRank] = level;

			    format(string, sizeof(string), "%s's VIP level has been changed to %d, by %s.", GetName(id), level, GetName(playerid));
				for(new i = 0; i < MAX_PLAYERS; i++)
			    {
			        if(IsPlayerConnectedEx(i) && Player[i][VipRank] >= 1)
			        {
			            SendClientMessage(i, YELLOW, string);
			        }
			    }
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
			}
	    }
	}
	return 1;
}

command(changepass, playerid, params[])
{
	ShowPlayerDialog(playerid, 3666, DIALOG_STYLE_INPUT, "Password", "Please change your password.", "Change", "Cancel");
	return 1;
}

command(listmygroup, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Group] >= 1)
	{
	    new string[128];
		SendClientMessage(playerid, WHITE, "------------------------------------------------------------");

		for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(IsPlayerConnectedEx(i) && Player[i][Group] == Player[playerid][Group] && Player[i][AdminDuty] < 1)
	        {
				format(string, sizeof(string), "Name: %s | Rank: %d.", GetName(i), Player[i][GroupRank]);
				SendClientMessage(playerid, WHITE, string);
	        }
	    }

	    SendClientMessage(playerid, WHITE, "------------------------------------------------------------");
	}
	return 1;
}

/*command(spyoff, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 1)
	{
	 	SendClientMessage(playerid, WHITE, "You are no longer spying on anybody.");
		for(new i = 0; i < MAX_PLAYERS; i++)
	    {
	        if(Player[i][BeingSpyedOnBy] == playerid)
	        {
	            Player[i][BeingSpyedOnBy] = -1;
	        }
	    }
    }
	return 1;
}

command(spyon, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /spyon [playerid] (type /spyoff to stop)");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	        if(Player[id][AdminLevel] < Player[playerid][AdminLevel])
	        {
		        format(string, sizeof(string), "You will now see PMs / SMS' that %s (ID: %d) is recieving.", GetName(id), id);
		        SendClientMessage(playerid, WHITE, string);
		        Player[id][BeingSpyedOnBy] = playerid;
	        }
	    }
	}
	return 1;
}*/

command(clear, playerid, params[])
{
	new string[128], id;
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /clear [playerid]");
	}
	else
	{
	    if(Jobs[Player[playerid][Job]][JobType] == 7)
	    {
	        if(GetPlayerWantedLevel(id) >= 1)
	        {
	            switch(GetPlayerWantedLevel(id))
	            {
	                case 1:
					{
						format(Player[id][Offence1], 255, "None");
						SetPlayerWantedLevel(id, 0);
						Player[playerid][LawyerReloadTime] = 1;
						format(string, sizeof(string), "You have defended %s, one of their offences has been dropped (they now have 0 active records).", GetName(id));
						SendClientMessage(playerid, WHITE, string);
					}
	                case 2:
					{
						format(Player[id][Offence2], 255, "None");
						SetPlayerWantedLevel(id, 1);
						Player[playerid][LawyerReloadTime] = 1;
						format(string, sizeof(string), "You have defended %s, one of their offences has been dropped (they now have 1 active records).", GetName(id));
						SendClientMessage(playerid, WHITE, string);
					}
	                case 3:
					{
						format(Player[id][Offence3], 255, "None");
						SetPlayerWantedLevel(id, 2);
						Player[playerid][LawyerReloadTime] = 1;
						format(string, sizeof(string), "You have defended %s, one of their offences has been dropped (they now have 2 active records).", GetName(id));
						SendClientMessage(playerid, WHITE, string);
					}
	                case 4:
					{
						format(Player[id][Offence4], 255, "None");
						SetPlayerWantedLevel(id, 3);
						Player[playerid][LawyerReloadTime] = 1;
						format(string, sizeof(string), "You have defended %s, one of their offences has been dropped (they now have 3 active records).", GetName(id));
						SendClientMessage(playerid, WHITE, string);
					}
	                case 5:
					{
						format(Player[id][Offence5], 255, "None");
						SetPlayerWantedLevel(id, 4);
						Player[playerid][LawyerReloadTime] = 1;
						format(string, sizeof(string), "You have defended %s, one of their offences has been dropped (they now have 4 active records).", GetName(id));
						SendClientMessage(playerid, WHITE, string);
					}
	                case 6: SendClientMessage(playerid, WHITE, "You can't defend a most-wanted suspect.");
	            }
	            
	        	Player[playerid][LawyerReloadTime] = 1;
	        }
	    }
	}
	return 1;
}

/*command(spawnnpc, playerid, params[])
{
	new string[128], NPCName[128];
	if(sscanf(params, "z", NPCName))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /spawnnpc [script name]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
		    format(string, sizeof(string), "npcmodes/recordings/%s.rec", NPCName);

		    if(file_actually_exists(string))
		    {
		        format(string, sizeof(string), "NPC_%d", NPCs+1);
		        ConnectNPC(string, NPCName);
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That recording / script doesn't exist.");
		    }
	    }
	}
	return 1;
}*/

command(pm, playerid, params[])
{
	new string[128], message[128], id;
	if(sscanf(params, "uz", id, message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /pm [playerid] [message]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
	        if(strlen(message) >= 1)
	        {
		        if(Player[id][PMsEnabled] == 1)
		        {
		            if(Player[id][AFKStat] == 1)
		            {
		                SendClientMessage(playerid, WHITE, "This administrator is away from keyboard, right now.");
		            }
		            else
		            {
			            format(string, sizeof(string), "You have sent %s: %s ", GetName(id), message);
			            SendClientMessage(playerid, PLAYERCOM, string);
			            format(string, sizeof(string), "PM from %s (ID: %d): %s ", GetName(playerid), playerid, message);

						SendClientMessage(id, PLAYERCOM, string);

						PMsLog(string);
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "That player has disabled PMs!");
		        }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "SYNTAX: /pm [playerid] [message]");
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    }
    }
	return 1;
}

command(kill, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][PrisonID] >= 1 && Player[playerid][PrisonDuration] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Tied] >= 1 || Player[playerid][Cuffed])
	{
		SendClientMessage(playerid, WHITE, "You can't do this at this time.");
	}
	else
	{
		SetPlayerHealth(playerid, 0);
	}
	return 1;
}

command(highvolume, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 4)
	{
	    if(ReportStatus == 0)
	    {
	        ReportStatus = 1;
	        SendClientMessageToAll(LIGHTRED, "We are experiencing an extremely high volume of reports right now.");
			SendClientMessageToAll(LIGHTRED, "Please only use the /(re)port feature, if your report is of extreme urgency.");
	    }
	    else
	    {
	        ReportStatus = 0;
            SendClientMessageToAll(LIGHTRED, "The volume of reports has been successfully addressed.");
            SendClientMessageToAll(LIGHTRED, "You may now use /(re)port for smaller issues / requests.");
	    }
	}
	return 1;
}

command(re, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][ActiveReport] >= 1)
	{
	    SendClientMessage(playerid, WHITE, "Our administrators have a list of reports that have been unanswered - please wait for them to attend your current report.");
	}
	else
	{
	    if(Player[playerid][ReportBanStatus] == 1)
	    {
	        SendClientMessage(playerid, WHITE, "You're banned from creating reports.");
	    }
	    else
	    {
			if(ReportStatus == 0)
			{
				ShowPlayerDialog(playerid, 6677, DIALOG_STYLE_LIST, "Report System", "Report a Player\nAccount Related Request\nHouse / Business Related Request\nSpeak to an Administrator", "Select", "Cancel");
			}
			else
			{
			    SendClientMessage(playerid, RED, "We are experiencing an extremely high volume of reports right now.");
			    SendClientMessage(playerid, WHITE, "Please only use this feature, if your report is important.");
			    SendClientMessage(playerid, WHITE, "Normal service shall resume once we've resolved the volume of reports.");
			    SendClientMessage(playerid, GREY, "If you are going to proceed with your report, please select from the menu.");
			    ShowPlayerDialog(playerid, 6897, DIALOG_STYLE_LIST, "Report System - PLEASE ONLY REPORT IF YOUR REPORT IS URGENT!", "Report a Player\nSpeak to an Administrator\n", "Proceed", "Cancel");
			}
		}
	}
	return 1;
}

command(report, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][ActiveReport] >= 1)
	{
	    SendClientMessage(playerid, WHITE, "Our administrators have a list of reports that have been unanswered - please wait for them to attend your current report.");
	}
	else
	{
	    if(Player[playerid][ReportBanStatus] == 1)
	    {
	        SendClientMessage(playerid, WHITE, "You're banned from creating reports.");
	    }
	    else
	    {
			if(ReportStatus == 0)
			{
				ShowPlayerDialog(playerid, 6677, DIALOG_STYLE_LIST, "Report System", "Report a Player\nAccount Related Request\nHouse / Business Related Request\nSpeak to an Administrator", "Select", "Cancel");
			}
			else
			{
			    SendClientMessage(playerid, RED, "We are experiencing an extremely high volume of reports right now.");
			    SendClientMessage(playerid, WHITE, "Please only use this feature, if your report is important.");
			    SendClientMessage(playerid, WHITE, "Normal service shall resume once we've resolved the volume of reports.");
			    SendClientMessage(playerid, GREY, "If you are going to proceed with your report, please select from the menu.");
			    ShowPlayerDialog(playerid, 6897, DIALOG_STYLE_LIST, "Report System - PLEASE ONLY REPORT IF YOUR REPORT IS URGENT!", "Report a Player\nSpeak to an Administrator\n", "Proceed", "Cancel");
			}
		}
	}
	return 1;
}

command(reportban, playerid, params[])
{
    new id, string[128];
    if(sscanf(params, "u", id))
    {
        if(Player[playerid][AdminLevel] >= 1)
        {
        	SendClientMessage(playerid, WHITE, "SYNTAX: /reportban [playerid]");
        }
    }
    else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            if(Player[playerid][AdminLevel] >= Player[id][AdminLevel])
	            {
	                switch(Player[id][ReportBanStatus])
	                {
	                    case 0:
	                    {
	                        Player[id][ReportBanStatus] = 1;
	                        format(string, sizeof(string), "You have banned %s from creating reports.", GetName(id));
	                        SendClientMessage(playerid, WHITE, string);
	                        format(string, sizeof(string), "Administrator %s has banned you from creating reports.", GetName(playerid));
	                        SendClientMessage(id, WHITE, string);
	                    }
	                    case 1:
	                    {
	                        Player[id][ReportBanStatus] = 0;
	                        format(string, sizeof(string), "You have unbanned %s from creating reports.", GetName(id));
	                        SendClientMessage(playerid, WHITE, string);
	                        format(string, sizeof(string), "Administrator %s has unbanned you from creating reports.", GetName(playerid));
	                        SendClientMessage(id, WHITE, string);
	                    }
	                }
	            }
	            else
	            {
	                SendClientMessage(playerid, WHITE, "Insufficient level.");
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "That player is not connected or is logged in.");
	        }
	    }
	}
	return 1;
}

command(togvip, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][VipRank] >= 1)
	{
		if(Player[playerid][ToggedVIP] == 1)
		{
		    Player[playerid][ToggedVIP] = 0;
		    SendClientMessage(playerid, WHITE, "You can now see VIP chat.");
		}
		else
		{
		    Player[playerid][ToggedVIP] = 1;
		    SendClientMessage(playerid, WHITE, "You will no longer see chat in /(v)ip.");
		}
	}
	return 1;
}

command(togooc, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][ToggedOOC] == 1)
	{
	    Player[playerid][ToggedOOC] = 0;
	    SendClientMessage(playerid, WHITE, "You can now see OOC chat.");
	}
	else
	{
	    Player[playerid][ToggedOOC] = 1;
	    SendClientMessage(playerid, WHITE, "You will no longer see chat in /(o)oc.");
	}
	return 1;
}

command(analysis, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 1)
	{
	    new string[128];
		SendClientMessage(playerid, DARKGREY, "---------------------------------------------------------------------------------------------------------------------------");
		SendClientMessage(playerid, WHITE, "Anaysis from 01/12/2009 (04:00) to the present date:");
		format(string, sizeof(string), "Total Connections: %s | Maximum Player Connections: %s | Logins: %s | Registrations: %s", IntToFormattedStr(TotalConnections), IntToFormattedStr(MaxVisitors), IntToFormattedStr(MaxLoggedIn), IntToFormattedStr(MaxRegistered));
        SendClientMessage(playerid, GREY, string);
        SendClientMessage(playerid, WHITE, "Analysis of the System (automatically updated):");
        format(string, sizeof(string), "Objects: %d | Pickups: %d | Dynamic Checkpoints: %d. | Admin Spawned Vehicles: %d | Spawned Owned Cars: %d", CountDynamicObjects(), CountDynamicPickups(), CountDynamicCPs(), SpawnedVehicles, OwnedCarCount);
        SendClientMessage(playerid, GREY, string);
        format(string, sizeof(string), "NPCs: %d | Players Online: %d", NPCs, PlayersOn);
        SendClientMessage(playerid, GREY, string);
		SendClientMessage(playerid, DARKGREY, "---------------------------------------------------------------------------------------------------------------------------");
	}
	return 1;
}

command(breakin, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][Group] >= 1)
	{
	    if(Groups[Player[playerid][Group]][CommandTypes] == 4 || Groups[Player[playerid][Group]][CommandTypes] == 1)
	    {
			for(new i = 0; i < sizeof(Businesses); i++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ]))
			    {
			        if(GetPlayerVirtualWorld(playerid) == 0)
			        {
			            if(random(4) < 2)
			            {
			                format(string, sizeof(string), "* %s has kicked the door down, breaking the door lock.", GetName(playerid));
			                NearByMessage(playerid, NICESKY, string);
				            Businesses[i][bLockStatus] = 0;
				            Player[playerid][InBusiness] = i;
			        		SetPlayerVirtualWorld(playerid, 65000+i);
				        	SetPlayerInterior(playerid, Businesses[i][bInteriorID]);
				        	SetPlayerPos(playerid, Businesses[i][bInteriorX], Businesses[i][bInteriorY], Businesses[i][bInteriorZ]);
				        }
				        else
				        {
			                format(string, sizeof(string), "* %s has kicked the door, attempting to break through, but has failed.", GetName(playerid));
			                NearByMessage(playerid, NICESKY, string);
				        }
			        }
			    }
			}
			for(new i = 0; i < sizeof(Houses); i++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ]))
			    {
			        if(GetPlayerVirtualWorld(playerid) == 0)
			        {
			            if(random(4) < 2)
			            {
			                format(string, sizeof(string), "* %s has kicked the door down, breaking the door lock.", GetName(playerid));
			                NearByMessage(playerid, NICESKY, string);
				            Houses[i][LockStatus] = 0;
			        		SetPlayerVirtualWorld(playerid, 55000+i);
			        		Player[playerid][InHouse] = i;
				        	SetPlayerInterior(playerid, Houses[i][hInteriorID]);
				        	SetPlayerPos(playerid, Houses[i][hInteriorX], Houses[i][hInteriorY], Houses[i][hInteriorZ]);
				        }
				        else
				        {
			                format(string, sizeof(string), "* %s has kicked the door, attempting to break through, but has failed.", GetName(playerid));
			                NearByMessage(playerid, NICESKY, string);
				        }
			        }
			    }
			}
			for(new i = 0; i < sizeof(Groups); i++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3, Groups[i][HQExteriorX], Groups[i][HQExteriorY], Groups[i][HQExteriorZ]))
			    {
			        if(GetPlayerInterior(playerid) == Groups[i][HQExteriorID] && GetPlayerVirtualWorld(playerid) == 0)
			        {
			            if(random(4) < 2)
			            {
				            Groups[i][HQLock] = 0;
				            Player[playerid][InGroupHQ] = i;
			       			SetPlayerVirtualWorld(playerid, 45000+i);
				        	SetPlayerInterior(playerid, Groups[i][HQInteriorID]);
				        	SetPlayerPos(playerid, Groups[i][HQInteriorX], Groups[i][HQInteriorY], Groups[i][HQInteriorZ]);
				        }
				        else
				        {
			                format(string, sizeof(string), "* %s has kicked the door, attempting to break through, but has failed.", GetName(playerid));
			                NearByMessage(playerid, NICESKY, string);
				        }
			        }
			    }
			}
		}
	}
	return 1;
}

command(buy, playerid, params[])
{
    #pragma unused params
    if(Businesses[Player[playerid][InBusiness]][bType] == 1)
    {
        new string[160], price1 = Businesses[Player[playerid][InBusiness]][bProductPrice1];
        new price2 = Businesses[Player[playerid][InBusiness]][bProductPrice2];
        new price3 = Businesses[Player[playerid][InBusiness]][bProductPrice3];
        new price4 = Businesses[Player[playerid][InBusiness]][bProductPrice4];
        new price5 = Businesses[Player[playerid][InBusiness]][bProductPrice5];
        new price6 = Businesses[Player[playerid][InBusiness]][bProductPrice6];
        new price7 = Businesses[Player[playerid][InBusiness]][bProductPrice7];
        new price8 = Businesses[Player[playerid][InBusiness]][bProductPrice8];
        new price9 = Businesses[Player[playerid][InBusiness]][bProductPrice9];
        format(string, sizeof(string), "Rope ($%d)\nRags ($%d)\nPhone ($%d)\nPhonebook ($%d)\nBottle o' Sprunk ($%d)\n$%d phone credit voucher ($%d)\nSpraycan ($%d)\nWalkie Talkie ($%d)\nVehicle Radio ($%d)", price1, price2, price3, price4, price5, price6, price7, price7, price8, price9);
        ShowPlayerDialog(playerid, 631, DIALOG_STYLE_LIST, "Select the product you wish to purchase.", string, "Purchase", "Cancel");
    }
    else if(Businesses[Player[playerid][InBusiness]][bType] == 11)
    {
        new string[128];
        format(string, sizeof(string), "5 grams of Pot ($%d)\n5 grams of Cocaine ($%d)", Businesses[Player[playerid][InBusiness]][bProductPrice1], Businesses[Player[playerid][InBusiness]][bProductPrice2]);
        ShowPlayerDialog(playerid, 8561, DIALOG_STYLE_LIST, "Select the product you wish to purchase.", string, "Purchase", "Cancel");
    }
    else if(Businesses[Player[playerid][InBusiness]][bType] == 12)
    {
        new string[128];
        new price1 = Businesses[Player[playerid][InBusiness]][bProductPrice1];
        new price2 = Businesses[Player[playerid][InBusiness]][bProductPrice2];
        new price3 = Businesses[Player[playerid][InBusiness]][bProductPrice3];
        format(string, sizeof(string), "Sprunk ($%d)\nVegetarian Surprise ($%d)\nMeat Feast Pizza ($%d)\n", price1, price2, price3);
        ShowPlayerDialog(playerid, 81, DIALOG_STYLE_LIST, "Select the product you wish to purchase.", string, "Purchase", "Cancel");
    }
    else if(Businesses[Player[playerid][InBusiness]][bType] == 5)
    {
        new string[135];
		new price1 = Businesses[Player[playerid][InBusiness]][bProductPrice1];
        new price2 = Businesses[Player[playerid][InBusiness]][bProductPrice2];
        new price3 = Businesses[Player[playerid][InBusiness]][bProductPrice3];
        new price4 = Businesses[Player[playerid][InBusiness]][bProductPrice4];
        new price5 = Businesses[Player[playerid][InBusiness]][bProductPrice5];
        new price6 = Businesses[Player[playerid][InBusiness]][bProductPrice6];
        new price7 = Businesses[Player[playerid][InBusiness]][bProductPrice7];
        format(string, sizeof(string), "Rope ($%d)\nSmall White Vibrator ($%d)\nSilver Vibrator ($%d)\nLarge White Vibrator ($%d)\nPriest ($%d)\nNaughty Girl Cop Costume ($%d)\nCat Woman Costume ($%d)", price1, price2, price3, price4, price5, price6, price7);
        ShowPlayerDialog(playerid, 257, DIALOG_STYLE_LIST, "Select the product you wish to purchase.", string, "Purchase", "Cancel");
    }
    return 1;
}

command(setfrequency, playerid, params[])
{
    new frequency, string[128];
    if(sscanf(params, "d", frequency))
    {
        SendClientMessage(playerid, WHITE, "SYNTAX: /setfrequency [id]");
    }
    else
	{
	    if(Player[playerid][WalkieTalkie] < 1)
	    {
	        SendClientMessage(playerid, WHITE, "You must purchase a Walkie Talkie from a 24/7 first.");
	    }
	    else
	    {
	        Player[playerid][WalkieFrequency] = frequency;
	        format(string, sizeof(string), "You have changed your frequency to #%d.", frequency);
	        SendClientMessage(playerid, WHITE, string);
	    }
	}
	return 1;
}

command(togwt, playerid, params[])
{
	#pragma unused params
    if(Player[playerid][WalkieTalkie] < 1)
    {
        SendClientMessage(playerid, WHITE, "You must purchase a Walkie Talkie from a 24/7 first.");
    }
    else
    {
        Player[playerid][WalkieFrequency] = 0;
        SendClientMessage(playerid, WHITE, "You have disabled your walkie talkie. You will need to re-select your frequency afterwards.");
    }
    
    return 1;
}

command(wt, playerid, params[])
{
    new message[128], string[128];
    if(sscanf(params, "z", message))
    {
        SendClientMessage(playerid, WHITE, "SYNTAX: /wt [message]");
    }
    else
	{
	    if(Player[playerid][WalkieFrequency] == 0)
	    {
	        SendClientMessage(playerid, WHITE, "You must first set your frequncy, using /setfrequency [id].");
	    }
	    else
	    {
	        if(Player[playerid][WalkieTalkie] < 1)
	        {
	            SendClientMessage(playerid, WHITE, "You must purchase a Walkie Talkie from a 24/7 first.");
	        }
	        else
	        {
				if(strlen(message) < 1)
				{
				    SendClientMessage(playerid, WHITE, "SYNTAX: /wt [message]");
				}
				else
				{
				    if(Player[playerid][Cuffed] >= 1 || Player[playerid][Tazed] >= 1 || Player[playerid][Tied] >= 1)
				    {
				        SendClientMessage(playerid, WHITE, "You can't do this right now.");
				    }
				    else
				    {
					    format(string, sizeof(string), "[WALKIE TALKIE] %s says: %s", GetName(playerid), message);

				        for(new i = 0; i < MAX_PLAYERS; i++)
				        {
				            if(IsPlayerConnectedEx(i) && Player[i][WalkieFrequency] == Player[playerid][WalkieFrequency])
				            {
				                NearByMessage(i, 0xf29d49FF, string);
				            }
				        }
				        
				        ICChatLog(string);
			        }
				}
			}
	    }
	}
	return 1;
}

command(togradio, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][ToggedRadio] == 1)
	{
	    Player[playerid][ToggedRadio] = 0;
	    SendClientMessage(playerid, WHITE, "You have enabled your radio.");
	}
	else
	{
	    Player[playerid][ToggedRadio] = 1;
	    SendClientMessage(playerid, WHITE, "You have disabled your radio.");
	}
	return 1;
}

command(whisper, playerid, params[])
{
    new id, string[128], message[128];
    if(sscanf(params, "uz", id, message))
    {
        SendClientMessage(playerid, WHITE, "SYNTAX: /w(hisper) [playerid] [message]");
    }
    else
	{
		if(Player[playerid][Gagged] >= 1)
		{
			SendClientMessage(playerid, WHITE, "You're currently unable to speak ICly as you're gagged.");
		}
		else
		{
		    if(IsPlayerConnectedEx(id) && GetDistanceBetweenPlayers(playerid, id) < 5 && Player[id][AdminDuty] == 0 && Player[playerid][AdminLevel] < 3)
		    {
		        format(string, sizeof(string), "Whisper sent to %s: %s", GetName(id), message);
		        SendClientMessage(playerid, 0xf7fd00FF, string);
		        format(string, sizeof(string), "Whisper from %s: %s", GetName(playerid), message);
		        SendClientMessage(id, 0xf7fd00FF, string);
		    }
		    else
		    {
		        if(Player[playerid][AdminLevel] >= 3)
		        {
			        format(string, sizeof(string), "Whisper sent to %s: %s", GetName(id), message);
			        SendClientMessage(playerid, PLAYERCOM, string);
			        format(string, sizeof(string), "Whisper from %s: %s", GetName(playerid), message);
					for(new i = 0; i < MAX_PLAYERS; i++)
		            {
			            if(i == id)
			            {
							SendClientMessage(i, PLAYERCOM, string);
						}
					}

					ICChatLog(string);
		        }
		        else
		        {
			        SendClientMessage(playerid, WHITE, "You're too far away!");
			    }
		    }
	    }
    }
    return 1;
}

command(togspeedo, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Speedo] == 1)
	{
	    Player[playerid][Speedo] = 0;
	    SendClientMessage(playerid, WHITE, "You have disabled your speedometer!");
	}
	else
	{
	    Player[playerid][Speedo] = 1;
	    SendClientMessage(playerid, WHITE, "You have enabled your speedometer!");
	}
	return 1;
}

command(w, playerid, params[])
{
    new id, string[128], message[128];
    if(sscanf(params, "uz", id, message))
    {
        SendClientMessage(playerid, WHITE, "SYNTAX: /w(hisper) [playerid] [message]");
    }
    else
	{
		if(Player[playerid][Gagged] >= 1)
		{
			SendClientMessage(playerid, WHITE, "You're currently unable to speak ICly as you're gagged.");
		}
		else
		{
		    if(IsPlayerConnectedEx(id) && GetDistanceBetweenPlayers(playerid, id) < 5 && Player[id][AdminDuty] == 0 && Player[playerid][AdminLevel] < 3)
		    {
		        format(string, sizeof(string), "Whisper sent to %s: %s", GetName(id), message);
		        SendClientMessage(playerid, NICESKY, string);
		        format(string, sizeof(string), "Whisper from %s: %s", GetName(playerid), message);
		        SendClientMessage(id, NICESKY, string);
		    }
		    else
		    {
		        if(Player[playerid][AdminLevel] >= 3)
		        {
			        format(string, sizeof(string), "Whisper sent to %s: %s", GetName(id), message);
			        SendClientMessage(playerid, PLAYERCOM, string);
			        format(string, sizeof(string), "Whisper from %s: %s", GetName(playerid), message);
					for(new i = 0; i < MAX_PLAYERS; i++)
		            {
			            if(i == id)
			            {
							SendClientMessage(i, PLAYERCOM, string);
						}
					}

					ICChatLog(string);
		        }
		        else
		        {
			        SendClientMessage(playerid, WHITE, "You're too far away!");
			    }
		    }
	    }
    }
    return 1;
}

command(set, playerid, params[])
{
    new Usage[128], id, Value, string[128];
    if(sscanf(params, "udz", id, Value, Usage))
    {
	    if(Player[playerid][AdminLevel] >= 3)
	    {
	        SendClientMessage(playerid, WHITE, "SYNTAX: /set [playerid] [value] [usage]");
	        SendClientMessage(playerid, GREY, "Usages: Health, Cocaine, Pot, Job, Phone, Interior, House, Materials, Skin, Business, Group, GroupRank, Money, Armour and VirtualWorld");
	        SendClientMessage(playerid, GREY, "Usages: FailedHits, SuccessfulHits, Bank, PlayingHours, CriminalOffences, PhoneCredit, Rope, Rags, Age, AchievementPoints");
	    }
    }
    else
    {
        if(Player[playerid][AdminLevel] >= 3)
        {
	        new hour, minute, second, day, year, month;
	        gettime(hour, minute, second);
	        getdate(year, month, day);
	        if(strlen(Usage) >= 1 && IsPlayerConnectedEx(id) && Player[playerid][AdminLevel] >= Player[id][AdminLevel] && Player[playerid][AdminLevel] >= 3)
	        {
	   	    	if(strcmp(Usage, "skin", true) == 0)
	        	{
	            	if(IsInvalidSkin(Value))
	            	{
	                	SendClientMessage(playerid, WHITE, "Invalid skin!");
	            	}
	            	else
	            	{
                		format(string, sizeof(string), "You have set %s's skin to %d.", GetName(id), Value);
	            		SendClientMessage(playerid, WHITE, string);
	            		format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's skin to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][LastSkin]);
	            		StatLog(string);
	            		
             			if(Player[id][IsAtEvent] >= 1)
	                	{
	                	    SendClientMessage(playerid, WHITE, "As that player is playing in an event, their skin will return itself to normal when they respawn.");
	                	}
	                	else
	                	{
	                	    if(Player[id][AdminDuty] >= 1)
	                	    {
	                	        Player[id][AdminSkin] = Value;
	                	    }
	                	    else
	                	    {
	                			Player[id][LastSkin] = Value;
	                		}
	                	}
	                	
	                	SetPlayerSkin(id, Value);
	            	}
	        	}
	        	else if(strcmp(Usage, "bank", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Bank to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's Bank to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][BankMoney]);
	            	StatLog(string);
	            	Player[id][BankMoney] = Value;
	        	}
	        	else if(strcmp(Usage, "Rags", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Rags to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's Rags to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][Rags]);
	            	StatLog(string);
	            	Player[id][Rags] = Value;
	        	}
	        	else if(strcmp(Usage, "Rope", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Rope to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's Rope to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][Rope]);
	            	StatLog(string);
	            	Player[id][Rope] = Value;
	        	}
	        	else if(strcmp(Usage, "PhoneCredit", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's PhoneCredit to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's PhoneCredit to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][PhoneCredit]);
	            	StatLog(string);
					Player[id][PhoneCredit] = Value;
	        	}
	        	else if(strcmp(Usage, "Age", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Age to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's Age to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][Age]);
	            	StatLog(string);
	            	Player[id][Age] = Value;
	        	}
	        	else if(strcmp(Usage, "AchievementPoints", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's AchievementPoints to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's AchievementPoints to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][AchievementRank]);
	            	StatLog(string);
					Player[id][AchievementRank] = Value;
	        	}
	        	else if(strcmp(Usage, "CriminalOffences", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's CriminalOffences to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's CriminalOffences to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][CriminalOffences]);
	            	StatLog(string);
	            	Player[id][CriminalOffences] = Value;
	        	}
	        	else if(strcmp(Usage, "playinghours", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's PlayingHours to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's PlayingHours to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][PlayingHours]);
	            	StatLog(string);
	            	Player[id][PlayingHours] = Value;
	        	}
	        	else if(strcmp(Usage, "failedhits", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's FailedHits to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's FailedHits to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][FailedHits]);
	            	StatLog(string);
	            	Player[id][FailedHits] = Value;
	        	}
	        	else if(strcmp(Usage, "successfulhits", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's SuccessfulHits to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's SuccessfulHits to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][SuccessfulHits]);
	            	StatLog(string);
	            	Player[id][SuccessfulHits] = Value;
	        	}
	        	else if(strcmp(Usage, "materials", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Materials to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's materials to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][Materials]);
	            	StatLog(string);
	            	Player[id][Materials] = Value;
	        	}
	        	else if(strcmp(Usage, "phone", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Phone Number to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's Phone Number to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][PhoneN]);
	            	StatLog(string);
	            	Player[id][PhoneN] = Value;
	        	}
	        	else if(strcmp(Usage, "pot", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Pot to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's pot to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][Pot]);
	            	StatLog(string);
	            	Player[id][Pot] = Value;
	        	}
	        	else if(strcmp(Usage, "job", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Job to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's Job to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][Job]);
	            	StatLog(string);
					Player[id][Job] = Value;
	        	}
	        	else if(strcmp(Usage, "cocaine", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Cocaine to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's cocaine to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][Cocaine]);
	            	StatLog(string);
	            	Player[id][Cocaine] = Value;
	        	}
	        	else if(strcmp(Usage, "group", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Group to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's group to %d (%s) [was %d].", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Groups[Value][GroupName], Player[id][Group]);
	            	StatLog(string);
	            	Player[id][Group] = Value;
	        	}
	        	else if(strcmp(Usage, "house", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's House ID to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's house to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][House]);
	            	StatLog(string);
	            	Player[id][House] = Value;
	        	}
	        	else if(strcmp(Usage, "business", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Business ID to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's business to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][Business]);
	            	StatLog(string);
	            	Player[id][Business] = Value;
	        	}
	        	else if(strcmp(Usage, "grouprank", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's Group Rank to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's group rank to %d (was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][GroupRank]);
	            	StatLog(string);
	            	Player[id][GroupRank] = Value;
	        	}
	        	else if(strcmp(Usage, "money", true) == 0)
	        	{
	            	format(string, sizeof(string), "You have set %s's money to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	SavePlayerData(id);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d]  Admin %s has spawned money for %s ($%d - was %d).", day, month, year, hour, minute, GetName(playerid), GetName(id), Value, Player[id][Money]);
	            	MoneyLog(string);
	            	StatLog(string);
					Player[id][Money] = Value;
	        	}
	        	else if(strcmp(Usage, "health", true) == 0)
	        	{
	            	SetPlayerHealth(id, Value);
	            	format(string, sizeof(string), "You have set %s's health to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's health to %d", day, month, year, hour, minute, GetName(playerid), GetName(id), Value);
	            	StatLog(string);
	        	}
	        	else if(strcmp(Usage, "vw", true) == 0 || strcmp(Usage, "virtualworld", true) == 0)
	        	{
	            	SetPlayerVirtualWorld(id, Value);
	            	format(string, sizeof(string), "You have set %s's virtual world to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's virtual world to %d", day, month, year, hour, minute, GetName(playerid), GetName(id), Value);
	            	StatLog(string);
	        	}
	        	else if(strcmp(Usage, "interior", true) == 0)
	        	{
	            	SetPlayerInterior(id, Value);
	            	format(string, sizeof(string), "You have set %s's interior to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's interior to %d", day, month, year, hour, minute, GetName(playerid), GetName(id), Value);
	            	StatLog(string);
	        	}
	        	else if(strcmp(Usage, "armour", true) == 0)
	        	{
	            	SetPlayerArmour(id, Value);
	            	format(string, sizeof(string), "You have set %s's armour to %d.", GetName(id), Value);
	            	SendClientMessage(playerid, WHITE, string);
	            	format(string, sizeof(string), "[%d/%d/%d - %d:%d] Admin %s has set %s's armour to %d", day, month, year, hour, minute, GetName(playerid), GetName(id), Value);
	            	StatLog(string);
	        	}
        	}
        }
        else
        {
            return 1;
        }
    }
    return 1;
}

command(lockhq, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Group] >= 1 && Player[playerid][GroupRank] >= 5)
	{
	    if(Groups[Player[playerid][Group]][HQLock] == 0)
	    {
	        Groups[Player[playerid][Group]][HQLock] = 1;
	        SendClientMessage(playerid, WHITE, "You have locked your HQ.");
	    }
	    else
	    {
	        Groups[Player[playerid][Group]][HQLock] = 0;
	        SendClientMessage(playerid, WHITE, "You have un-locked your HQ.");
	    }
	}
	return 1;
}

command(buydrink, playerid, params[])
{
	#pragma unused params
	if(Businesses[Player[playerid][InBusiness]][bType] == 3)
	{
	    new string[128];
	    format(string, sizeof(string), "Wine ($%d)\nBeer ($%d)\nSprunk ($%d)", Businesses[Player[playerid][InBusiness]][bProductPrice1], Businesses[Player[playerid][InBusiness]][bProductPrice2], Businesses[Player[playerid][InBusiness]][bProductPrice3]);
		ShowPlayerDialog(playerid, 2365, DIALOG_STYLE_LIST, "Drinks Menu", string, "Purchase", "Cancel");
	}
	return 1;
}

command(parkcar, playerid, params[])
{
	new vehslot;
    if(sscanf(params, "d", vehslot))
    {
        SendClientMessage(playerid, WHITE, "SYNTAX: /parkcar [1-3]");
    }
    else
    {
        switch(vehslot)
        {
			case 1:
			{
				if(Player[playerid][PlayerCarModel] > 0)
				{
				    if(GetPlayerVehicleID(playerid) == Player[playerid][CarLinkID])
				    {
					    if(Player[playerid][CarModDelay] == 0)
						{
					        new Float: tmpdamage;
					        GetOwnedCarMods(playerid);
					        GetVehicleHealth(Player[playerid][CarLinkID], tmpdamage);
						    GetVehicleZAngle(Player[playerid][CarLinkID], Player[playerid][CarZAngle]);
						    GetVehiclePos(Player[playerid][CarLinkID], Player[playerid][CarX], Player[playerid][CarY], Player[playerid][CarZ]);
							DestroyVehicle(Player[playerid][CarLinkID]);

							OwnedCarCount--;
							CarCount--;

						    SpawnOwnedCar(playerid, 1);
						    PutPlayerInVehicle(playerid, Player[playerid][CarLinkID], 0);
						    Player[playerid][CarModDelay] = 1;
						    SetVehicleHealth(Player[playerid][CarLinkID], tmpdamage);
					    }
					    else
					    {
					        SendClientMessage(playerid, WHITE, "Please wait your reload time (60 seconds).");
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, WHITE, "You have to be in your car to do this. Use /callcar if you've lost it.");
				    }
				}
			}
			case 2:
			{
				if(Player[playerid][PlayerCarModel2] > 0)
				{
				    if(GetPlayerVehicleID(playerid) == Player[playerid][Car2LinkID])
				    {
					    if(Player[playerid][CarModDelay] == 0)
						{
					        new Float: tmpdamage;
					        GetOwnedCarMods(playerid);
					        GetVehicleHealth(Player[playerid][Car2LinkID], tmpdamage);
						    GetVehicleZAngle(Player[playerid][Car2LinkID], Player[playerid][Car2ZAngle]);
						    GetVehiclePos(Player[playerid][Car2LinkID], Player[playerid][Car2X], Player[playerid][Car2Y], Player[playerid][Car2Z]);
							DestroyVehicle(Player[playerid][Car2LinkID]);

							OwnedCarCount--;
							CarCount--;

						    SpawnOwnedCar(playerid, 2);
						    PutPlayerInVehicle(playerid, Player[playerid][Car2LinkID], 0);
						    Player[playerid][CarModDelay] = 1;
						    SetVehicleHealth(Player[playerid][Car2LinkID], tmpdamage);
					    }
					    else
					    {
					        SendClientMessage(playerid, WHITE, "Please wait your reload time (60 seconds).");
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, WHITE, "You have to be in your car to do this. Use /callcar if you've lost it.");
				    }
				}
			}
			case 3:
			{
				if(Player[playerid][PlayerCarModel3] > 0)
				{
				    if(GetPlayerVehicleID(playerid) == Player[playerid][Car3LinkID])
				    {
					    if(Player[playerid][CarModDelay] == 0)
						{
					        new Float: tmpdamage;
					        GetOwnedCarMods(playerid);
					        GetVehicleHealth(Player[playerid][Car3LinkID], tmpdamage);
						    GetVehicleZAngle(Player[playerid][Car3LinkID], Player[playerid][Car3ZAngle]);
						    GetVehiclePos(Player[playerid][Car3LinkID], Player[playerid][Car3X], Player[playerid][Car3Y], Player[playerid][Car3Z]);
							DestroyVehicle(Player[playerid][Car3LinkID]);

							OwnedCarCount--;
							CarCount--;

						    SpawnOwnedCar(playerid, 3);
						    PutPlayerInVehicle(playerid, Player[playerid][Car3LinkID], 0);
						    Player[playerid][CarModDelay] = 1;
						    SetVehicleHealth(Player[playerid][Car3LinkID], tmpdamage);
					    }
					    else
					    {
					        SendClientMessage(playerid, WHITE, "Please wait your reload time (60 seconds).");
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, WHITE, "You have to be in your car to do this. Use /callcar if you've lost it.");
				    }
				}
			}
		}
	}
	return 1;
}

command(ocarcolor, playerid, params[])
{
	new col1, col2, vehslot;
	if(sscanf(params, "ddd", col1, col2, vehslot))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /ocarcolor [colour1] [colour2] [1-3]");
	}
	else
	{
	    switch(vehslot)
	    {
	        case 1:
	        {
			    if(col1 >= 0 && col1 < 127 || col2 >= 0 && col2 < 127)
			    {
				    if(Player[playerid][PlayerCarModel] > 0)
				    {
				        if(Player[playerid][HasSprayCans] >= 1 || Player[playerid][VipRank] >= 2)
				        {
				        	ChangeVehicleColor(Player[playerid][CarLinkID], col1, col2);
				        	Player[playerid][CarCol1] = col1;
				        	Player[playerid][CarCol2] = col2;
				        	if(Player[playerid][VipRank] < 2)
				        	{
				        		Player[playerid][HasSprayCans]--;
				        	}
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You have no spraycans left.");
				        }
				    }
			    }
			    else
			    {
			        SendClientMessage(playerid, WHITE, "Invalid colour, colours are from 0-126.");
			    }
			}
			case 2:
			{
			    if(col1 >= 0 && col1 < 127 || col2 >= 0 && col2 < 127)
			    {
				    if(Player[playerid][PlayerCarModel2] > 0)
				    {
				        if(Player[playerid][HasSprayCans] >= 1 || Player[playerid][VipRank] >= 2)
				        {
				        	ChangeVehicleColor(Player[playerid][Car2LinkID], col1, col2);
				        	Player[playerid][Car2Col1] = col1;
				        	Player[playerid][Car2Col2] = col2;
				        	if(Player[playerid][VipRank] < 2)
				        	{
				        		Player[playerid][HasSprayCans]--;
				        	}
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You have no spraycans left.");
				        }
				    }
			    }
			    else
			    {
			        SendClientMessage(playerid, WHITE, "Invalid colour, colours are from 0-126.");
			    }
			}
			case 3:
			{
			    if(col1 >= 0 && col1 < 127 || col2 >= 0 && col2 < 127)
			    {
				    if(Player[playerid][PlayerCarModel3] > 0)
				    {
				        if(Player[playerid][HasSprayCans] >= 1 || Player[playerid][VipRank] >= 2)
				        {
				        	ChangeVehicleColor(Player[playerid][Car3LinkID], col1, col2);
				        	Player[playerid][Car3Col1] = col1;
				        	Player[playerid][Car3Col2] = col2;
				        	if(Player[playerid][VipRank] < 2)
				        	{
				        		Player[playerid][HasSprayCans]--;
				        	}
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "You have no spraycans left.");
				        }
				    }
			    }
			    else
			    {
			        SendClientMessage(playerid, WHITE, "Invalid colour, colours are from 0-126.");
			    }
			}
		}
	}
	return 1;
}

command(gtype, playerid, params[])
{
	new GroupID, GroupType, string[128];
	if(sscanf(params, "dd", GroupID, GroupType))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /gtype [Group ID] [Group Type]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
		    format(string, sizeof(string), "Groups/Group_%d.ini", GroupID);

		    if(fexist(string))
		    {
		        Groups[GroupID][CommandTypes] = GroupType;
		        format(string, sizeof(string), "You have set %s's group type to %d.", Groups[GroupID][GroupName], GroupType);
		        SendClientMessage(playerid, WHITE, string);
		        SaveGroup(GroupID);
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Invalid Group ID!");
		    }
	    }
	}
	return 1;
}

command(gskins, playerid, params[])
{
	new skin, skinslot, GroupID, string[128];
	if(sscanf(params, "ddd", GroupID, skinslot, skin))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /gskins [Group ID] [Skin Slot (0-6)] [Skin ID]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
		{
		    format(string, sizeof(string), "Groups/Group_%d.ini", GroupID);
		    if(fexist(string))
		    {
			    if(skinslot < 7 && skinslot >= 0)
			    {
			        if(!IsInvalidSkin(skin))
			        {
			            switch(skinslot)
			            {
			            	case 0: Groups[Player[playerid][Group]][Skin0] = skin;
			            	case 1: Groups[Player[playerid][Group]][Skin1] = skin;
			            	case 2: Groups[Player[playerid][Group]][Skin2] = skin;
			            	case 3: Groups[Player[playerid][Group]][Skin3] = skin;
			            	case 4: Groups[Player[playerid][Group]][Skin4] = skin;
			            	case 5: Groups[Player[playerid][Group]][Skin5] = skin;
			            	case 6: Groups[Player[playerid][Group]][Skin6] = skin;
			            }

			            format(string, sizeof(string), "You have changed skin slot %d, to skin %d.", skinslot, skin);
			            SendClientMessage(playerid, WHITE, string);
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "Invalid skin ID.");
			        }
			    }
			    else
			    {
			        SendClientMessage(playerid, WHITE, "Invalid Skin slot ID! Slots are from 0-6.");
			    }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You must specify a valid group ID.");
		    }
	    }
	}
	return 1;
}

command(changeranks, playerid, params[])
{
	new rankname[128], rank, string[128];
	if(sscanf(params, "dz", rank, rankname))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /changeranks [rank slot (0-6)] [new name]");
	}
	else
	{
	    if(Player[playerid][GroupRank] >= 6 && Player[playerid][Group] >= 1)
		{
		    if(rank < 7 && rank > 0)
		    {
		        if(strlen(rankname) >= 1 && strlen(rankname) < 20)
		        {
		            switch(rank)
		            {
		            	case 0: format(Groups[Player[playerid][Group]][RankName0], 255, "%s", rankname);
		            	case 1: format(Groups[Player[playerid][Group]][RankName1], 255, "%s", rankname);
		            	case 2: format(Groups[Player[playerid][Group]][RankName2], 255, "%s", rankname);
		            	case 3: format(Groups[Player[playerid][Group]][RankName3], 255, "%s", rankname);
		            	case 4: format(Groups[Player[playerid][Group]][RankName4], 255, "%s", rankname);
		            	case 5: format(Groups[Player[playerid][Group]][RankName5], 255, "%s", rankname);
		            	case 6: format(Groups[Player[playerid][Group]][RankName6], 255, "%s", rankname);
		            }

		            format(string, sizeof(string), "You have changed rank %d's name to %s.", rank, rankname);
		            SendClientMessage(playerid, WHITE, string);
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Rank name length can't be longer than 20 characters, or shorter than 1.");
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Invalid Rank ID! Ranks start from 0-6.");
		    }
	    }
	}
	return 1;
}

command(remoteuninvite, playerid, params[])
{
	new Name[128], string[128], Result = -1;
	if(sscanf(params, "z", Name))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /remoteuninvite [name]");
		SendClientMessage(playerid, GREY, "NOTE: This command is CaSe SeNsItIvE.");
	}
	else
	{
		if(Player[playerid][GroupRank] >= 6 && Player[playerid][Group] >= 1)
		{
		    if(strlen(Name) >= 1 && strlen(Name) < MAX_PLAYER_NAME)
		    {
		        for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(IsPlayerConnectedEx(i))
		            {
		                if(strcmp(GetName(i), Name, true) == 0)
		                {
		                    Result = i;
		                }
		            }
		        }

		        if(Result == -1)
		        {
			        format(string, sizeof(string), "Accounts/%s.ini", Name);
			        if(fexist(string))
			        {
			            if(dini_Isset(string, "Group"))
			            {
			                if(dini_Int(string, "Group") == Player[playerid][Group])
			                {
			                    if(dini_Int(string, "GroupRank") > Player[playerid][GroupRank])
			                    {
			                        SendClientMessage(playerid, WHITE, "You can't uninvite a higher rank.");
			                    }
			                    else
			                    {
				                	dini_IntSet(string, "Group", 0);
				                	dini_IntSet(string, "GroupRank", 0);
				                	format(string, sizeof(string), "%s has left the group (remotely un-invited)", Name);
				                	GroupMessage(playerid, ANNOUNCEMENT, string);
			                	}
			                }
			                else
			                {
			                    SendClientMessage(playerid, WHITE, "That person isn't in the same group as you.");
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "They are missing the player group variable.");
			            }
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "Invalid name.");
			        }
			    }
			    else
			    {
			        SendClientMessage(playerid, WHITE, "That player is connected, use /uninvite.");
			    }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Invalid name.");
		    }
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You're not a Group Leader.");
		}
	}
	return 1;
}

command(changerank, playerid, params[])
{
	new id, rank, string[128];
	if(sscanf(params, "ud", id, rank))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /changerank [playerid] [rank]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
		    if(Player[playerid][GroupRank] >= 5 && Player[playerid][Group] >= 1)
			{
			    if(rank >= 1 && rank < 5 && Player[playerid][GroupRank] == 5 || rank >= 1 && rank < 6 && Player[playerid][GroupRank] == 6)
			    {
					if(IsPlayerConnectedEx(id))
					{
					    if(Player[id][Group] == Player[playerid][Group])
					    {
					        if(Player[playerid][GroupRank] >= Player[id][GroupRank])
					        {
						        Player[id][GroupRank] = rank;
						        format(string, sizeof(string), "You have altered %s's rank to %d.", GetName(id), rank);
						        SendClientMessage(playerid, WHITE, string);
						        format(string, sizeof(string), "Your rank has been changed to %d, by %s.", rank, GetName(playerid));
						        SendClientMessage(id, WHITE, string);
					        }
					        else
					        {
					            SendClientMessage(playerid, WHITE, "You may not alter a higher ranks' rank.");
					        }
					    }
					    else
					    {
					        SendClientMessage(playerid, WHITE, "You must be in the same group as that player to control their rank.");
					    }
					}
			    }
		    }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    }
	}
	return 1;
}

command(remotecheck, playerid, params[])
{
	new Name[128], string[128], string2[128];
	if(sscanf(params, "z", Name))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /remotecheck [name]");
			SendClientMessage(playerid, GREY, "NOTE: This command is CaSe SeNsItIvE.");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	        if(strlen(Name) >= 3 && strlen(Name) < MAX_PLAYER_NAME+1)
	        {
		        format(string2, sizeof(string2), "Accounts/%s.ini", Name);
		        if(fexist(string2))
		        {
		            if(dini_Int(string2, "AdminLevel") >= Player[playerid][AdminLevel])
		            {
		                SendClientMessage(playerid, WHITE, "You can't check a higher admin.");
		            }
		            else
		            {
			            SendClientMessage(playerid, WHITE, "--------------------------------------------------------------");
						new tmpint = dini_Int(string2, "Banned");
						switch(tmpint)
						{
						    case -1:
						    {
						        if(IsPlayerConnectedEx(GetPlayerID(Name)))
						        {
						            ShowStatistics(playerid, GetPlayerID(Name));
						        }
						        else
						        {
									format(string, sizeof(string), "Name: %s | Admin Level: %d | Last IP: %s | Last Login: %d/%d/%d | Time: %d:%d | Status: Unbanned.", Name, dini_Int(string2, "AdminLevel"), dini_Get(string2, "LastIP"), dini_Int(string2, "LastLoginDay"), dini_Int(string2, "LastLoginMonth"), dini_Int(string2, "LastLoginYear"), dini_Int(string2, "LastLoginHour"), dini_Int(string2, "LastLoginMinute"));
									SendClientMessage(playerid, GREY, string);
									format(string, sizeof(string), "Playing Hours: %d | Materials: %d | House: %d | Business: %d", dini_Int(string2, "PlayingHours"),  dini_Int(string2, "Materials"), dini_Int(string2, "House"), dini_Int(string2, "Business"));
									SendClientMessage(playerid, GREY, string);
									format(string, sizeof(string), "Cocaine: %d grams | Pot: %d grams | Group: %d (%s)", dini_Int(string2, "Crack"), dini_Int(string2, "Pot"), dini_Int(string2, "Group"), Groups[dini_Int(string2, "Group")][GroupName]);
                                    SendClientMessage(playerid, GREY, string);
								}
						    }
						    case 0:
						    {
						        if(IsPlayerConnectedEx(GetPlayerID(Name)))
						        {
						            ShowStatistics(playerid, GetPlayerID(Name));
						        }
						        else
						        {
									format(string, sizeof(string), "Name: %s | Admin Level: %d | Last IP: %s | Last Login: %d/%d/%d | Time: %d:%d | Status: Offline.", Name, dini_Int(string2, "AdminLevel"), dini_Get(string2, "LastIP"), dini_Int(string2, "LastLoginDay"), dini_Int(string2, "LastLoginMonth"), dini_Int(string2, "LastLoginYear"), dini_Int(string2, "LastLoginHour"), dini_Int(string2, "LastLoginMinute"));
									SendClientMessage(playerid, GREY, string);
									format(string, sizeof(string), "Playing Hours: %d | Materials: %d | House: %d | Business: %d", dini_Int(string2, "PlayingHours"),  dini_Int(string2, "Materials"), dini_Int(string2, "House"), dini_Int(string2, "Business"));
									SendClientMessage(playerid, GREY, string);
									format(string, sizeof(string), "Cocaine: %d grams | Pot: %d grams | Group: %d (%s)", dini_Int(string2, "Crack"), dini_Int(string2, "Pot"), dini_Int(string2, "Group"), Groups[dini_Int(string2, "Group")][GroupName]);
                                    SendClientMessage(playerid, GREY, string);
								}
							}
						    case 1:
						    {
								format(string, sizeof(string), "Name: %s | Admin Level: %d | Last IP: %s | Last Login: %d/%d/%d | Time: %d:%d | Status: Banned.", Name, dini_Int(string2, "AdminLevel"), dini_Get(string2, "LastIP"), dini_Int(string2, "LastLoginDay"), dini_Int(string2, "LastLoginMonth"), dini_Int(string2, "LastLoginYear"), dini_Int(string2, "LastLoginHour"), dini_Int(string2, "LastLoginMinute"));
								SendClientMessage(playerid, GREY, string);
								format(string, sizeof(string), "Geographical Location: %s | Playing Hours: %d | Materials: %d | House: %d | Business: %d | Cocaine: %d | Pot: %d | Group: %d", dini_Int(string2, "PlayingHours"),  dini_Int(string2, "Materials"), dini_Int(string2, "House"), dini_Int(string2, "Business"), dini_Int(string2, "Crack"), dini_Int(string2, "Pot"), dini_Int(string2, "Group"));
								SendClientMessage(playerid, GREY, string);
							}
						    case 2:
						    {
								format(string, sizeof(string), "Name: %s | Admin Level: %d | Last IP: %s | Last Login: %d/%d/%d | Time: %d:%d | Status: Permabanned.", Name, dini_Int(string2, "AdminLevel"), dini_Get(string2, "LastIP"), dini_Int(string2, "LastLoginDay"), dini_Int(string2, "LastLoginMonth"), dini_Int(string2, "LastLoginYear"), dini_Int(string2, "LastLoginHour"), dini_Int(string2, "LastLoginMinute"));
								SendClientMessage(playerid, GREY, string);
								format(string, sizeof(string), "Playing Hours: %d | Materials: %d | House: %d | Business: %d | Cocaine: %d | Pot: %d | Group: %d", dini_Int(string2, "PlayingHours"),  dini_Int(string2, "Materials"), dini_Int(string2, "House"), dini_Int(string2, "Business"), dini_Int(string2, "Crack"), dini_Int(string2, "Pot"), dini_Int(string2, "Group"));
								SendClientMessage(playerid, GREY, string);
							}
						    case 4:
						    {
								format(string, sizeof(string), "Name: %s | Admin Level: %d | Last IP: %s | Last Login: %d/%d/%d | Time: %d:%d | Status: Autobanned.", Name, dini_Int(string2, "AdminLevel"), dini_Get(string2, "LastIP"), dini_Int(string2, "LastLoginDay"), dini_Int(string2, "LastLoginMonth"), dini_Int(string2, "LastLoginYear"), dini_Int(string2, "LastLoginHour"), dini_Int(string2, "LastLoginMinute"));
								SendClientMessage(playerid, GREY, string);
								format(string, sizeof(string), "Playing Hours: %d | Materials: %d | House: %d | Business: %d | Cocaine: %d | Pot: %d | Group: %d", dini_Int(string2, "PlayingHours"),  dini_Int(string2, "Materials"), dini_Int(string2, "House"), dini_Int(string2, "Business"), dini_Int(string2, "Crack"), dini_Int(string2, "Pot"), dini_Int(string2, "Group"));
								SendClientMessage(playerid, GREY, string);
							}
						}
						SendClientMessage(playerid, WHITE, "--------------------------------------------------------------");
			        }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Account not found.");
		        }
	        }
	    }
	}
	return 1;
}

command(kick, playerid, params[])
{
	new id, reason[128], string[128];
	if(sscanf(params, "us", id, reason))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /kick [playerid] [reason]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 1)
		{
		    if(IsPlayerConnected(id))
		    {
		        if(Player[id][AdminLevel] > Player[playerid][AdminLevel])
		        {
		            SendClientMessage(playerid, WHITE, "You do not have the authority to do that (higher rank).");
		            return 1;
		        }
		        
		        if(Player[id][AdminLevel] < 1)
		        {
		        	Player[playerid][AdminActions]++;
		            SendClientMessage(playerid, WHITE, "You have earned an admin action!");
		        }
		        
		        format(string, sizeof(string), "Kick: %s has been kicked by %s, reason: %s", GetName(id), Player[playerid][AdminName], reason);
		        SendClientMessageToAll(LIGHTRED, string);
		        AdminActionsLog(string);
		        format(string, sizeof(string), "You have been kicked from the server for %s", reason);
		        SendClientMessage(id, WHITE, string);
		        Kick(id);
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not connected.");
		        return 1;
		    }
		}
	}
	return 1;
}

command(adminname, playerid, params[])
{
	new name[128], id, string[128];
	if(sscanf(params, "uz", id, name))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /adminname [playerid] [new name]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        if(Player[id][AdminLevel] >= 1)
	        {
		        if(strlen(name) > 1 && strlen(name) < MAX_PLAYER_NAME)
		        {
		            format(string, sizeof(string), "Accounts/%s.ini", name);

		            if(fexist(string))
		            {
		                SendClientMessage(playerid, WHITE, "You can't select an admin name that is already an active account.");
		            }
		            else
		            {
		                format(string, sizeof(string), "Admin %s has changed %s's admin name to %s.", Player[playerid][AdminName], GetName(id), name);
		                StatLog(string);
		                SendToAdmins(ADMINORANGE, string, 0);

		                format(Player[id][AdminName], 255, "%s", name);

		                if(Player[id][AdminDuty] >= 1)
		                {
		                    SetPlayerName(id, Player[id][AdminName]);
		                }
		            }
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "Invalid name. The name must exceed 1 character and be shorter than 24 characters.");
		        }
	        }
	    }
	}
	return 1;
}

command(check, playerid, params[])
{
	new id;
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /check [playerid]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
            	ShowStatistics(playerid, id);
            }
            else
            {
                SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
            }
	    }
	}
	return 1;
}

command(resetwarns, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /resetwarns [playerid]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
        	format(Player[id][Warning1], 255, "None");
			format(Player[id][Warning2], 255, "None");
			format(Player[id][Warning3], 255, "None");
			
			format(string, sizeof(string), "You have reset %s's warnings.", GetName(id));
			SendClientMessage(playerid, WHITE, string);
			format(string, sizeof(string), "%s has reset your warnings.", GetName(playerid));
			SendClientMessage(id, YELLOW, string);
			format(string, sizeof(string), "Server Admin %s has reset player %s's warnings.", GetName(playerid), GetName(id));
			StatLog(string);
	    }
	}
	return 1;
}

command(ad, playerid, params[])
{
	new advertisement[128], string[128];
	if(sscanf(params, "z", advertisement))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /ad(vertise) [message]");
	}
	else
	{
	    if(Businesses[Player[playerid][InBusiness]][bType] == 4)
	    {
	        if(Player[playerid][Money] >= 500)
	        {
	            if(AdCanBePlaced == 50)
	            {
	                if(Player[playerid][PhoneN] != -1)
	                {
				        format(string, sizeof(string), "Advertisement: %s.", advertisement);
						SendClientMessageToAll(GREEN, string);
						format(string, sizeof(string), "Advertisement placed by %s - Phone Number: %d, from %s.", GetName(playerid), Player[playerid][PhoneN], Businesses[Player[playerid][InBusiness]][bName]);
						SendClientMessageToAll(GREY, string);
						Player[playerid][Money] -= 500;
						Businesses[Player[playerid][InBusiness]][bVault] += 500;
						AdCanBePlaced = 1;
						SendClientMessage(playerid, WHITE, "You have placed an advertisement and have been charged $500.");

						Player[playerid][AdsPlaced]++;
                        
						switch(Player[playerid][AdsPlaced])
						{
						    case 100:
						    {
							    SendClientMessage(playerid, WHITE, "You have unlocked a new achievement!");
							    SendClientMessage(playerid, GREY, "You have placed 100 advertisements.");
							    Player[playerid][AchievementRank]++;
						    }
						    case 200:
						    {
							    SendClientMessage(playerid, WHITE, "You have unlocked a new achievement!");
							    SendClientMessage(playerid, GREY, "You have placed 200 advertisements.");
							    Player[playerid][AchievementRank]++;
						    }
						}

					}
					else
					{
					    SendClientMessage(playerid, WHITE, "You need a phone.");
					}
				}
				else
				{
				    SendClientMessage(playerid, WHITE, "You're unable to place an advertisement right now, please wait 50 seconds!");
				}
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You need at least $500 to place an advertisement.");
			}
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You must be in an advertisement business, to place an advertisement.");
	    }
	}
	return 1;
}

command(advertise, playerid, params[])
{
	new advertisement[128], string[128];
	if(sscanf(params, "z", advertisement))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /ad(vertise) [message]");
	}
	else
	{
	    if(Businesses[Player[playerid][InBusiness]][bType] == 4)
	    {
	        if(Player[playerid][Money] >= 500)
	        {
	            if(AdCanBePlaced == 50)
	            {
	                if(Player[playerid][PhoneN] != -1)
	                {
				        format(string, sizeof(string), "Advertisement: %s.", advertisement);
						SendClientMessageToAll(GREEN, string);
						format(string, sizeof(string), "Advertisement placed by %s - Phone Number: %d, from %s.", GetName(playerid), Player[playerid][PhoneN], Businesses[Player[playerid][InBusiness]][bName]);
						SendClientMessageToAll(GREY, string);
						Player[playerid][Money] -= 500;
						Businesses[Player[playerid][InBusiness]][bVault] += 500;
						AdCanBePlaced = 1;
						SendClientMessage(playerid, WHITE, "You have placed an advertisement and have been charged $500.");
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "You need a phone.");
					}
				}
				else
				{
				    SendClientMessage(playerid, WHITE, "You're unable to place an advertisement right now, please wait 50 seconds!");
				}
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You need at least $500 to place an advertisement.");
			}
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You must be in an advertisement business, to place an advertisement.");
	    }
	}
	return 1;
}

command(gmx, playerid, params[])
{
	new reason[128];
	if(sscanf(params, "z", reason))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /gmx [reason]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	    	if(CurGMX == 0)
	    	{
	    		GMXPrep(playerid, reason);
	    	}
	    	else
	    	{
	        	SendClientMessage(playerid, WHITE, "There already is a current GMX in execution.");
	    	}
	    }
	}
	return 1;
}

command(bbalance, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][Business] >= 1)
	{
	    SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------");
	    format(string, sizeof(string), "Supplies: %d | Vault Money: %d", Businesses[Player[playerid][Business]][bSupplies], Businesses[Player[playerid][Business]][bVault]);
	    SendClientMessage(playerid, GREY, string);
	    SendClientMessage(playerid, WHITE, "-----------------------------------------------------------------------");
	}
	return 1;
}

command(destroyvehicles, playerid, params[])
{
    #pragma unused params
    
	if(Player[playerid][AdminLevel] >= 3)
	{
	
    	for(new i = 0; i < SpawnedVehicles; i++)
    	{
    	
			DestroyVehicle(AdminSpawned[i]);
			printf("[DEBUG] Car %d despawned.", AdminSpawned[i]);
			SpawnedVehicles--;
			
        }
        
        SendClientMessage(playerid, WHITE, "Destroyed all admin-spawned vehicles.");
        SpawnedVehicles = 0;
	}
	
	return 1;
}

command(respawncar, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 4)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	    	SetVehicleToRespawn(GetPlayerVehicleID(playerid));
		}
	}
	return 1;
}

command(lockbusiness, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Business] > 0)
	{
	    if(Businesses[Player[playerid][Business]][bLockStatus] == 1)
	    {
	        Businesses[Player[playerid][Business]][bLockStatus] = 0;
	        SendClientMessage(playerid, WHITE, "Business un-locked.");
	    }
	    else
	    {
	        Businesses[Player[playerid][Business]][bLockStatus] = 1;
	        SendClientMessage(playerid, WHITE, "Business locked.");
	    }
	}
	return 1;
}

command(lockhouse, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][House] > 0)
	{
	    if(Houses[Player[playerid][House]][LockStatus] == 1)
	    {
	        Houses[Player[playerid][House]][LockStatus] = 0;
	        SendClientMessage(playerid, WHITE, "House un-locked.");
	    }
	    else
	    {
	        Houses[Player[playerid][House]][LockStatus] = 1;
	        SendClientMessage(playerid, WHITE, "House locked.");
	    }
	}
	return 1;
}

command(despawncityhallobjects, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 5)
	{
		if(CityHall == 1)
		{
			for(new i = 1; i < 29; i++)
			{
			    DestroyDynamicObject(CityHallObjects[i]);
			}

			CityHall = 0;
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "The City Hall objects have been de-spawned.");
		}
	}
	return 1;
}

command(cityhallobjects, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 5)
	{
	    SendClientMessage(playerid, WHITE, "The City Hall objects have been spawned.");
	    CityHall = 1;
		CityHallObjects[1] = CreateDynamicObject(982, 1434.6097412109, -1732.6772460938, 13.066367149353, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[2] = CreateDynamicObject(982, 1434.6334228516, -1758.2786865234, 13.066367149353, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[3] = CreateDynamicObject(982, 1434.609375, -1732.6767578125, 14.341347694397, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[4] = CreateDynamicObject(982, 1434.6328125, -1758.2783203125, 14.341347694397, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[5] = CreateDynamicObject(982, 1524.5596923828, -1732.6767578125, 13.230429649353, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[6] = CreateDynamicObject(982, 1524.5347900391, -1758.2783203125, 13.230429649353, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[7] = CreateDynamicObject(982, 1524.5595703125, -1732.6767578125, 14.455410957336, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[8] = CreateDynamicObject(982, 1524.5341796875, -1758.2783203125, 14.455410957336, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[9] = CreateDynamicObject(982, 1447.4156494141, -1719.8780517578, 13.230429649353, 0.000000, 0.000000, 90, -1, -1, -1, 150.0); //
		CityHallObjects[10] = CreateDynamicObject(982, 1447.4150390625, -1719.8779296875, 14.455410957336, 0.000000, 0.000000, 90, -1, -1, -1, 150.0); //
		CityHallObjects[11] = CreateDynamicObject(982, 1511.8211669922, -1719.8779296875, 13.230429649353, 0.000000, 0.000000, 90, -1, -1, -1, 150.0); //
		CityHallObjects[12] = CreateDynamicObject(982, 1511.8203125, -1719.8779296875, 14.455410957336, 0.000000, 0.000000, 90, -1, -1, -1, 150.0); //
		CityHallObjects[13] = CreateDynamicObject(982, 1463.4311523438, -1719.8780517578, 13.230429649353, 0.000000, 0.000000, 90, -1, -1, -1, 150.0); //
		CityHallObjects[14] = CreateDynamicObject(982, 1463.4311523438, -1719.8779296875, 14.455410957336, 0.000000, 0.000000, 90, -1, -1, -1, 150.0); //
		CityHallObjects[15] = CreateDynamicObject(982, 1495.8223876953, -1719.8742675781, 13.230429649353, 0.000000, 0.000000, 90, -1, -1, -1, 150.0); //
		CityHallObjects[16] = CreateDynamicObject(982, 1495.822265625, -1719.8740234375, 14.455410957336, 0.000000, 0.000000, 90, -1, -1, -1, 150.0); //
		CityHallObjects[17] = CreateDynamicObject(983, 1477.4157714844, -1716.9256591797, 13.230429649353, 0.000000, 0.000000, 338.16516113281, -1, -1, -1, 150.0); //
		CityHallObjects[18] = CreateDynamicObject(983, 1477.4150390625, -1716.9248046875, 14.480410575867, 0.000000, 0.000000, 338.16467285156, -1, -1, -1, 150.0); //
		CityHallObjects[19] = CreateDynamicObject(983, 1482.0812988281, -1716.837890625, 13.230429649353, 0.000000, 0.000000, 18.029968261719, -1, -1, -1, 150.0); //
		CityHallObjects[20] = CreateDynamicObject(983, 1482.0810546875, -1716.837890625, 14.480410575867, 0.000000, 0.000000, 18.028564453125, -1, -1, -1, 150.0); //
		CityHallObjects[21] = CreateDynamicObject(1436, 1480.6085205078, -1732.3073730469, 13.938022613525, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[22] = CreateDynamicObject(1436, 1482.8724365234, -1732.3005371094, 13.938022613525, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[23] = CreateDynamicObject(3406, 1477.8425292969, -1746.1690673828, 13.990423202515, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[24] = CreateDynamicObject(3406, 1477.8444824219, -1748.1450195313, 13.990423202515, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[25] = CreateDynamicObject(3406, 1486.6118164063, -1748.1579589844, 13.990423202515, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[26] = CreateDynamicObject(974, 1487.1790771484, -1749.1290283203, 18.838981628418, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[27] = CreateDynamicObject(974, 1476.2663574219, -1749.1290283203, 18.838981628418, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
		CityHallObjects[28] = CreateDynamicObject(974, 1481.8503417969, -1749.1037597656, 18.838981628418, 0.000000, 0.000000, 0.000000, -1, -1, -1, 150.0); //
	}
	return 1;
}

command(endevent, playerid, params[])
{
	#pragma unused params
	new string[128];
	
	if(Player[playerid][AdminLevel] >= 3)
	{
	    if(CurrentEvent == 0)
	    {
	        SendClientMessage(playerid, WHITE, "There isn't an active event.");
	    }
	    else
	    {
		    for(new i = 0; i < MAX_PLAYERS; i++)
		    {
		        if(Player[i][IsAtEvent] == 1)
		        {
		            ResetPlayerWeapons(i);
		        	TogglePlayerControllable(i, true);
				    SetPlayerInterior(i, SpawnInt);
				    SetPlayerVirtualWorld(i, 0);
				    SetPlayerPos(i, SpawnX, SpawnY, SpawnZ);
		        	Player[i][IsAtEvent] = 0;
		        	SetPlayerSkin(i, Player[i][LastSkin]);
					new MathsFlaw = floatround(Player[i][LastHealth], floatround_ceil);
		    		SetPlayerHealth(i, MathsFlaw);
					MathsFlaw = floatround(Player[i][LastArmour], floatround_ceil);
					SetPlayerArmour(i, MathsFlaw);
		    		GivePlayerSavedWeapons(i);
		    	}
		    }

		    format(string, sizeof(string), "%s has closed the event.", GetName(playerid));
		    SendClientMessageToAll(LIGHTRED, string);
		    CurrentEvent = 0;
		    EC = 0;
		}
    }
    return 1;
}

command(admincommands, playerid, params[])
{
	#pragma unused params
	SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------");

	if(Player[playerid][AdminLevel] >= 1)
	{
		SendClientMessage(playerid, WHITE, "Level 1 Admin: /a, /warn, /kick, /goto, /get, /mute, /adminduty, /go, /checkweapons, /check, /slap, /spec, /announce, /afk");
		SendClientMessage(playerid, WHITE, "Level 1 Admin: /prison, /spawnownedcar, /vehname, /gunname, /aw, /analysis, /listgroups, /remotecheck, /reports, /acceptreport");
		SendClientMessage(playerid, WHITE, "Level 1 Admin: /notetoplayer, /gotopoint, /gotoplayerscar, /movehouse, /movebusiness, /reportban");
	}

	if(Player[playerid][AdminLevel] >= 2)
	{
		SendClientMessage(playerid, GREY, "Level 2 Admin: /ban, /freeze, /unfreeze, /fine, /toggleooc, /togglenewbie, /listgroup, /confiscate, /adivorce, /belt");
		SendClientMessage(playerid, GREY, "Level 2 Admin: /houseprice, /businessprice, /agotohouse, /agotobusiness, /forcetutorial");
	}

	if(Player[playerid][AdminLevel] >= 3)
	{
		SendClientMessage(playerid, WHITE, "Level 3 Admin: /spawncar, /set, /agiveweapon, /eventproperties, /startevent, /endevent, /despawncar, /setleader, /destroyvehicles");
	}

	if(Player[playerid][AdminLevel] >= 4)
	{
	    SendClientMessage(playerid, GREY, "Level 4 Admin: /changename, /permaban, /unban, /explode, /resetwarns, /respawncar, /gtype, /resetplayer, /endround, /adisbandgroup");
		SendClientMessage(playerid, GREY, "Level 4 Admin: /unbanip, /banip, /ghqinterior, /ghqexterior, /gskins, /setcargroup, /businesstype, /spotlight, /quizhint, /startround");
        SendClientMessage(playerid, GREY, "Level 4 Admin: /movecar, /setcarcolour, /remoteprison, /asellhouse, /asellbusiness, /spotlight, /killspotlight, /movejob");
		SendClientMessage(playerid, GREY, "Level 4 Admin: /setbusinesssupplies, /highvolume, /setweather, /gotocarid, /clearchat, /unmodallcars");
	}

	if(Player[playerid][AdminLevel] >= 5)
	{
	    SendClientMessage(playerid, WHITE, "Level 5 Admin: /changeviplevel, /changeplayercar, /changeranktitle, /remoteban, /sban, /betainvite, /betauninvite, /bonuscar");
		SendClientMessage(playerid, WHITE, "Level 5 Admin: /respawnallvehicles, /anticheat, /cityhallobjects, /despawncityhallobjects, /createjob, /adminname, /changejobmessage");
		SendClientMessage(playerid, WHITE, "Level 5 Admin: /changejobname, /gmx, /savedata, /createhouse, /createbusiness, /createbusiness, /movelocation, /changeranktitle");
	}
	
	if(Player[playerid][AdminLevel] >= 6)
	{
	    SendClientMessage(playerid, GREY, "Level 6 Admin: /hostname, /changeadminlevel, /deleteaccount");
	}
	
	SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------");
	return 1;
}

command(savedata, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 5)
	{
	    SaveGeneralData();
	    SendClientMessage(playerid, WHITE, "All general data saved (accounts, groups, houses and businesses).");
	}
	return 1;
}

command(redeemcheck, playerid, params[])
{
	#pragma unused params
	if(IsPlayerInRangeOfPoint(playerid, 50, BankIntX, BankIntY, BankIntZ))
	{
		if(Player[playerid][BankStatus] == 1)
	    {
	    	SendClientMessage(playerid, WHITE, "The authorities have suspended your bank account.");
	    }
	    else
	    {
	        if(Player[playerid][CheckBalance] >= 1)
	        {
	            new string[128];
	            format(string, sizeof(string), "You have redeemed $%s, it has been added to your bank balance.", IntToFormattedStr(Player[playerid][CheckBalance]));
	        	SendClientMessage(playerid, WHITE, string);
	        	Player[playerid][BankMoney] += Player[playerid][CheckBalance];
	        	Player[playerid][CheckBalance] = 0;
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "There is no money on your check balance.");
	        }
	    }
	}
	return 1;
}

command(getid, playerid, params[])
{
	new string[128], id;
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /getid [playerid/name]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
		    format(string, sizeof(string), "The ID that matches %s is %d.", GetName(id), id);
		    SendClientMessage(playerid, WHITE, string);
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or is not logged in.");
	    }
	}
	return 1;
}

command(givecheck, playerid, params[])
{
	new string[128], id, money;
	if(sscanf(params, "ud", id, money))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /givecheck [playerid] [money]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
	        if(Player[playerid][BankMoney] >= money)
	        {
	            if(GetDistanceBetweenPlayers(playerid, id) < 5)
	            {
	                if(money >= 6000000)
					{
						SendClientMessage(playerid, WHITE, "You can't give that much.");
						return 1;
					}
					
		            format(string, sizeof(string), "You have given $%s to %s. This has been excluded from your bank balance.", IntToFormattedStr(money), GetName(id));
		            SendClientMessage(playerid, WHITE, string);
		            Player[playerid][BankMoney] -= money;
		            Player[id][CheckBalance] += money;

		            format(string, sizeof(string), "You have been given a check for $%s, from %s.", IntToFormattedStr(money), GetName(playerid));
		            SendClientMessage(id, WHITE, string);

		            format(string, sizeof(string), "[CHECK] %s has given %s to %s.", GetName(playerid), IntToFormattedStr(money), GetName(id));
		            MoneyLog(string);

		            format(string, sizeof(string), "* %s signs a check and gives it to %s.", GetName(playerid), GetName(id));
		            NearByMessage(playerid, NICESKY, string);

		            SendClientMessage(id, WHITE, "You must visit the bank and use /redeemcheck to redeem the check balance.");
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "You're too far away.");
		        }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You don't have that much in your bank.");
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player isn't connected or is not logged in.");
	    }
	}
	return 1;
}

command(eject, playerid, params[])
{
	new string[128], id;
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /eject [playerid]");
	}
	else
	{
	    if(GetPlayerState(playerid) == 2)
	    {
	        if(GetPlayerVehicleID(id) == GetPlayerVehicleID(playerid))
	        {
		        format(string, sizeof(string), "* %s has ejected %s from their vehicle.", GetName(playerid), GetName(id));
		        NearByMessage(playerid, NICESKY, string);
		        RemovePlayerFromVehicle(id);
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You're not the driver.");
	    }
	}
	return 1;
}

command(flipcoin, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][Money] >= 1)
	{
	    Player[playerid][Money] -= 1;
	    
	    if(random(6) < 3)
	    {
	    	format(string, sizeof(string), "* %s has withdrawn a coin, and flips it. Getting the 'HEADS' side.", GetName(playerid));
	    }
	    else
	    {
	    	format(string, sizeof(string), "* %s has withdrawn a coin, and flips it. Getting the 'TAILS' side.", GetName(playerid));
	    }
	    
	    NearByMessage(playerid, NICESKY, string);
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You must have more than $1 to flip.");
	}
	return 1;
}

command(explode, playerid, params[])
{
	new	userid, string[128];
	if(sscanf(params, "u", userid))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /explode [playerid]");
		}
	}
	else
	{
	    if(IsPlayerConnectedEx(userid))
	    {
	        if(Player[playerid][AdminLevel] >= 4)
	        {
				if(userid == INVALID_PLAYER_ID)
				{
			    	SendClientMessage(playerid, WHITE, "Invalid ID.");
			    	return 1;
				}
				else
				{
					if(Player[playerid][AdminLevel] >= Player[userid][AdminLevel])
					{
						new Float:px, Float:py, Float:pz;
						GetPlayerPos(userid, px, py, pz);
						SetPlayerHealth(userid, 50);
						CreateExplosion(px+10, py, pz, 7, 100.0);
						CreateExplosion(px, py+10, pz, 7, 100.0);
						CreateExplosion(px-10, py, pz, 7, 100.0);
						CreateExplosion(px, py-10, pz, 7, 100.0);
						CreateExplosion(px, py, pz, 7, 100.0);
						format(string, sizeof(string), "You have exploded %s.", GetName(userid));
						SendClientMessage(playerid, WHITE, string);
				    }
				}
			}
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or is logged in.");
	    }
	}
	return 1;
}

command(slap, playerid, params[])
{
	new string[128], id, Float: pX, Float: pY, Float: pZ, MathsFlaw, Float: Mathematical;
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /slap [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 1)
		{
		    if(IsPlayerConnectedEx(id))
		    {
		        if(Player[playerid][AdminLevel] >= Player[id][AdminLevel])
		        {
					GetPlayerPos(id, pX, pY, pZ);
					SetPlayerPos(id, pX, pY, pZ+5);

					GetPlayerHealth(id, Mathematical);
					MathsFlaw = floatround(Mathematical, floatround_ceil);
			    	SetPlayerHealth(id, MathsFlaw-5);

			    	format(string, sizeof(string), "You have slapped %s.", GetName(id));
			    	SendClientMessage(playerid, WHITE, string);
			    	format(string, sizeof(string), "%s has been slapped.", GetName(id));
			    	NearByMessage(id, NICESKY, string);
		    	}
	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    	}
		}
	}
	return 1;
}

command(belt, playerid, params[])
{
	new string[128], id, Float: pX, Float: pY, Float: pZ;
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /belt [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
		    if(IsPlayerConnectedEx(id))
		    {
		        if(Player[playerid][AdminLevel] >= Player[id][AdminLevel])
		        {
					GetPlayerPos(id, pX, pY, pZ);
					SetPlayerPos(id, pX+21, pY+-16, pZ+16);

			    	format(string, sizeof(string), "You have whipped %s with your huge belt!", GetName(id));
			    	SendClientMessage(playerid, WHITE, string);
			    	format(string, sizeof(string), "%s has been whipped by the almighty belt.", GetName(id));
			    	NearByMessage(id, NICESKY, string);
		    	}
	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    	}
		}
	}
	return 1;
}

command(createbusiness, playerid, params[])
{
	new Usage[128], string[128];
	if(sscanf(params, "z", Usage))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /createbusiness [usage]");
			SendClientMessage(playerid, GREY, "Usage: Interior, Exterior or Complete.");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        if(strcmp(Usage, "exterior", true) == 0)
    	    {
				Player[playerid][BusinessExterior]++;
            	Player[playerid][bExtID] = GetPlayerInterior(playerid);
            	GetPlayerPos(playerid, Player[playerid][bExtX], Player[playerid][bExtY], Player[playerid][bExtZ]);
            	format(string, sizeof(string), "Exterior set! (X: %f, Y: %f, Z: %f).", Player[playerid][bExtX], Player[playerid][bExtY], Player[playerid][bExtZ]);
            	SendClientMessage(playerid, WHITE, string);
       		}
        	if(strcmp(Usage, "interior", true) == 0)
        	{
				Player[playerid][BusinessInterior]++;
            	Player[playerid][bIntID] = GetPlayerInterior(playerid);
            	GetPlayerPos(playerid, Player[playerid][bIntX], Player[playerid][bIntY], Player[playerid][bIntZ]);
            	format(string, sizeof(string), "Interior set! (X: %f, Y: %f, Z: %f).", Player[playerid][bIntX], Player[playerid][bIntY], Player[playerid][bIntZ]);
            	SendClientMessage(playerid, WHITE, string);
        	}
        	if(strcmp(Usage, "complete", true) == 0)
        	{
            	if(Player[playerid][BusinessInterior] > 0 || Player[playerid][BusinessExterior] > 0)
            	{
                	new NewBusinessID = SpawnedBusinesses+1;

                	if(NewBusinessID >= MAX_BUSINESSES)
                	{
                    	SendClientMessage(playerid, WHITE, "Too many businesses are currently spawned!");
                	}

                	format(string, sizeof(string), "Businesses/Business_%d.ini", NewBusinessID);

                	if(!fexist(string))
                	{
						Businesses[NewBusinessID][bInteriorID] = Player[playerid][bIntID];
						Businesses[NewBusinessID][bExteriorID] = Player[playerid][bExtID];
						Businesses[NewBusinessID][bInteriorX] = Player[playerid][bIntX];
						Businesses[NewBusinessID][bInteriorY] = Player[playerid][bIntY];
						Businesses[NewBusinessID][bInteriorZ] = Player[playerid][bIntZ];
						Businesses[NewBusinessID][bExteriorX] = Player[playerid][bExtX];
						Businesses[NewBusinessID][bExteriorY] = Player[playerid][bExtY];
						Businesses[NewBusinessID][bExteriorZ] = Player[playerid][bExtZ];
						format(Businesses[NewBusinessID][bOwner], 255, "Nobody");
						Businesses[NewBusinessID][bLockStatus] = 1;
						Businesses[NewBusinessID][bPrice] = 0;
						Businesses[NewBusinessID][bType] = 0;
						format(Businesses[NewBusinessID][bName], 255, "Nothing");
						Businesses[NewBusinessID][bPickupID] = CreateDynamicPickup(1239, 23, Businesses[NewBusinessID][bExteriorX], Businesses[NewBusinessID][bExteriorY], Businesses[NewBusinessID][bExteriorZ], 0, -1, -1, 150.0);

						dini_Create(string);
            			dini_FloatSet(string, "ExteriorX", Businesses[NewBusinessID][bExteriorX]);
			            dini_FloatSet(string, "ExteriorY", Businesses[NewBusinessID][bExteriorY]);
			            dini_FloatSet(string, "ExteriorZ", Businesses[NewBusinessID][bExteriorZ]);
			            dini_IntSet(string, "ExteriorID", Businesses[NewBusinessID][bExteriorID]);

			            dini_FloatSet(string, "InteriorX", Businesses[NewBusinessID][bInteriorX]);
			            dini_FloatSet(string, "InteriorY", Businesses[NewBusinessID][bInteriorY]);
			            dini_FloatSet(string, "InteriorZ", Businesses[NewBusinessID][bInteriorZ]);
			            dini_IntSet(string, "InteriorID", Businesses[NewBusinessID][bInteriorID]);

			            dini_IntSet(string, "Type", Businesses[NewBusinessID][bType]);
			            dini_IntSet(string, "Vault", Businesses[NewBusinessID][bVault]);
			            dini_IntSet(string, "Price", Businesses[NewBusinessID][bPrice]);
			            dini_Set(string, "Owner", Businesses[NewBusinessID][bOwner]);

			            dini_IntSet(string, "LockStatus", Businesses[NewBusinessID][bLockStatus]);
			            
			            dini_Set(string, "Name", Businesses[NewBusinessID][bName]);

                		Player[playerid][BusinessExterior]--;
                		Player[playerid][BusinessInterior]--;

                		SpawnedBusinesses++;
                		SendClientMessage(playerid, NICESKY, "Successfully created business!");
                		format(string, sizeof(string), "Please now proceed to use /businesstype and /businessprice (ID: %d)", NewBusinessID);
                		SendClientMessage(playerid, WHITE, string);
                		SetPlayerInterior(playerid, Businesses[NewBusinessID][bExteriorID]);
                		SetPlayerPos(playerid, Businesses[NewBusinessID][bExteriorX], Businesses[NewBusinessID][bExteriorY], Businesses[NewBusinessID][bExteriorZ]);
                	}
            	    else
        	        {
    	                SendClientMessage(playerid, WHITE, "Error: File already exists!");
	                }
            	}
            	else
            	{
                	SendClientMessage(playerid, WHITE, "You must select an exterior and an interior first!");
            	}
            }
        }
	}
	return 1;
}

command(respawnallvehicles, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 5)
	{
	    for(new i = 0; i < MAX_VEHICLES; i++)
	    {
	        if(Vehicles[i][GameID] >= 1)
	        {
	            SetVehicleToRespawn(Vehicles[i][GameID]);
	        }
	    }
	    
	    SendClientMessage(playerid, WHITE, "All saved vehicles have been respawned.");
    }
	return 1;
}

command(wiretransfer, playerid, params[])
{
	new string[255], id, amount;
	if(sscanf(params, "ud", id, amount))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /wiretransfer [playerid] [amount]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
	        if(Player[playerid][BankMoney] >= amount)
	        {
	            if(IsPlayerInRangeOfPoint(playerid, 50, BankIntX, BankIntY, BankIntZ))
	            {
		            if(Player[playerid][BankStatus] == 1)
		            {
		                SendClientMessage(playerid, WHITE, "The authorities have suspended your bank account.");
		            }
		            else
		            {
			            if(amount < 2000000)
			            {
				            Player[playerid][BankMoney] -= amount;
				            Player[id][BankMoney] += amount;
				            format(string, sizeof(string), "You have given $%s to %s.", IntToFormattedStr(amount), GetName(id));
				            SendClientMessage(playerid, WHITE, string);
				            format(string, sizeof(string), "You have been wired $%s, from %s.", IntToFormattedStr(amount), GetName(playerid));
				            SendClientMessage(id, WHITE, string);
				            format(string, sizeof(string), "WARNING: %s has wire-transfered $%s to %s.", GetName(playerid), IntToFormattedStr(amount), GetName(id));
			            	new tmpip1[128], tmpip2[128];
			            	
			            	if(amount >= 50000)
			                {
			                    SendToAdmins(ADMINORANGE, string, 1);
			                }
			                
			                LiteralGroupMessage(3, ADMINORANGE, string);
			                
			            	GetPlayerIp(playerid, tmpip1, sizeof(tmpip1));
			            	GetPlayerIp(id, tmpip2, sizeof(tmpip2));
							new hour, minute, second, day, year, month;
							gettime(hour, minute, second);
							getdate(year, month, day);
			            	format(string, sizeof(string), "[WIRETRANSFER] %s (IP: %s) has paid %s (IP: %s) $%s on %d/%d/%d (%d:%d:%d)", GetName(playerid), tmpip1, GetName(id), tmpip2, IntToFormattedStr(amount), day, month, year, hour, minute, second);
			            	MoneyLog(string);
			            	
			            	if(Player[playerid][PlayingHours] == 0 && amount >= 999 && Player[playerid][AdminLevel] < 1 )
			            	{
			            	    format(string, sizeof(string), "WARNING: %s may possibly be money-farming, they've given $%s to %s (w/ 0 playing hours)", GetName(playerid), IntToFormattedStr(amount), GetName(id));
			            	    SendToAdmins(ADMINORANGE, string, 0);
			            	}
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You're trying to give too much.");
			            }
		            }
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You don't have that much money.");
	        }
	    }
	}
	return 1;
}

command(hlistweapons, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][House] >= 1)
	{
	    switch(Houses[Player[playerid][House]][WeaponSlot1])
		{
		    case 0:
			{
				SendClientMessage(playerid, WHITE, "Slot 1: Empty.");
			}
			default:
			{
		        new WeaponName[128];
		        GetWeaponName(Houses[Player[playerid][House]][WeaponSlot1], WeaponName, sizeof(WeaponName));
		    	format(string, sizeof(string), "Slot 1: %s", WeaponName);
		    	SendClientMessage(playerid, WHITE, string);
	    	}
	    }
	    
	    switch(Houses[Player[playerid][House]][WeaponSlot2])
		{
		    case 0:
			{
				SendClientMessage(playerid, WHITE, "Slot 2: Empty.");
			}
			default:
			{
		        new WeaponName[128];
		        GetWeaponName(Houses[Player[playerid][House]][WeaponSlot2], WeaponName, sizeof(WeaponName));
		    	format(string, sizeof(string), "Slot 2: %s", WeaponName);
		    	SendClientMessage(playerid, WHITE, string);
	    	}
	    }
	    
	    switch(Houses[Player[playerid][House]][WeaponSlot3])
		{
		    case 0:
			{
				SendClientMessage(playerid, WHITE, "Slot 3: Empty.");
			}
			default:
			{
		        new WeaponName[128];
		        GetWeaponName(Houses[Player[playerid][House]][WeaponSlot3], WeaponName, sizeof(WeaponName));
		    	format(string, sizeof(string), "Slot 3: %s", WeaponName);
		    	SendClientMessage(playerid, WHITE, string);
	    	}
	    }
	}
	return 1;
}

command(hgetweapon, playerid, params[])
{
	new string[128], slot, name[128];
	if(sscanf(params, "d", slot))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /hgetweapon [slot (1-3)]");
	}
	else
	{
	    if(Player[playerid][House] == Player[playerid][InHouse] && Player[playerid][House] != 0)
	    {
		    switch(slot)
		    {
		        case 1:
		        {
		            if(Houses[Player[playerid][House]][WeaponSlot1] >= 1)
		            {
		                GivePlayerWeaponEx(playerid, Houses[Player[playerid][House]][WeaponSlot1]);
		                GetWeaponName(Houses[Player[playerid][House]][WeaponSlot3], name, sizeof(name));
						format(string, sizeof(string), "You have withdrawn your %s from Slot 1.", name);
						SendClientMessage(playerid, WHITE, string);
						Houses[Player[playerid][House]][WeaponSlot1] = 0;
						SaveHouse(Player[playerid][House]);
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "This slot is unoccupied.");
		            }
		        }
		        case 2:
		        {
		            if(Houses[Player[playerid][House]][WeaponSlot2] >= 1)
		            {
		                GivePlayerWeaponEx(playerid, Houses[Player[playerid][House]][WeaponSlot2]);
		                GetWeaponName(Houses[Player[playerid][House]][WeaponSlot3], name, sizeof(name));
						format(string, sizeof(string), "You have withdrawn your %s from Slot 2.", name);
						SendClientMessage(playerid, WHITE, string);
						Houses[Player[playerid][House]][WeaponSlot2] = 0;
						SaveHouse(Player[playerid][House]);
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "This slot is unoccupied.");
		            }
		        }
		        case 3:
		        {
		            if(Houses[Player[playerid][House]][WeaponSlot3] >= 1)
		            {
		                GivePlayerWeaponEx(playerid, Houses[Player[playerid][House]][WeaponSlot3]);
		                GetWeaponName(Houses[Player[playerid][House]][WeaponSlot3], name, sizeof(name));
						format(string, sizeof(string), "You have withdrawn your %s from Slot 3.", name);
						SendClientMessage(playerid, WHITE, string);
						Houses[Player[playerid][House]][WeaponSlot3] = 0;
						SaveHouse(Player[playerid][House]);
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "This slot is unoccupied.");
		            }
		        }
				default:
				{
				    SendClientMessage(playerid, WHITE, "SYNTAX: /hgetweapon [slot (1-3)]");
				}
		    }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You must be inside your house.");
	    }
	}
	return 1;
}

command(hstoreweapon, playerid, params[])
{
	new slot, WeaponName[128];
	if(sscanf(params, "dz", slot, WeaponName))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /hstoreweapon [slot (1-3)] [weapon]");
		SendClientMessage(playerid, WHITE, "Weapons: SilencedPistol, AK47, PumpActionShotgun, MP5, SniperRifle, DesertEagle, M4, CombatShotgun");
		SendClientMessage(playerid, WHITE, "Weapons: Colt45, MicroSMG");
	}
	else
	{
	    if(Player[playerid][House] == Player[playerid][InHouse] && Player[playerid][House] != 0)
	    {
			if(slot >= 1 && slot < 4)
			{
			    if(slot == 1 && Houses[Player[playerid][House]][WeaponSlot1] != 0 || slot == 2 && Houses[Player[playerid][House]][WeaponSlot2] != 0 || slot == 3 && Houses[Player[playerid][House]][WeaponSlot3] != 0)
			    {
			        SendClientMessage(playerid, WHITE, "You already have stored a weapon in this slot. Please withdraw it first.");
			    }
			    else
			    {
		         	if(strcmp(WeaponName, "SilencedPistol", true) == 0)
			        {
			            if(Player[playerid][WepSlot2] == 23)
			            {
			                switch(slot)
			                {
			                    case 1:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot1] = 23;
			                        Player[playerid][WepSlot2] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Silenced Pistol in your house safe (in slot 1).");
	                                SaveHouse(Player[playerid][InHouse]);
								}
			                    case 2:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot2] = 23;
			                        Player[playerid][WepSlot2] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Silenced Pistol in your house safe (in slot 2).");
	                                SaveHouse(Player[playerid][InHouse]);
								}
			                    case 3:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot3] = 23;
			                        Player[playerid][WepSlot2] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Silenced Pistol in your house safe (in slot 3).");
	                                SaveHouse(Player[playerid][InHouse]);
								}
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have this weapon on you.");
			            }
			        }

		         	else if(strcmp(WeaponName, "Colt45", true) == 0)
			        {
			            if(Player[playerid][WepSlot2] == 22)
			            {
			                switch(slot)
			                {
			                    case 1:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot1] = 22;
			                        Player[playerid][WepSlot2] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Colt45 in your house safe (in slot 1).");
	                                SaveHouse(Player[playerid][House]);
								}
			                    case 2:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot2] = 22;
			                        Player[playerid][WepSlot2] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Colt45 in your house safe (in slot 2).");
	                                SaveHouse(Player[playerid][House]);
								}
			                    case 3:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot3] = 22;
			                        Player[playerid][WepSlot2] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Colt45 in your house safe (in slot 3).");
	                                SaveHouse(Player[playerid][House]);
								}
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have this weapon on you.");
			            }
			        }
			        
		         	else if(strcmp(WeaponName, "MicroSMG", true) == 0)
			        {
			            if(Player[playerid][WepSlot4] == 28)
			            {
			                switch(slot)
			                {
			                    case 1:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot1] = 28;
			                        Player[playerid][WepSlot4] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a MicroSMG in your house safe (in slot 1).");
	                                SaveHouse(Player[playerid][House]);
								}
			                    case 2:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot2] = 28;
			                        Player[playerid][WepSlot4] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a MicroSMG in your house safe (in slot 2).");
	                                SaveHouse(Player[playerid][House]);
								}
			                    case 3:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot3] = 28;
			                        Player[playerid][WepSlot4] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a MicroSMG in your house safe (in slot 3).");
	                                SaveHouse(Player[playerid][House]);
								}
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have this weapon on you.");
			            }
			        }

		         	else if(strcmp(WeaponName, "AK47", true) == 0)
			        {
			            if(Player[playerid][WepSlot5] == 30)
			            {
			                switch(slot)
			                {
			                    case 1:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot1] = 30;
			                        Player[playerid][WepSlot5] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an AK-47 in your house safe (in slot 1).");
	                                SaveHouse(Player[playerid][InHouse]);
								}
			                    case 2:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot2] = 30;
			                        Player[playerid][WepSlot5] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an AK-47 in your house safe (in slot 2).");
	                                SaveHouse(Player[playerid][InHouse]);
								}
			                    case 3:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot3] = 30;
			                        Player[playerid][WepSlot5] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an AK-47 in your house safe (in slot 3).");
	                                SaveHouse(Player[playerid][InHouse]);
								}
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have this weapon on you.");
			            }
			        }

		         	else if(strcmp(WeaponName, "SniperRifle", true) == 0)
			        {
			            if(Player[playerid][WepSlot6] == 34)
			            {
			                switch(slot)
			                {
			                    case 1:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot1] = 34;
			                        Player[playerid][WepSlot6] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an Sniper Rifle in your house safe (in slot 1).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 2:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot2] = 34;
			                        Player[playerid][WepSlot6] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an Sniper Rifle in your house safe (in slot 2).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 3:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot3] = 34;
			                        Player[playerid][WepSlot6] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an Sniper Rifle in your house safe (in slot 3).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have this weapon on you.");
			            }
			        }
		         	else if(strcmp(WeaponName, "M4", true) == 0)
			        {
			            if(Player[playerid][WepSlot5] == 31)
			            {
			                switch(slot)
			                {
			                    case 1:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot1] = 31;
			                        Player[playerid][WepSlot5] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an M4 in your house safe (in slot 1).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 2:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot2] = 31;
			                        Player[playerid][WepSlot5] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an M4 in your house safe (in slot 2).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 3:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot3] = 31;
			                        Player[playerid][WepSlot5] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an M4 in your house safe (in slot 3).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have this weapon on you.");
			            }
			        }
		         	else if(strcmp(WeaponName, "MP5", true) == 0)
			        {
			            if(Player[playerid][WepSlot4] == 29)
			            {
			                switch(slot)
			                {
			                    case 1:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot1] = 29;
			                        Player[playerid][WepSlot4] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an MP5 in your house safe (in slot 1).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 2:
			                    {
		                        	Houses[Player[playerid][House]][WeaponSlot2] = 29;
			                        Player[playerid][WepSlot4] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an MP5 in your house safe (in slot 2).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 3:
			                    {
		                        	Houses[Player[playerid][House]][WeaponSlot3] = 29;
			                        Player[playerid][WepSlot4] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored an MP5 in your house safe (in slot 3).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have this weapon on you.");
			            }
			        }
		         	else if(strcmp(WeaponName, "DesertEagle", true) == 0)
			        {
			            if(Player[playerid][WepSlot2] == 24)
			            {
			                switch(slot)
			                {
			                    case 1:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot1] = 24;
			                        Player[playerid][WepSlot2] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Desert Eagle in your house safe (in slot 1).");
	                                SaveHouse(Player[playerid][InHouse]);
								}
			                    case 2:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot2] = 24;
			                        Player[playerid][WepSlot2] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Desert Eagle in your house safe (in slot 2).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 3:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot3] = 24;
			                        Player[playerid][WepSlot2] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Desert Eagle in your house safe (in slot 3).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have this weapon on you.");
			            }
			        }
		         	else if(strcmp(WeaponName, "PumpActionShotgun", true) == 0)
			        {
			            if(Player[playerid][WepSlot3] == 25)
			            {
			                switch(slot)
			                {
			                    case 1:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot1] = 25;
			                        Player[playerid][WepSlot3] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Pump Action Combat Shotgun in your house safe (in slot 1).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 2:
			                    {
	                                Houses[Player[playerid][House]][WeaponSlot2] = 25;
			                        Player[playerid][WepSlot3] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Pump Action Combat Shotgun in your house safe (in slot 2).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 3:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot3] = 25;
			                        Player[playerid][WepSlot3] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Pump Action Shotgun in your house safe (in slot 3).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have this weapon on you.");
			            }
			        }
		         	else if(strcmp(WeaponName, "CombatShotgun", true) == 0)
			        {
			            if(Player[playerid][WepSlot3] == 27)
			            {
			                switch(slot)
			                {
			                    case 1:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot1] = 27;
			                        Player[playerid][WepSlot3] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Combat Shotgun in your house safe (in slot 1).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 2:
			                    {
	                                Houses[Player[playerid][House]][WeaponSlot2] = 27;
			                        Player[playerid][WepSlot3] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Combat Shotgun in your house safe (in slot 2).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                    case 3:
			                    {
			                        Houses[Player[playerid][House]][WeaponSlot3] = 27;
			                        Player[playerid][WepSlot3] = 0;
			                        ResetPlayerWeapons(playerid);
			                        GivePlayerSavedWeapons(playerid);
			                        SendClientMessage(playerid, WHITE, "You have stored a Combat Shotgun in your house safe (in slot 3).");
			                        SaveHouse(Player[playerid][InHouse]);
			                    }
			                }
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You don't have this weapon on you.");
			            }
			        }
		        }
		    }
		}
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You must be inside your house.");
	    }
	}
	return 1;
}

command(setweather, playerid, params[])
{
	new weatherid;
	if(sscanf(params, "d", weatherid))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
		    SendClientMessage(playerid, WHITE, "USAGE: /setweather [weatherid]");
	    }
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
		    if(weatherid >= 1 && weatherid < 46)
		    {
		        SetWeather(weatherid);
		        GlobalWeather = weatherid;
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Invalid weather ID - must be between 1 and 45.");
		    }
	    }
	}
	return 1;
}

command(giveweapon, playerid, params[])
{
	new string[128], id, WeaponName[128];
	if(sscanf(params, "uz", id, WeaponName))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /giveweapon [playerid] [usage]");
		SendClientMessage(playerid, WHITE, "Usages: SilencedPistol, AK47, PumpActionShotgun, MP5, SniperRifle, DesertEagle, M4, CombatShotgun");
		SendClientMessage(playerid, WHITE, "Usages: Colt45, BaseballBat, Katana, MicroSMG");
	}
	else
	{
		if(IsPlayerConnectedEx(id))
		{
	   	    if(GetDistanceBetweenPlayers(id, playerid) < 7 && !IsPlayerInAnyVehicle(playerid))
    	    {
	            if(strcmp(WeaponName, "silencedpistol", true) == 0)
	            {
	                if(Player[playerid][WepSlot2] == 23)
	                {
	                    SetPlayerArmedWeapon(playerid, 0);
	                    ResetPlayerWeapons(playerid);
	                    Player[playerid][WepSlot2] = 0;
                     	GivePlayerSavedWeapons(playerid);
	                    Player[id][WepSlot2] = 23;
                     	ResetPlayerWeapons(id);
                     	GivePlayerSavedWeapons(id);
	                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
	                    SendClientMessage(playerid, WHITE, string);
	                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
	                    SendClientMessage(id, WHITE, string);
	                }
	            }
	            
	            else if(strcmp(WeaponName, "MicroSMG", true) == 0)
	            {
	                if(Player[playerid][WepSlot4] == 28)
	                {
	                    SetPlayerArmedWeapon(playerid, 0);
	                    ResetPlayerWeapons(playerid);
	                    Player[playerid][WepSlot4] = 0;
	                    GivePlayerSavedWeapons(playerid);
	                    Player[id][WepSlot4] = 28;
	                    ResetPlayerWeapons(id);
	                    GivePlayerSavedWeapons(id);
	                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
	                    SendClientMessage(playerid, WHITE, string);
	                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
	                    SendClientMessage(id, WHITE, string);
	                }
	            }

	            else if(strcmp(WeaponName, "Katana", true) == 0)
	            {
	                if(Player[playerid][WepSlot1] == 8)
	                {
	                    SetPlayerArmedWeapon(playerid, 0);
	                    ResetPlayerWeapons(playerid);
	                    Player[playerid][WepSlot1] = 0;
	                    GivePlayerSavedWeapons(playerid);
	                    Player[id][WepSlot1] = 8;
	                    ResetPlayerWeapons(id);
	                    GivePlayerSavedWeapons(id);
	                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
	                    SendClientMessage(playerid, WHITE, string);
	                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
	                    SendClientMessage(id, WHITE, string);
	                }
	            }

	            else if(strcmp(WeaponName, "baseballbat", true) == 0)
	            {
	                if(Player[playerid][WepSlot1] == 5)
	                {
	                    SetPlayerArmedWeapon(playerid, 0);
	                    ResetPlayerWeapons(playerid);
	                    Player[playerid][WepSlot1] = 0;
	                    GivePlayerSavedWeapons(playerid);
	                    Player[id][WepSlot1] = 5;
	                    ResetPlayerWeapons(id);
	                    GivePlayerSavedWeapons(id);
	                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
	                    SendClientMessage(playerid, WHITE, string);
	                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
	                    SendClientMessage(id, WHITE, string);
	                }
	            }

	            else if(strcmp(WeaponName, "baseballbat", true) == 0)
	            {
	                if(Player[playerid][WepSlot1] == 5)
	                {
	                    SetPlayerArmedWeapon(playerid, 0);
	                    ResetPlayerWeapons(playerid);
	                    Player[playerid][WepSlot1] = 0;
	                    GivePlayerSavedWeapons(playerid);
	                    Player[id][WepSlot1] = 5;
	                    ResetPlayerWeapons(id);
	                    GivePlayerSavedWeapons(id);
	                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
	                    SendClientMessage(playerid, WHITE, string);
	                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
	                    SendClientMessage(id, WHITE, string);
	                }
	            }

	            else if(strcmp(WeaponName, "sniperrifle", true) == 0)
	            {
	                if(Player[playerid][WepSlot6] == 34)
	                {
	                    SetPlayerArmedWeapon(playerid, 0);
	                    ResetPlayerWeapons(playerid);
	                    Player[playerid][WepSlot6] = 0;
	                    GivePlayerSavedWeapons(playerid);
	                    Player[id][WepSlot6] = 34;
	                    ResetPlayerWeapons(id);
	                    GivePlayerSavedWeapons(id);
	                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
	                    SendClientMessage(playerid, WHITE, string);
	                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
	                    SendClientMessage(id, WHITE, string);
	                }
	            }

	            else if(strcmp(WeaponName, "Colt45", true) == 0)
	            {
	                if(Player[playerid][WepSlot2] == 22)
	                {
	                    SetPlayerArmedWeapon(playerid, 0);
	                    ResetPlayerWeapons(playerid);
	                    Player[playerid][WepSlot2] = 0;
	                    GivePlayerSavedWeapons(playerid);
	                    Player[id][WepSlot2] = 22;
	                    ResetPlayerWeapons(id);
	                    GivePlayerSavedWeapons(id);
	                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
	                    SendClientMessage(playerid, WHITE, string);
	                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
	                    SendClientMessage(id, WHITE, string);
	                }
	            }

	            else if(strcmp(WeaponName, "ak47", true) == 0)
	            {
	                if(Player[playerid][WepSlot5] == 30)
	                {
	                    SetPlayerArmedWeapon(playerid, 0);
	                    ResetPlayerWeapons(playerid);
	                    Player[playerid][WepSlot5] = 0;
	                    GivePlayerSavedWeapons(playerid);
	                    Player[id][WepSlot5] = 30;
	                    ResetPlayerWeapons(id);
	                    GivePlayerSavedWeapons(id);
	                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
	                    SendClientMessage(playerid, WHITE, string);
	                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
	                    SendClientMessage(id, WHITE, string);
	                }
	            }

	            else if(strcmp(WeaponName, "pumpactionshotgun", true) == 0)
	            {
	                if(Player[playerid][WepSlot3] == 25)
	                {
	                    SetPlayerArmedWeapon(playerid, 0);
	                    ResetPlayerWeapons(playerid);
	                    Player[playerid][WepSlot3] = 0;
	                    GivePlayerSavedWeapons(playerid);
	                    Player[id][WepSlot3] = 25;
	                    ResetPlayerWeapons(id);
	                    GivePlayerSavedWeapons(id);
	                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
	                    SendClientMessage(playerid, WHITE, string);
	                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
	                    SendClientMessage(id, WHITE, string);
	                }
	            }

	            else if(strcmp(WeaponName, "mp5", true) == 0)
	            {
	                if(Player[playerid][WepSlot4] == 29)
	                {
	                    SetPlayerArmedWeapon(playerid, 0);
	                    ResetPlayerWeapons(playerid);
	                    Player[playerid][WepSlot4] = 0;
	                    GivePlayerSavedWeapons(playerid);
	                    Player[id][WepSlot4] = 29;
	                    ResetPlayerWeapons(id);
	                    GivePlayerSavedWeapons(id);
	                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
	                    SendClientMessage(playerid, WHITE, string);
	                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
	                    SendClientMessage(id, WHITE, string);
	                }
	            }

	            else if(strcmp(WeaponName, "deserteagle", true) == 0)
	            {
	                if(Player[playerid][WepSlot2] == 24)
	                {
	                    SetPlayerArmedWeapon(playerid, 0);
	                    ResetPlayerWeapons(playerid);
	                    Player[playerid][WepSlot2] = 0;
	                    GivePlayerSavedWeapons(playerid);
	                    Player[id][WepSlot2] = 24;
	                    ResetPlayerWeapons(id);
	                    GivePlayerSavedWeapons(id);
	                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
	                    SendClientMessage(playerid, WHITE, string);
	                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
	                    SendClientMessage(id, WHITE, string);
	                }
	            }

	            else if(strcmp(WeaponName, "m4", true) == 0)
	            {
	                if(Player[playerid][WepSlot5] == 31)
	                {
	                    SetPlayerArmedWeapon(playerid, 0);
	                    ResetPlayerWeapons(playerid);
	                    Player[playerid][WepSlot5] = 0;
	                    GivePlayerSavedWeapons(playerid);
	                    Player[id][WepSlot5] = 31;
	                    ResetPlayerWeapons(id);
	                    GivePlayerSavedWeapons(id);
	                    SetPlayerArmedWeapon(id, 0);
	                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
	                    SendClientMessage(playerid, WHITE, string);
	                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
	                    SendClientMessage(id, WHITE, string);
	                }
	            }

	            else if(strcmp(WeaponName, "combatshotgun", true) == 0)
	            {
	                if(Player[playerid][WepSlot3] == 27)
	                {
	                    SetPlayerArmedWeapon(playerid, 0);
						ResetPlayerWeapons(playerid);
	                    Player[playerid][WepSlot3] = 0;
	                    GivePlayerSavedWeapons(playerid);
	                    Player[id][WepSlot3] = 27;
	                    GivePlayerSavedWeapons(id);
	                    format(string, sizeof(string), "You have given %s a %s.", GetName(id), WeaponName);
	                    SendClientMessage(playerid, WHITE, string);
	                    format(string, sizeof(string), "You have been given weapon %s, by %s.", WeaponName, GetName(playerid));
	                    SendClientMessage(id, WHITE, string);
	                }
	            }
	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, WHITE, "You're too far away or in a vehicle.");
	    	}
	    }
	}
	return 1;
}

command(asellbusiness, playerid, params[])
{
	new string[128], id;
	if(sscanf(params, "d", id))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /asellbusiness [Business ID]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
		    format(string, sizeof(string), "Businesses/Business_%d.ini", id);

		    if(fexist(string))
		    {
		        format(string, sizeof(string), "Accounts/%s.ini", Businesses[id][bOwner]);
		        if(fexist(string))
		        {
					dini_IntSet(string, "Business", 0);
		        }
		        
		        format(Businesses[id][bOwner], 128, "Nobody");
		        SaveBusiness(id);
		        
		        format(string, sizeof(string), "You have sold business %d.", id);
		        SendClientMessage(playerid, WHITE, string);
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Invalid business ID!");
		    }
		}
	}
	return 1;
}

command(asellhouse, playerid, params[])
{
	new string[128], id;
	if(sscanf(params, "d", id))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /asellhouse [house ID]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
		    format(string, sizeof(string), "Houses/House_%d.ini", id);
		    
		    if(fexist(string))
		    {
		        format(string, sizeof(string), "Accounts/%s.ini", Houses[id][hOwner]);
		        if(fexist(string))
		        {
					dini_IntSet(string, "House", 0);
		        }
		        
		        format(Houses[id][hOwner], 128, "Nobody");
		        format(string, sizeof(string), "You have sold house %d.", id);
		        SendClientMessage(playerid, WHITE, string);
		        SaveHouse(id);
			    DestroyDynamicPickup(Houses[id][HPickupID]);
				Houses[id][HPickupID] = CreateDynamicPickup(1273, 23, Houses[id][hExteriorX], Houses[id][hExteriorY], Houses[id][hExteriorZ], 0, -1, -1, 150.0);

		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Invalid house ID!");
		    }
		}
	}
	return 1;
}

command(banip, playerid, params[])
{
	new string[128], PlayersIP[21];
	if(sscanf(params, "z", PlayersIP))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /banip [IP]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
		    if(strlen(PlayersIP) >= 5)
		    {
		    	format(string, sizeof(string), "banip %s", PlayersIP);
		    	SendRconCommand(string);
		    	SendClientMessage(playerid, WHITE, "IP banned.");
		    	format(string, sizeof(string), "WARNING: %s has banned IP %s.", GetName(playerid), PlayersIP);
		    	SendToAdmins(ADMINORANGE, string, 0);

				new hour, minute, second, day, year, month, string2[128];
			    gettime(hour, minute, second);
			    getdate(year, month, day);
				format(string2, sizeof(string2), "%d/%d/%d | %d:%d | %s | %s (IP banned)", day, month, year, hour, minute, PlayersIP, GetName(playerid));
				BanLog(string2);
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Invalid IP.");
		    }
		}
	}
	return 1;
}

command(unbanip, playerid, params[])
{
	new string[128], PlayersIP[21];
	if(sscanf(params, "z", PlayersIP))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /unbanip [IP]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
		    if(strlen(PlayersIP) >= 5)
		    {
		    	format(string, sizeof(string), "unbanip %s", PlayersIP);
		    	SendRconCommand(string);
		    	format(string, sizeof(string), "WARNING: %s has un-banned IP %s.", GetName(playerid), PlayersIP);
		    	SendToAdmins(ADMINORANGE, string, 0);
		    	SendRconCommand("reloadbans");

				new hour, minute, second, day, year, month, string2[128];
			    gettime(hour, minute, second);
			    getdate(year, month, day);
				format(string2, sizeof(string2), "%d/%d/%d | %d:%d | %s | %s (IP unbanned)", day, month, year, hour, minute, PlayersIP, GetName(playerid));
				UnbanLog(string2);
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Invalid IP.");
		    }
		}
	}
	return 1;
}

command(a, playerid, params[])
{
	new Message[128], string[128];
	if(sscanf(params, "z", Message))
	{
		if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /a [message]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 1)
		{
		    format(string, sizeof(string), "[Admin Chat] %s (%d): %s", Player[playerid][AdminName], Player[playerid][AdminLevel], Message);
	    	SendToAdmins(YELLOW, string, 0);
		}
	}
	return 1;
}

command(calculate, playerid, params[])
{
	new Value1, Method[20], Value2, string[128];
	if(sscanf(params, "ddz", Value1, Value2, Method))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /calculate [value] [value] [method]");
		SendClientMessage(playerid, GREY, "Method: Add, Subtract, Multiply & Divide.");
	}
	else
	{
		if(strcmp(Method, "multiply", true) == 0)
		{
			new Sum = Value1*Value2;
	    	format(string, sizeof(string), "%d X (multiplied) %d = %d.", Value1, Value2, Sum);
	    	SendClientMessage(playerid, WHITE, string);
		}
		else if(strcmp(Method, "subtract", true) == 0)
		{
			new Sum = Value1-Value2;
	  	  	format(string, sizeof(string), "%d - (subtract) %d = %d.", Value1, Value2, Sum);
	    	SendClientMessage(playerid, WHITE, string);
		}
		else if(strcmp(Method, "divide", true) == 0)
		{
			new Sum = Value1/Value2;
	    	format(string, sizeof(string), "%d / (divide) %d = %d.", Value1, Value2, Sum);
	    	SendClientMessage(playerid, WHITE, string);
		}
		else if(strcmp(Method, "add", true) == 0)
		{
			new Sum = Value1+Value2;
		    format(string, sizeof(string), "%d + (add) %d = %d.", Value1, Value2, Sum);
		    SendClientMessage(playerid, WHITE, string);
		}
	}
	return 1;
}

command(agotobusiness, playerid, params[])
{
	new number, string[128];
	if(sscanf(params, "d", number))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /agotobusiness [business ID]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
		    format(string, sizeof(string), "Businesses/Business_%d.ini", number);

		    if(fexist(string))
		    {
		        SetPlayerInterior(playerid, Businesses[number][bExteriorID]);
		        SetPlayerVirtualWorld(playerid, 0);
		        SetPlayerPos(playerid, Businesses[number][bExteriorX],Businesses[number][bExteriorY], Businesses[number][bExteriorZ]);
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Invalid business ID!");
		    }
	    }
	}
	return 1;
}

command(fine, playerid, params[])
{
	new id, amount, Reason[128], string[128];
	if(sscanf(params, "udz", id, amount, Reason))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /fine [playerid] [amount] [reason]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
		    if(strlen(Reason) < 1)
		    {
		        SendClientMessage(playerid, WHITE, "SYNTAX: /fine [playerid] [amount] [reason]");
		    }
		    else
		    {
		        if(Player[id][AdminLevel] < Player[playerid][AdminLevel])
		        {
			        if(amount < 99999999 && amount >= 1)
			        {
				    	format(string, sizeof(string), "Fine: %s has been fined $%s by %s, defined reason: %s", GetName(id), IntToFormattedStr(amount), Player[playerid][AdminName], Reason);
				    	SendClientMessageToAll(LIGHTRED, string);
				    	Player[id][Money] -= amount;

				        if(Player[id][AdminLevel] < 1)
				        {
				        	Player[playerid][AdminActions]++;
				        	AdminActionsLog(string);
			            	SendClientMessage(playerid, WHITE, "You have earned an admin action!");
				        }
			    	}
		    	}
		    }
		}
	}
	return 1;
}

command(toggleooc, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][AdminLevel] >= 2)
	{
		if(oocenabled == 0)
		{
		    format(string, sizeof(string), "%s has enabled the OOC channel.", GetName(playerid));
	    	oocenabled = 1;
	    	SendClientMessageToAll(LIGHTRED, string);
		}
		else if(oocenabled == 1)
		{
		    format(string, sizeof(string), "%s has disabled the OOC channel.", GetName(playerid));
	    	oocenabled = 0;
	    	SendClientMessageToAll(LIGHTRED, string);
		}
	}
	return 1;
}

command(ooc, playerid, params[])
{
	new Message[128], string[128];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /o(oc) [message]");
	}
	else
	{
	    if(Player[playerid][oMuted] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "You have been muted from the global OOC channel by an administrator.");
	    }
	    else
	    {
			if(Player[playerid][AdminDuty] >= 1)
			{
			    format(string, sizeof(string), "((Server Admin %s: %s)) ", GetName(playerid), Message);
			    SendClientMessageToAll(OOC_CHAT, string);
			}
			else if(oocenabled == 1 && Player[playerid][Authenticated] >= 1)
			{
			    if(Player[playerid][VipRank] >= 1)
			    {
			        format(string, sizeof(string), "((VIP %s: %s)) ", GetName(playerid), Message);
			    	for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
						{
					   		SendClientMessage(i, OOC_CHAT, string);
						}
					}

					OOCChatLog(string);
			    }
			    else
			    {
				    if(Player[playerid][PlayingHours] < 1)
				    {
						format(string, sizeof(string), "((%s %s: %s))", OOCRanks[Rank1], GetName(playerid), Message);
			    		for(new i = 0; i < MAX_PLAYERS; i++)
					    {
					        if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
					        {
					            SendClientMessage(i, OOC_CHAT, string);
					        }
					    }
					}
				    else if(Player[playerid][PlayingHours] >= 1 && Player[playerid][PlayingHours] < 25)
				    {
						format(string, sizeof(string), "((%s %s: %s))", OOCRanks[Rank2], GetName(playerid), Message);
			    		for(new i = 0; i < MAX_PLAYERS; i++)
					    {
					        if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
					        {
					            SendClientMessage(i, OOC_CHAT, string);
					        }
					    }
					}
				    else if(Player[playerid][PlayingHours] >= 25 && Player[playerid][PlayingHours] < 100)
				    {
						format(string, sizeof(string), "((%s %s: %s))", OOCRanks[Rank3], GetName(playerid), Message);
			    		for(new i = 0; i < MAX_PLAYERS; i++)
					    {
					        if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
					        {
					            SendClientMessage(i, OOC_CHAT, string);
					        }
					    }
					}
				    else if(Player[playerid][PlayingHours] >= 100 && Player[playerid][PlayingHours] < 300)
				    {
						format(string, sizeof(string), "((%s %s: %s))", OOCRanks[Rank4], GetName(playerid), Message);
			    		for(new i = 0; i < MAX_PLAYERS; i++)
					    {
					        if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
					        {
					            SendClientMessage(i, OOC_CHAT, string);
					        }
					    }
				    }
				    else if(Player[playerid][PlayingHours] >= 300)
				    {
						format(string, sizeof(string), "((%s %s: %s))", OOCRanks[Rank5], GetName(playerid), Message);
					    for(new i = 0; i < MAX_PLAYERS; i++)
					    {
					        if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
					        {
					            SendClientMessage(i, OOC_CHAT, string);
					        }
					    }
					}

				    OOCChatLog(string);
			    }
			}
			else if(oocenabled == 0)
			{
			    SendClientMessage(playerid, WHITE, "OOC channel is currently disabled.");
			}
		}
	}
	return 1;
}

command(acceptreport, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /acceptreport [playerid]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
	        if(IsPlayerConnectedEx(id) &&  Player[id][ActiveReport] == 1)
	        {
	            format(string, sizeof(string), "You have taken %s's report.", GetName(id));
	            SendClientMessage(playerid, WHITE, string);
	            
	            format(string, sizeof(string), "REPORT TEXT: %s", Player[id][ReportText]);
	            SendClientMessage(playerid, GREY, string);
	            
	            format(string, sizeof(string), "Admin %s has taken your report. Please note this could take a while to resolve!", GetName(playerid));
	            SendClientMessage(id, ADMINORANGE, string);
	            
	            format(string, sizeof(string), "REPORTS: %s has taken %s's report.", GetName(playerid), GetName(id));
	            SendToAdmins(ADMINORANGE, string, 1);
	            
	            Player[id][ActiveReport] = 0;

	            if(Player[id][AdminLevel] < 1)
	            {
	                Player[playerid][AdminActions]++;
	                SendClientMessage(playerid, WHITE, "You have earned an admin action!");
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "There are no active reports from that player.");
	        }
	    }
	}
	return 1;
}

command(o, playerid, params[])
{
	new Message[128], string[128];
	if(sscanf(params, "z", Message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /o(oc) [message]");
	}
	else
	{
	    if(Player[playerid][oMuted] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "You have been muted from the global OOC channel by an administrator.");
	    }
	    else
	    {
			if(Player[playerid][AdminDuty] >= 1)
			{
			    format(string, sizeof(string), "((Server Admin %s: %s)) ", GetName(playerid), Message);
			    SendClientMessageToAll(OOC_CHAT, string);
			}
			else if(oocenabled == 1 && Player[playerid][Authenticated] >= 1)
			{
			    if(Player[playerid][VipRank] >= 1)
			    {
			        format(string, sizeof(string), "((VIP %s: %s)) ", GetName(playerid), Message);
			    	for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
						{
					   		SendClientMessage(i, OOC_CHAT, string);
						}
					}

					OOCChatLog(string);
			    }
			    else
			    {
				    if(Player[playerid][PlayingHours] < 1)
				    {
						format(string, sizeof(string), "((%s %s: %s))", OOCRanks[Rank1], GetName(playerid), Message);
			    		for(new i = 0; i < MAX_PLAYERS; i++)
					    {
					        if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
					        {
					            SendClientMessage(i, OOC_CHAT, string);
					        }
					    }
					}
				    else if(Player[playerid][PlayingHours] >= 1 && Player[playerid][PlayingHours] < 25)
				    {
						format(string, sizeof(string), "((%s %s: %s))", OOCRanks[Rank2], GetName(playerid), Message);
			    		for(new i = 0; i < MAX_PLAYERS; i++)
					    {
					        if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
					        {
					            SendClientMessage(i, OOC_CHAT, string);
					        }
					    }
					}
				    else if(Player[playerid][PlayingHours] >= 25 && Player[playerid][PlayingHours] < 100)
				    {
						format(string, sizeof(string), "((%s %s: %s))", OOCRanks[Rank3], GetName(playerid), Message);
			    		for(new i = 0; i < MAX_PLAYERS; i++)
					    {
					        if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
					        {
					            SendClientMessage(i, OOC_CHAT, string);
					        }
					    }
					}
				    else if(Player[playerid][PlayingHours] >= 100 && Player[playerid][PlayingHours] < 300)
				    {
						format(string, sizeof(string), "((%s %s: %s))", OOCRanks[Rank4], GetName(playerid), Message);
			    		for(new i = 0; i < MAX_PLAYERS; i++)
					    {
					        if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
					        {
					            SendClientMessage(i, OOC_CHAT, string);
					        }
					    }
				    }
				    else if(Player[playerid][PlayingHours] >= 300)
				    {
						format(string, sizeof(string), "((%s %s: %s))", OOCRanks[Rank5], GetName(playerid), Message);
					    for(new i = 0; i < MAX_PLAYERS; i++)
					    {
					        if(IsPlayerConnectedEx(i) && Player[i][ToggedOOC] == 0)
					        {
					            SendClientMessage(i, OOC_CHAT, string);
					        }
					    }
					}

				    OOCChatLog(string);
			    }
			}
			else if(oocenabled == 0)
			{
			    SendClientMessage(playerid, WHITE, "OOC channel is currently disabled.");
			}
		}
	}
	return 1;
}

command(reports, playerid, params[])
{
	#pragma unused params
	
	if(Player[playerid][AdminLevel] >= 1)
	{
		new string[128], Count;
		
		SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
		SendClientMessage(playerid, WHITE, "Please use /acceptreport [playerid] to remove it from the list.");

		for(new i = 0; i < MAX_PLAYERS; i++)
		{
		    if(IsPlayerConnectedEx(i) && Player[i][ActiveReport] == 1)
		    {
		        Count++;
		        format(string, sizeof(string), "REPORTER: %s (%d) | REPORT: %s", GetName(i), i, Player[i][ReportText]);
		        SendClientMessage(playerid, GREY, string);
		    }
		}
		
		format(string, sizeof(string), "There are %d active reports!", Count);
		SendClientMessage(playerid, GREY, string);

		SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
	}
	
	return 1;
}

command(harvest, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Checkpoint] >= 1)
	{
	    SendClientMessage(playerid, WHITE, "You already have an active checkpoint. Please reach it, or re-connect.");
	}
	else
	{
	    if(Jobs[Player[playerid][Job]][JobType] == 6)
	    {
	        SetPlayerCheckpoint(playerid, Harvest1X, Harvest1Y, Harvest1Z, 10.0);
	    	Player[playerid][Checkpoint] = 1;
	    	Player[playerid][Harvesting] = 1;
	    	SendClientMessage(playerid, WHITE, "There will be 5 checkpoints in total, please reach the first in order to harvest the drugs.");
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You're not a Smuggler.");
	    }
	}
	return 1;
}

command(door, playerid, params[])
{
	new string[128];
	if(Groups[Player[playerid][Group]][CommandTypes] == 1 || Groups[Player[playerid][Group]][CommandTypes] == 4)
	{
		GetPlayerPos(playerid, Positions[0][0], Positions[0][1], Positions[0][2]);
        GetDynamicObjectPos(LSPDDoor1, Positions[1][0], Positions[1][1], Positions[1][2]);
		GetDynamicObjectPos(LSPDDoor2, Positions[2][0], Positions[2][1], Positions[2][2]);
		GetDynamicObjectPos(LSPDDoor3, Positions[3][0], Positions[3][1], Positions[3][2]);

		if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[1][0], Positions[1][1], Positions[1][2]) < 10.0)
		{
			if(LSPDDoor1Open == 0)
			{
				format(string, sizeof(string), "* %s unlocks the door before sliding it open.", GetName(playerid));
                NearByMessage(playerid, NICESKY, string);
				MoveDynamicObject(LSPDDoor1, 239.5439453125, 114.099609375, 1002.21875, 1);
				MoveDynamicObject(LSPDDoor4, 239.54446411133, 121.09854125977, 1002.21875, 1);
				LSPDDoor1Open = 1;
			}
			else
			{
				format(string, sizeof(string), "* %s slides the doors shut before locking them.", GetName(playerid));
                NearByMessage(playerid, NICESKY, string);
				MoveDynamicObject(LSPDDoor1, 239.5439453125, 116.099609375, 1002.21875, 1);
				MoveDynamicObject(LSPDDoor4, 239.54446411133, 119.09854125977, 1002.21875, 1);
				LSPDDoor1Open = 0;
			}
		}
		else if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[2][0], Positions[2][1], Positions[2][2]) < 10.0)
		{
			if(LSPDDoor2Open == 0)
			{
				format(string, sizeof(string), "* %s unlocks the door before sliding it open.", GetName(playerid));
                NearByMessage(playerid, NICESKY, string);
				MoveDynamicObject(LSPDDoor2, 253.20678710938, 105.55118560791, 1002.21875, 1);
				MoveDynamicObject(LSPDDoor5, 253.2060546875, 112.5517578125, 1002.21875, 1);
				LSPDDoor2Open = 1;
			}
			else
			{
				format(string, sizeof(string), "* %s slides the doors shut before locking them.", GetName(playerid));
                NearByMessage(playerid, NICESKY, string);
				MoveDynamicObject(LSPDDoor2, 253.20678710938, 107.55118560791, 1002.21875, 1);
				MoveDynamicObject(LSPDDoor5, 253.2060546875, 110.5517578125, 1002.21875, 1);
				LSPDDoor2Open = 0;
			}
		}
		else if(GetDistance(Positions[0][0], Positions[0][1], Positions[0][2], Positions[3][0], Positions[3][1], Positions[3][2]) < 10.0)
		{
			if(LSPDDoor3Open == 0)
			{
				format(string, sizeof(string), "* %s unlocks the door before sliding it open.", GetName(playerid));
                NearByMessage(playerid, NICESKY, string);
				MoveDynamicObject(LSPDDoor3, 214.35855102539, 116.49627685547, 998.015625, 1);
				MoveDynamicObject(LSPDDoor6, 221.33728027344, 116.49627685547, 998.015625, 1);
				LSPDDoor3Open = 1;
			}
			else
			{
				format(string, sizeof(string), "* %s slides the doors shut before locking them.", GetName(playerid));
                NearByMessage(playerid, NICESKY, string);
				MoveDynamicObject(LSPDDoor3, 216.35855102539, 116.49627685547, 998.015625, 1);
				MoveDynamicObject(LSPDDoor6, 219.33728027344, 116.49627685547, 998.015625, 1);
				LSPDDoor3Open = 0;
			}
		}
	}
	else
	{
		SendClientMessage(playerid, WHITE, "You are not a police officer.");
	}
	return 1;
}

command(groupsafedeposit, playerid, params[])
{
	new Amount, string[128], Item[128];
	if(sscanf(params, "dz", Amount, Item))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /groupsafedeposit [amount] [item]");
		if(Player[playerid][Group] != 0 && Player[playerid][GroupRank] >= 1)
		{
			format(string, sizeof(string), "There is currently $%d in your safe.", Groups[Player[playerid][Group]][SafeMoney]);
			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "There is currently %d Cocaine in your safe.", Groups[Player[playerid][Group]][SavedCrack]);
			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "There is currently %d Pot in your safe.", Groups[Player[playerid][Group]][SavedPot]);
			SendClientMessage(playerid, GREY, string);
		}
		SendClientMessage(playerid, WHITE, "Items: Money, Pot, Cocaine");
	}
	else
	{
		if(Player[playerid][Group] != 0 && Player[playerid][GroupRank] >= 1)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 5, Groups[Player[playerid][Group]][SafeX], Groups[Player[playerid][Group]][SafeY], Groups[Player[playerid][Group]][SafeZ]))
		    {
		        if(strcmp(Item, "money", true) == 0)
		        {
					if(Player[playerid][Money] >= Amount)
					{
				    	Player[playerid][Money] -= Amount;
				    	Groups[Player[playerid][Group]][SafeMoney] += Amount;
				    	format(string, sizeof(string), "You have deposited $%d into your group safe.", Amount);
			    		SendClientMessage(playerid, WHITE, string);
			    		SaveGroup(Player[playerid][Group]);
					}
					else
					{
				    	SendClientMessage(playerid, WHITE, "Your don't have that amount of Money.");
					}
				}
				else if(strcmp(Item, "cocaine", true) == 0)
				{
					if(Player[playerid][Cocaine] >= Amount)
					{
				    	Player[playerid][Cocaine] -= Amount;
				    	Groups[Player[playerid][Group]][SavedCrack] += Amount;
				    	format(string, sizeof(string), "You have deposited %d grams of Cocaine into your group safe.", Amount);
			    		SendClientMessage(playerid, WHITE, string);
			    		SaveGroup(Player[playerid][Group]);
					}
					else
					{
				    	SendClientMessage(playerid, WHITE, "Your don't have that amount of Cocaine.");
					}
				}
				else if(strcmp(Item, "pot", true) == 0)
				{
					if(Player[playerid][Pot] >= Amount)
					{
				    	Player[playerid][Pot] -= Amount;
				    	Groups[Player[playerid][Group]][SavedPot] += Amount;
				    	format(string, sizeof(string), "You have deposited %d grams of Pot into your group safe.", Amount);
			    		SendClientMessage(playerid, WHITE, string);
			    		SaveGroup(Player[playerid][Group]);
					}
					else
					{
				    	SendClientMessage(playerid, WHITE, "Your don't have that amount of Pot.");
					}
				}
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You must be at your safe to do this.");
			}
		}
	}
	return 1;
}

command(groupname, playerid, params[])
{
	new Name[128], string[128];
	if(sscanf(params, "z", Name))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /groupname [new name]");
	}
	else
	{
		if(Player[playerid][Group] != 0 && Player[playerid][GroupRank] >= 5)
		{
		    if(strlen(Name) < 3 || strlen(Name) >= 26)
		    {
		        SendClientMessage(playerid, WHITE, "You must use a name that is above 3 characters, and no longer than 26.");
		    }
		    else
		    {
		        if(strfind(Name, "~", true) || strfind(Name, "=", true))
		        {
		        	format(string, sizeof(string), "You have changed your group name to %s.", Name);
		        	format(Groups[Player[playerid][Group]][GroupName], 255, "%s", Name);
		        	SendClientMessage(playerid, WHITE, string);
		        	SaveGroup(Player[playerid][Group]);
		        }
		        else
		        {
		        	SendClientMessage(playerid, WHITE, "Invalid character! Names can only be alphanumeric.");
		        }
		    }
		}
	}
	return 1;
}

command(bdeposit, playerid, params[])
{
	new Amount, string[128];
	if(sscanf(params, "d", Amount))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /bdeposit [amount]");
	}
	else
	{
		if(Amount < 1)
    	{
	    }
	    else
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 50, BankIntX, BankIntY, BankIntZ))
	        {
	            if(Player[playerid][BankStatus] == 1)
	            {
	                SendClientMessage(playerid, WHITE, "The authorities have suspended your bank account.");
	            }
	            else
	            {
			        if(Player[playerid][Money] < Amount)
			        {
			            SendClientMessage(playerid, WHITE, "You don't have that much to deposit in to your bank account.");
			        }
			        else
			        {
			            Player[playerid][Money] -= Amount;
			            Player[playerid][BankMoney] += Amount;
			            format(string, sizeof(string), "You have successfully deposited $%d in to your bank account.", Amount);
			            SendClientMessage(playerid, WHITE, string);
			        }
		        }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You have to be at the bank to complete such a transaction.");
	        }
	    }
	}
	return 1;
}

command(bwithdraw, playerid, params[])
{
	new Amount, string[128];
	if(sscanf(params, "d", Amount))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /bwithdraw [amount]");
	}
	else
	{
		if(Amount < 1)
    	{
	    }
	    else
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 50, BankIntX, BankIntY, BankIntZ))
	        {
	            if(Player[playerid][BankStatus] == 1)
	            {
	                SendClientMessage(playerid, WHITE, "The authorities have suspended your bank account.");
	            }
	            else
	            {
			        if(Amount > Player[playerid][BankMoney])
			        {
			            SendClientMessage(playerid, WHITE, "You don't have that much in your bank account.");
			        }
			        else
			        {
			            Player[playerid][Money] += Amount;
			            Player[playerid][BankMoney] -= Amount;
			            format(string, sizeof(string), "You have successfully withdrawn $%d from your bank account.", Amount);
			            SendClientMessage(playerid, WHITE, string);
			        }
		        }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You have to be at the bank to complete such a transaction.");
	        }
	    }
	}
	return 1;
}

command(hbalance, playerid, params[])
{
	#pragma unused params
	new string[128];
	if(Player[playerid][House] >= 0)
	{
	    if(Houses[Player[playerid][House]][VaultMoney] != -1)
	    {
	    	format(string, sizeof(string), "There is currently $%d in your house vault.", Houses[Player[playerid][House]][VaultMoney]);
	    	SendClientMessage(playerid, GREY, string);
	    	format(string, sizeof(string), "There is currently %d grams of Cocaine in your house vault.", Houses[Player[playerid][House]][HouseCocaine]);
	    	SendClientMessage(playerid, GREY, string);
	    	format(string, sizeof(string), "There is currently %d grams of Pot in your house vault.", Houses[Player[playerid][House]][HousePot]);
	    	SendClientMessage(playerid, GREY, string);
	    	format(string, sizeof(string), "There is currently %d Materials in your house vault.", Houses[Player[playerid][House]][HouseMaterials]);
	    	SendClientMessage(playerid, GREY, string);
	    	SaveHouse(Player[playerid][House]);
	    }
	}
	return 1;
}

command(hdeposit, playerid, params[])
{
	new Amount, item[128], string[128];
	if(sscanf(params, "dz", Amount, item))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /hdeposit [amount] [item]");
		SendClientMessage(playerid, GREY, "Items: Materials, Cocaine, Pot, Money");
	}
	else
	{
	    if(Player[playerid][House] >= 0)
	    {
	        if(Player[playerid][InHouse] == Player[playerid][House])
	        {
		        if(Houses[Player[playerid][House]][VaultMoney] == -1)
		        {
		            SendClientMessage(playerid, WHITE, "You must purchase a house vault (using /buyvault), before you can use it.");
		        }
		        else
		        {
		            if(Amount >= 6000000)
		            {
		                SendClientMessage(playerid, WHITE, "You can't deposit this much.");
		                return 1;
		            }
		            
		            if(strcmp(item, "money", true) == 0)
		            {
		                if(Amount > Player[playerid][Money])
		                {
		                    SendClientMessage(playerid, WHITE, "You don't have that much money to deposit.");
		                }
		                else
		                {
		                    Houses[Player[playerid][House]][VaultMoney] += Amount;
		                    Player[playerid][Money] -= Amount;
		                    format(string, sizeof(string), "You have deposited $%d in to your house vault.", Amount);
		                    SendClientMessage(playerid, WHITE, string);
		                    SaveHouse(Player[playerid][House]);
		                }
		            }
		            else if(strcmp(item, "materials", true) == 0)
		            {
		                if(Amount > Player[playerid][Materials])
		                {
		                    SendClientMessage(playerid, WHITE, "You don't have that many materials to deposit.");
		                }
		                else
		                {
		                    Houses[Player[playerid][House]][HouseMaterials] += Amount;
		                    Player[playerid][Materials] -= Amount;
		                    format(string, sizeof(string), "You have deposited %d materials in to your house vault.", Amount);
		                    SendClientMessage(playerid, WHITE, string);
		                    SaveHouse(Player[playerid][House]);
		                }
		            }
		            else if(strcmp(item, "cocaine", true) == 0)
		            {
		                if(Amount > Player[playerid][Cocaine])
		                {
		                    SendClientMessage(playerid, WHITE, "You don't have that many grams of Cocaine to deposit.");
		                }
		                else
		                {
		                    Houses[Player[playerid][House]][HouseCocaine] += Amount;
		                    Player[playerid][Cocaine] -= Amount;
		                    format(string, sizeof(string), "You have deposited %d grams of Cocaine in to your house vault.", Amount);
		                    SendClientMessage(playerid, WHITE, string);
		                    SaveHouse(Player[playerid][House]);
		                }
		            }
		            else if(strcmp(item, "pot", true) == 0)
		            {
		                if(Amount > Player[playerid][Pot])
		                {
		                    SendClientMessage(playerid, WHITE, "You don't have that many grams of Pot to deposit.");
		                }
		                else
		                {
		                    Houses[Player[playerid][House]][HousePot] += Amount;
		                    Player[playerid][Pot] -= Amount;
		                    format(string, sizeof(string), "You have deposited %d grams of Pot in to your house vault.", Amount);
		                    SendClientMessage(playerid, WHITE, string);
		                    SaveHouse(Player[playerid][House]);
		                }
		            }
				}
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You must be in your house.");
			}
	    }
	}
	return 1;
}

command(hwithdraw, playerid, params[])
{
	new Amount, item[128], string[128];
	if(sscanf(params, "dz", Amount, item))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /hwithdraw [amount] [item]");
		SendClientMessage(playerid, GREY, "Items: Materials, Cocaine, Pot, Money");
	}
	else
	{
	    if(Player[playerid][House] >= 0)
	    {
	        if(Player[playerid][InHouse] == Player[playerid][House])
	        {
		        if(Houses[Player[playerid][House]][VaultMoney] == -1)
		        {
		            SendClientMessage(playerid, WHITE, "You must purchase a house vault (using /buyvault), before you can use it.");
		        }
		        else
		        {
		            if(strcmp(item, "money", true) == 0)
		            {
		                if(Houses[Player[playerid][House]][VaultMoney] < Amount)
		                {
		                    SendClientMessage(playerid, WHITE, "You don't have that much money to withdraw.");
		                }
		                else
		                {
		                    Houses[Player[playerid][House]][VaultMoney] -= Amount;
		                    Player[playerid][Money] += Amount;
		                    format(string, sizeof(string), "You have withdrawn $%d from your house vault.", Amount);
		                    SendClientMessage(playerid, WHITE, string);
		                    SaveHouse(Player[playerid][House]);
		                }
		            }
		            else if(strcmp(item, "materials", true) == 0)
		            {
		                if(Houses[Player[playerid][House]][HouseMaterials] < Amount)
		                {
		                    SendClientMessage(playerid, WHITE, "You don't have that many materials to withdraw.");
		                }
		                else
		                {
		                    Houses[Player[playerid][House]][HouseMaterials] -= Amount;
		                    Player[playerid][Materials] += Amount;
		                    format(string, sizeof(string), "You have withdrawn %d materials from your house vault.", Amount);
		                    SendClientMessage(playerid, WHITE, string);
		                    SaveHouse(Player[playerid][House]);
		                }
		            }
		            else if(strcmp(item, "cocaine", true) == 0)
		            {
		                if(Houses[Player[playerid][House]][HouseCocaine] < Amount)
		                {
		                    SendClientMessage(playerid, WHITE, "You don't have that many grams of Cocaine to withdraw.");
		                }
		                else
		                {
		                    Houses[Player[playerid][House]][HouseCocaine] -= Amount;
		                    Player[playerid][Cocaine] += Amount;
		                    format(string, sizeof(string), "You have withdrawn %d grams of Cocaine from your house vault.", Amount);
		                    SendClientMessage(playerid, WHITE, string);
		                    SaveHouse(Player[playerid][House]);
		                }
		            }
		            else if(strcmp(item, "pot", true) == 0)
		            {
		                if(Houses[Player[playerid][House]][HousePot] < Amount)
		                {
		                    SendClientMessage(playerid, WHITE, "You don't have that many grams of Pot to withdraw.");
		                }
		                else
		                {
		                    Houses[Player[playerid][House]][HousePot] -= Amount;
		                    Player[playerid][Pot] += Amount;
		                    format(string, sizeof(string), "You have withdraw %d grams of Pot from your house vault.", Amount);
		                    SendClientMessage(playerid, WHITE, string);
		                    SaveHouse(Player[playerid][House]);
		                }
		            }
				}
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You must be in your house.");
			}
	    }
	}
	return 1;
}

command(groupsafewithdraw, playerid, params[])
{
	new Amount, string[128], Item[128];
	if(sscanf(params, "dz", Amount, Item))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /groupsafewithdraw [amount] [item]");
		if(Player[playerid][Group] != 0 && Player[playerid][GroupRank] >= 5)
		{
			format(string, sizeof(string), "There is currently $%d in your safe.", Groups[Player[playerid][Group]][SafeMoney]);
			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "There is currently %d Cocaine in your safe.", Groups[Player[playerid][Group]][SavedCrack]);
			SendClientMessage(playerid, GREY, string);
			format(string, sizeof(string), "There is currently %d pot in your safe.", Groups[Player[playerid][Group]][SavedPot]);
			SendClientMessage(playerid, GREY, string);
		}
		SendClientMessage(playerid, WHITE, "Items: Money, Pot, Cocaine");
	}
	else
	{
		if(Player[playerid][Group] != 0 && Player[playerid][GroupRank] >= 5)
		{
		    if(IsPlayerInRangeOfPoint(playerid, 5, Groups[Player[playerid][Group]][SafeX], Groups[Player[playerid][Group]][SafeY], Groups[Player[playerid][Group]][SafeZ]))
		    {
		        if(strcmp(Item, "money", true) == 0)
		        {
					if(Groups[Player[playerid][Group]][SafeMoney] >= Amount)
					{
					    if(Amount < 1)
					    {
					        SendClientMessage(playerid, WHITE, "You can't draw out more than -1 (or less).");
					    }
					    else
					    {
				    		Player[playerid][Money] += Amount;
				    		Groups[Player[playerid][Group]][SafeMoney] -= Amount;
				    		format(string, sizeof(string), "You have withdrawn $%d from your group safe.", Amount);
				    		SendClientMessage(playerid, WHITE, string);
					        SaveGroup(Player[playerid][Group]);
				    		SavePlayerData(playerid);
				    	}
					}
					else
					{
				    	SendClientMessage(playerid, WHITE, "Your group safe doesn't have that amount of money.");
					}
				}
				else if(strcmp(Item, "pot", true) == 0)
				{
					if(Groups[Player[playerid][Group]][SavedPot] >= Amount)
					{
					    if(Amount < 1)
					    {
					        SendClientMessage(playerid, WHITE, "You can't draw out more than -1 (or less).");
					    }
					    else
					    {
				    		Player[playerid][Pot] += Amount;
				    		Groups[Player[playerid][Group]][SavedPot] -= Amount;
				    		format(string, sizeof(string), "You have withdrawn %d grams of Pot from your group safe.", Amount);
				    		SendClientMessage(playerid, WHITE, string);
					        SaveGroup(Player[playerid][Group]);
				    		SavePlayerData(playerid);
				    	}
					}
					else
					{
				    	SendClientMessage(playerid, WHITE, "Your group safe doesn't have that amount of Pot.");
					}
				}
				else if(strcmp(Item, "Cocaine", true) == 0)
		        {
					if(Groups[Player[playerid][Group]][SavedCrack] >= Amount)
					{
					    if(Amount < 1)
					    {
					        SendClientMessage(playerid, WHITE, "You can't draw out more than -1 (or less).");
					    }
					    else
					    {
				    		Player[playerid][Cocaine] += Amount;
				    		Groups[Player[playerid][Group]][SavedCrack] -= Amount;
				    		format(string, sizeof(string), "You have withdrawn %d grams of Cocaine from your group safe.", Amount);
				    		SendClientMessage(playerid, WHITE, string);
					        SaveGroup(Player[playerid][Group]);
				    		SavePlayerData(playerid);
				    	}
					}
					else
					{
				    	SendClientMessage(playerid, WHITE, "Your group safe doesn't have that amount of Crack.");
					}
		        }
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You must be at your safe to do this.");
			}
		}
	}
	return 1;
}

command(afk, playerid, params[])
{
	#pragma unused params
    new string[128];
    if(Player[playerid][AdminLevel] >= 1)
    {
	    if(Player[playerid][AFKStat] == 1)
	    {
			format(string, sizeof(string), "%s has been set to 'Available' (used /afk to resume gameplay)", GetName(playerid));
			SendToAdmins(ADMINORANGE, string, 0);
	        Player[playerid][AFKStat] = 0;
	        SendClientMessage(playerid, WHITE, "Your status has been set back to 'Available'.");
	    }
	    else
	    {
			format(string, sizeof(string), "%s has been set to 'AFK' (using /afk).", GetName(playerid));
			SendToAdmins(ADMINORANGE, string, 0);
	        Player[playerid][AFKStat] = 1;
	        SendClientMessage(playerid, WHITE, "You have set your status to AFK.");
	    }
    }
	return 1;
}

command(quitgroup, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][Group] >= 1)
	{
	    new string[128];
	    format(string, sizeof(string), "%s has left the group (quit).", GetName(playerid));
	    GroupMessage(playerid, ANNOUNCEMENT, string);
	    format(string, sizeof(string), "You have quit %s.", Groups[Player[playerid][Group]][GroupName]);
	    SendClientMessage(playerid, WHITE, string);
	    Player[playerid][Group] = 0;
	    Player[playerid][GroupRank] = 0;
	}
	else
	{
	    SendClientMessage(playerid, WHITE, "You don't have a group to quit.");
	}
	return 1;
}

command(sms, playerid, params[])
{
	new number, string[128], message[128];
	if(sscanf(params, "dz", number, message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /sms [number] [message]");
	}
	else
	{
	    if(Player[playerid][PhoneN] == number || Player[playerid][PhoneN] == -1)
	    {
	        SendClientMessage(playerid, WHITE, "You either don't have a phone, OR you're attempting to call yourself.");
	    }
	    else
	    {
	        if(Player[playerid][PhoneCredit] >= 1)
	        {
	            if(Player[playerid][PhoneStat] == 1)
	            {
			        for(new i = 0; i < MAX_PLAYERS; i++)
					{
						if(IsPlayerConnectedEx(i))
						{
						    if(Player[i][PhoneN] == number && number != -1)
						    {
						        if(strlen(message) >= 1)
						        {
						            if(Player[i][PhoneStat] == 1)
						            {
							            format(string, sizeof(string), "SMS to %d (%s): %s", number, GetName(playerid), message);
							            SendClientMessage(playerid, 0x859e73FF, string);
							            format(string, sizeof(string), "SMS from %d (%s): %s", Player[playerid][PhoneN], GetName(playerid), message);

                            			for(new j = 0; j < MAX_PLAYERS; j++)
				                        {
				                            if(j == i)
				                            {
												SendClientMessage(j, PLAYERCOM, string);
											}
										}

							            Player[playerid][PhoneCredit] -= 1;
						            }
						            else
						            {
						                SendClientMessage(playerid, WHITE, "That person's phone is offline.");
						            }
						        }
						        else
						        {
						            SendClientMessage(playerid, WHITE, "SYNTAX: /sms [number] [message] (If you don't have their number, buy a phonebook and type /getnumber [playerid])");
						        }
						    }
						}
					}
				}
				else
				{
				    SendClientMessage(playerid, WHITE, "You must switch your phone online (/togphone)");
				}
			}
			else
			{
			    SendClientMessage(playerid, PLAYERCOM, "SMS from SYSTEMOP (0): You have insufficient credit funds to send an SMS, top up from a 24/7 shop!");
			}
		}
	}
	return 1;
}

command(accent, playerid, params[])
{
	new accent[128], string[128];
	if(sscanf(params, "z", accent))
	{
	    SendClientMessage(playerid, WHITE, "SYNTAX: /accent [language]");
	}
	else
	{
	    if(IsPlayerSpawned(playerid))
	    {
	        if(strlen(accent) >= 1 && strlen(accent) < 15)
	        {
				format(Player[playerid][Accent], 128, "%s", accent);
				format(string, sizeof(string), "You are now talking in the %s accent!", accent);
				SendClientMessage(playerid, WHITE, string);
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "I don't think an accent is more than 15 characters, or less than 1.");
	        }
		}
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You're not spawned.");
	    }
	}
	return 1;
}

command(forceaccent, playerid, params[])
{
	new accent[128], id, string[128];
	if(sscanf(params, "uz", id, accent))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
		    SendClientMessage(playerid, WHITE, "SYNTAX: /forceaccent [playerid] [language]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
		    if(IsPlayerConnectedEx(id))
		    {
		        if(strlen(accent) >= 1 && strlen(accent) < 15)
		        {
					format(Player[id][Accent], 128, "%s", accent);
					format(string, sizeof(string), "You have forced %s to speak in the %s accent.", GetName(id), accent);
					SendClientMessage(playerid, WHITE, string);
		        }
		        else
		        {
		            SendClientMessage(playerid, WHITE, "An accent is more than 15 characters, or less than 1.");
		        }
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "That player isn't connected, or is not logged in.");
			}
	    }
	}
	return 1;
}

command(vip, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /(v)ip [message]");
	}
	else
	{
	    if(Player[playerid][VipRank] >= 1)
	    {
	        if(strlen(message) < 1)
	        {
	            SendClientMessage(playerid, WHITE, "SYNTAX: /(v)ip [message]");
	        }
	        else
	        {
	            format(string, sizeof(string), "[VIP Chat] %s says (%d): %s", GetName(playerid), Player[playerid][VipRank], message);

				for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(IsPlayerConnectedEx(i) && Player[i][VipRank] >= 1 && Player[i][ToggedVIP] == 0)
		            {
		                SendClientMessage(i, VIP_CHAT, string);
		            }
		        }
	        }
	    }
	}
	return 1;
}

command(v, playerid, params[])
{
	new message[128], string[128];
	if(sscanf(params, "z", message))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /(v)ip [message]");
	}
	else
	{
	    if(Player[playerid][VipRank] >= 1)
	    {
	        if(strlen(message) < 1)
	        {
	            SendClientMessage(playerid, WHITE, "SYNTAX: /(v)ip [message]");
	        }
	        else
	        {
	            format(string, sizeof(string), "[VIP Chat] %s says (%d): %s", GetName(playerid), Player[playerid][VipRank], message);

				for(new i = 0; i < MAX_PLAYERS; i++)
		        {
		            if(IsPlayerConnectedEx(i) && Player[i][VipRank] >= 1 && Player[i][ToggedVIP] == 0)
		            {
		                SendClientMessage(i, VIP_CHAT, string);
		            }
		        }
	        }
	    }
	}
	return 1;
}

command(buyvehicle, playerid, params[])
{
	if(Businesses[Player[playerid][InBusiness]][bType] == 6)
	{
	    if(Player[playerid][VipRank] >= 1)
	    {
	        ShowPlayerDialog(playerid, 346, DIALOG_STYLE_LIST, "Vehicle Dealership", "Special Deals\nLow-Riders\nSaloon Cars\n4x4 / Off-Roaders / Pickups\nBikes\nSports, Muscle and Supercars\nVIP Models", "Select", "Cancel");
	    }
	    else
	    {
	    	ShowPlayerDialog(playerid, 346, DIALOG_STYLE_LIST, "Vehicle Dealership", "Special Deals\nLow-Riders\nSaloon Cars\n4x4 / Off-Roaders / Pickups\nBikes\nSports, Muscle and Supercars\n", "Select", "Cancel");
		}
	}
	return 1;
}

command(abandoncar, playerid, params[])
{
	new vehslot;
	if(sscanf(params, "d", vehslot))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /abandoncar [1-3]");
	}
	else
	{
	    switch(vehslot)
	    {
	        case 1:
	        {
				if(Player[playerid][PlayerCarModel] > 0)
				{
				    Player[playerid][PlayerCarModel] = 0;

					Player[playerid][OwnedCarModSlot0] = 0;
					Player[playerid][OwnedCarModSlot1] = 0;
					Player[playerid][OwnedCarModSlot2] = 0;
					Player[playerid][OwnedCarModSlot3] = 0;
					Player[playerid][OwnedCarModSlot4] = 0;
					Player[playerid][OwnedCarModSlot5] = 0;
					Player[playerid][OwnedCarModSlot6] = 0;
					Player[playerid][OwnedCarModSlot7] = 0;
					Player[playerid][OwnedCarModSlot8] = 0;
					Player[playerid][OwnedCarModSlot9] = 0;
					Player[playerid][OwnedCarModSlot10] = 0;
					Player[playerid][OwnedCarModSlot11] = 0;
					Player[playerid][OwnedCarModSlot12] = 0;
					Player[playerid][OwnedCarModSlot13] = 0;

				    if(Player[playerid][CarLinkID] != 0)
				    {
				        DestroyVehicle(Player[playerid][CarLinkID]);
				        OwnedCarCount--;
				        CarCount--;
				    }

				    SendClientMessage(playerid, WHITE, "You have abandoned your vehicle (slot 1).");
				    if(Player[playerid][FindingCar] == 1)
				    {
				        DisablePlayerCheckpoint(playerid);
				        Player[playerid][FindingCar] = 0;
				        Player[playerid][Checkpoint] = 0;
				        SendClientMessage(playerid, GREY, "Your checkpoint has been cleared.");
				    }
				    
				    Player[playerid][CarLinkID] = 0;
				}
			}
			case 2:
			{
				if(Player[playerid][PlayerCarModel2] > 0)
				{
				    Player[playerid][PlayerCarModel2] = 0;

					Player[playerid][Car2OwnedCarModSlot0] = 0;
					Player[playerid][Car2OwnedCarModSlot1] = 0;
					Player[playerid][Car2OwnedCarModSlot2] = 0;
					Player[playerid][Car2OwnedCarModSlot3] = 0;
					Player[playerid][Car2OwnedCarModSlot4] = 0;
					Player[playerid][Car2OwnedCarModSlot5] = 0;
					Player[playerid][Car2OwnedCarModSlot6] = 0;
					Player[playerid][Car2OwnedCarModSlot7] = 0;
					Player[playerid][Car2OwnedCarModSlot8] = 0;
					Player[playerid][Car2OwnedCarModSlot9] = 0;
					Player[playerid][Car2OwnedCarModSlot10] = 0;
					Player[playerid][Car2OwnedCarModSlot11] = 0;
					Player[playerid][Car2OwnedCarModSlot12] = 0;
					Player[playerid][Car2OwnedCarModSlot13] = 0;

				    if(Player[playerid][Car2LinkID] != 0)
				    {
				        DestroyVehicle(Player[playerid][Car2LinkID]);
				        OwnedCarCount--;
				        CarCount--;
				    }

				    SendClientMessage(playerid, WHITE, "You have abandoned your vehicle (slot 2).");
				    
				    if(Player[playerid][FindingCar] == 1)
				    {
				        DisablePlayerCheckpoint(playerid);
				        Player[playerid][FindingCar] = 0;
				        Player[playerid][Checkpoint] = 0;
				        SendClientMessage(playerid, GREY, "Your checkpoint has been cleared.");
				    }
				    
				    Player[playerid][Car2LinkID] = 0;
				}
			}
			case 3:
			{
				if(Player[playerid][PlayerCarModel3] > 0)
				{
				    Player[playerid][PlayerCarModel3] = 0;

					Player[playerid][Car3OwnedCarModSlot0] = 0;
					Player[playerid][Car3OwnedCarModSlot1] = 0;
					Player[playerid][Car3OwnedCarModSlot2] = 0;
					Player[playerid][Car3OwnedCarModSlot3] = 0;
					Player[playerid][Car3OwnedCarModSlot4] = 0;
					Player[playerid][Car3OwnedCarModSlot5] = 0;
					Player[playerid][Car3OwnedCarModSlot6] = 0;
					Player[playerid][Car3OwnedCarModSlot7] = 0;
					Player[playerid][Car3OwnedCarModSlot8] = 0;
					Player[playerid][Car3OwnedCarModSlot9] = 0;
					Player[playerid][Car3OwnedCarModSlot10] = 0;
					Player[playerid][Car3OwnedCarModSlot11] = 0;
					Player[playerid][Car3OwnedCarModSlot12] = 0;
					Player[playerid][Car3OwnedCarModSlot13] = 0;

				    if(Player[playerid][Car3LinkID] != 0)
				    {
				        DestroyVehicle(Player[playerid][Car3LinkID]);
				        OwnedCarCount--;
				        CarCount--;
				    }

				    SendClientMessage(playerid, WHITE, "You have abandoned your vehicle (slot 3).");

				    if(Player[playerid][FindingCar] == 1)
				    {
				        DisablePlayerCheckpoint(playerid);
				        Player[playerid][FindingCar] = 0;
				        Player[playerid][Checkpoint] = 0;
				        SendClientMessage(playerid, GREY, "Your checkpoint has been cleared.");
				    }
				    
				    Player[playerid][Car3LinkID] = 0;
				}
			}
		}
	}
	return 1;
}

command(ticket, playerid, params[])
{
	new price, id, string[128];
	if(sscanf(params, "ud", id, price))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /ticket [playerid] [price]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
	        if(GetDistanceBetweenPlayers(playerid, id) < 7)
	        {
	            if(Groups[Player[playerid][Group]][CommandTypes] == 1)
	            {
	                format(string, sizeof(string), "* %s writes out a ticket and hands it to %s.", GetName(playerid), GetName(id));
	                NearByMessage(playerid, NICESKY, string);
	                format(string, sizeof(string), "You have written a ticket to %s, for $%d.", GetName(id), price);
	                SendClientMessage(playerid, WHITE, string);
	                format(string, sizeof(string), "You have been written a ticket, from LEO %s, the price is $%d. type /approve copticket to accept the ticket", GetName(playerid), price);
	                SendClientMessage(id, ANNOUNCEMENT, string);
	                Player[playerid][TicketPrice] = price;
	                Player[playerid][Ticketing] = id;
	                Player[id][BeingTicketed] = playerid;
	            }
	            else
	            {
	                SendClientMessage(playerid, WHITE, "You're not a LEO.");
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You're too far away.");
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	    }
	}
	return 1;
}

command(call, playerid, params[])
{
	new number, string[128];
	if(sscanf(params, "d", number))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /call [number]");
	}
	else
	{
	    if(Player[playerid][PhoneN] == number || Player[playerid][PhoneN] == -1)
	    {
	        SendClientMessage(playerid, WHITE, "You either don't have a phone, OR you're attempting to call yourself.");
	    }
	    else
	    {
	        if(Player[playerid][PhoneStat] == 1)
	        {
		        if(Player[playerid][CellphoneConsole] == -1)
		        {
			        if(number == 911)
			        {
			            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
			            Player[playerid][CellphoneConsole] = 911;
			            SendClientMessage(playerid, WHITE, "You've called Emergency services, please select the department you desire (i.e: LSPD, LSFMD)");
			        }
			        else
			        {
			            if(Player[playerid][PhoneCredit] >= 1)
			            {
				            if(number != -1)
				            {
						        for(new i = 0; i < MAX_PLAYERS; i++)
								{
									if(IsPlayerConnectedEx(i))
									{
									    if(Player[i][PhoneN] == number)
									    {
									        if(Player[i][PhoneStat] == 1)
									        {
												Player[playerid][Calling] = i;
												Player[i][BeingCalled] = playerid;

												format(string, sizeof(string), "* %s takes out their cellphone, and dials the digits '%d'", GetName(playerid), Player[i][PhoneN]);
												NearByMessage(playerid, NICESKY, string);
												
												format(string, sizeof(string), "* %s's cellphone starts to ring...", GetName(i));
												NearByMessage(i, NICESKY, string);
												
												if(IsPlayerInAnyVehicle(i))
												{
												    TextDrawShowForPlayer(i, CellPhoneTextDrawInVehicle);
												}
												else
												{
													TextDrawShowForPlayer(i, CellPhoneTextDraw);
												}
												
												Player[i][CallConnectingTime] = 1;
												
												SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);

												SendClientMessage(playerid, WHITE, "You can use the 'T' chat to proceed to talk.");
									    	}
									    	else
									    	{
									    	    SendClientMessage(playerid, WHITE, "That person's phone is offline.");
									    	}
									    }
									}
								}
							}
							else
							{
							    SendClientMessage(playerid, WHITE, "Invalid number.");
							}
						}
						else
						{
						    SendClientMessage(playerid, WHITE, "You don't have enough phone credit. Visit a 24/7 to top-up your phone!");
						}
					}
			    }
			    else
				{
				    SendClientMessage(playerid, WHITE, "You are currently in a call.");
				}
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "You must switch your phone online (/togphone).");
			}
	    }
	}
	return 1;
}

command(setcarcolour, playerid, params[])
{
	new col1, col2;
	if(sscanf(params, "dd", col1, col2))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /setcarcolour [colour1] [colour2]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
			new id, Vehicle[16], vehicleid = GetPlayerVehicleID(playerid);
			id = GetVehicleFileID(vehicleid);

			format(Vehicle, sizeof(Vehicle), "V_%d", id);

			if(djIsSet(VEHICLES_FILE, Vehicle))
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
			        if(id == 0)
			        {
			            SendClientMessage(playerid, WHITE, "This isn't a saved vehicle.");
			        }
			        else
			        {
			            Vehicles[id][CarColour1] = col1;
						Vehicles[id][CarColour2] = col2;
						ChangeVehicleColor(Vehicles[id][GameID], Vehicles[id][CarColour1], Vehicles[id][CarColour2]);
                        SaveExistingVehicle(vehicleid);
					}
				}
				else
				{
				    SendClientMessage(playerid, WHITE, "You're not in a vehicle.");
				}
			}
			else
			{
			    SendClientMessage(playerid, WHITE, "This isn't a saved vehicle.");
			}
		}
	}
	return 1;
}

command(movecar, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 4)
	{
		new id, Vehicle[16], vehicleid = GetPlayerVehicleID(playerid);
		id = GetVehicleFileID(vehicleid);

		format(Vehicle, sizeof(Vehicle), "V_%d", id);

		if(djIsSet(VEHICLES_FILE, Vehicle))
		{
		    if(IsPlayerInAnyVehicle(playerid))
		    {
		        if(id == 0)
		        {
		            SendClientMessage(playerid, WHITE, "This isn't a saved vehicle.");
		        }
		        else
		        {
					GetVehiclePos(vehicleid, Vehicles[id][CarPosX], Vehicles[id][CarPosY], Vehicles[id][CarPosZ]);
					GetVehicleZAngle(vehicleid, Vehicles[id][CarZAngle]);
					SaveExistingVehicle(vehicleid);
					DestroyVehicle(vehicleid);
					Vehicles[id][GameID] = CreateVehicle(Vehicles[id][CarModel], Vehicles[id][CarPosX], Vehicles[id][CarPosY], Vehicles[id][CarPosZ], Vehicles[id][CarZAngle], Vehicles[id][CarColour1], Vehicles[id][CarColour2], 3600);
					PutPlayerInVehicle(playerid, Vehicles[id][GameID], 0);
				}
			}
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "ERROR: Unable to move the vehicle.");
		}
	}
	return 1;
}

command(savecar, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][AdminLevel] >= 5)
	{
		if(UnconfirmedSave[playerid] == 0)
		{
		    SendClientMessage(playerid, WHITE, "Are you sure you want to save this vehicle? Please re-type this command to confirm this action.");
		    UnconfirmedSave[playerid] = 1;
		}
		else
		{
		    UnconfirmedSave[playerid] = 0;
		    if(IsPlayerInAnyVehicle(playerid))
		    {
			    new id, Vehicle[16], vehicleid = GetPlayerVehicleID(playerid);

			    id = findAvailableVehicleID();

				format(Vehicle, sizeof(Vehicle), "V_%d", id);
			    if(!djIsSet(VEHICLES_FILE, Vehicle)) // Fail-safe to prevent overwriting any current values
			    {
			        GetVehiclePos(vehicleid, Vehicles[id][CarPosX], Vehicles[id][CarPosY], Vehicles[id][CarPosZ]);
			        GetVehicleZAngle(vehicleid, Vehicles[id][CarZAngle]);

			        Vehicles[id][CarModel] = GetVehicleModel(vehicleid);
			        Vehicles[id][CarGroup] = 0;

			        Vehicles[id][CarColour1] = -1;
			        Vehicles[id][CarColour2] = -1;

			        djAutocommit(false);
				    format(Vehicle, sizeof(Vehicle), "V_%d/PosX", id);
				    djSetFloat(VEHICLES_FILE, Vehicle, Vehicles[id][CarPosX], true);
				    format(Vehicle, sizeof(Vehicle), "V_%d/PosY", id);
				    djSetFloat(VEHICLES_FILE, Vehicle, Vehicles[id][CarPosY], true);
				    format(Vehicle, sizeof(Vehicle), "V_%d/PosZ", id);
				    djSetFloat(VEHICLES_FILE, Vehicle, Vehicles[id][CarPosZ], true);
				    format(Vehicle, sizeof(Vehicle), "V_%d/ZAngle", id);
				    djSetFloat(VEHICLES_FILE, Vehicle, Vehicles[id][CarZAngle], true);
				    format(Vehicle, sizeof(Vehicle), "V_%d/Model", id);
				    djSetInt(VEHICLES_FILE, Vehicle, Vehicles[id][CarModel], true);
				    format(Vehicle, sizeof(Vehicle), "V_%d/Col1", id);
				    djSetInt(VEHICLES_FILE, Vehicle, Vehicles[id][CarColour1], true);
				    format(Vehicle, sizeof(Vehicle), "V_%d/Col2", id);
				    djSetInt(VEHICLES_FILE, Vehicle, Vehicles[id][CarColour2], true);
				    format(Vehicle, sizeof(Vehicle), "V_%d/Group", id);
			    	djSetInt(VEHICLES_FILE, Vehicle, Vehicles[id][CarGroup], true);
					djCommit(VEHICLES_FILE);
					djAutocommit(true);
					CarCount++;

					printf("[system] Vehicle %d has been saved to %s.", id, VEHICLES_FILE);
					SendClientMessage(playerid, WHITE, "Vehicle saved!");
					
					DestroyVehicle(vehicleid);
					Vehicles[id][GameID] = CreateVehicle(Vehicles[id][CarModel], Vehicles[id][CarPosX], Vehicles[id][CarPosY], Vehicles[id][CarPosZ], Vehicles[id][CarZAngle], Vehicles[id][CarColour1], Vehicles[id][CarColour2], 3600);
                    PutPlayerInVehicle(playerid, Vehicles[id][GameID], 0);
                    
                    SendClientMessage(playerid, WHITE, "Do NOT despawn this vehicle.");
                    
			        for(new i = 0; i < SpawnedVehicles; i++)
					{
					    if(AdminSpawned[i] == GetPlayerVehicleID(playerid))
					    {
					        AdminSpawned[i] = 0;
					    }
					}
				}
			    else {
			        new
			            msgDiagnoseError[104];

					format(msgDiagnoseError, sizeof(msgDiagnoseError), "[savecar] %s failed to insert in Vehicles.json. %s appears to already be set.", Vehicle, Vehicle);
			        logError(msgDiagnoseError);
			        
			        SendClientMessage(playerid, WHITE, "There was an error attempting to save this vehicle, details of the error have been logged to 'scriptfiles/errors.txt'");
			    }
		    }
		}
	}
	return 1;
}

command(buyvault, playerid, params[])
{
	if(isnull(params))
	{
		SendClientMessage(playerid, WHITE, "Please type /buyvault confirm, to confirm. The price is $5000.");
	}
	else
	{
	    if(strcmp(params, "confirm", true) == 0)
	    {
	        if(Player[playerid][House] >= 1)
	        {
	        	if(Player[playerid][Money] >= 5000)
	        	{
	        	    Player[playerid][Money] -= 5000;
	            	Houses[Player[playerid][House]][VaultMoney] = 5000;
	            	SendClientMessage(playerid, WHITE, "You have successfully purchased a house vault! It has been installed and you have been charged $5000.");
	        	}
	        	else
	        	{
	            	SendClientMessage(playerid, WHITE, "You do not have enough money to complete this transacation.");
	        	}
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You need a house to purchase a vault for.");
	        }
	    }
	}
	return 1;
}

command(bswithdraw, playerid, params[])
{
	new Amount, string[128];
	if(sscanf(params, "d", Amount))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /bswithdraw [amount]");
		if(Player[playerid][Business] >= 0)
		{
		    if(Businesses[Player[playerid][Business]][bVault] != -1)
		    {
		    	format(string, sizeof(string), "There is currently $%d in your business vault.", Businesses[Player[playerid][Business]][bVault]);
		    	SendClientMessage(playerid, GREY, string);
		    }
		}
	}
	else
	{
	    if(Player[playerid][Business] >= 0)
	    {
            if(Amount < 1)
            {
                SendClientMessage(playerid, WHITE, "Invalid amount.");
            }
            else
            {
                if(Businesses[Player[playerid][Business]][bVault] >= Amount)
                {
                    if(Player[playerid][InBusiness] == Player[playerid][Business])
                    {
	                    Player[playerid][Money] += Amount;
	                    Businesses[Player[playerid][Business]][bVault] -= Amount;
	                    format(string, sizeof(string), "You have withdrawn $%d from your business vault.", Amount);
	                    SendClientMessage(playerid, WHITE, string);
                    }
                    else
                    {
                        SendClientMessage(playerid, WHITE, "You're not at your business.");
                    }
                }
                else
                {
                    SendClientMessage(playerid, WHITE, "You don't have enough cash to complete this transaction.");
                }
            }
        }
    }
	return 1;
}

command(bsdeposit, playerid, params[])
{
	new Amount, string[128];
	if(sscanf(params, "d", Amount))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /bsdeposit [amount]");
		if(Player[playerid][Business] >= 0)
		{
		    if(Businesses[Player[playerid][Business]][bVault] != -1)
		    {
		    	format(string, sizeof(string), "There is currently $%d in your business vault.", Businesses[Player[playerid][Business]][bVault]);
		    	SendClientMessage(playerid, GREY, string);
		    }
		}
	}
	else
	{
	    if(Player[playerid][Business] >= 0)
	    {
            if(Amount < 1)
            {
                SendClientMessage(playerid, WHITE, "Invalid amount.");
            }
            else
            {
                if(Player[playerid][Money] >= Amount)
                {
                    if(Player[playerid][InBusiness] == Player[playerid][Business])
                    {
	                    Player[playerid][Money] -= Amount;
	                    Businesses[Player[playerid][Business]][bVault] += Amount;
	                    format(string, sizeof(string), "You have deposited $%d in to your business vault.", Amount);
	                    SendClientMessage(playerid, WHITE, string);
                    }
                    else
                    {
                        SendClientMessage(playerid, WHITE, "You're not at your business.");
                    }
                }
                else
                {
                    SendClientMessage(playerid, WHITE, "You don't have enough cash to complete this transaction.");
                }
            }
        }
    }
	return 1;
}

command(help, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][InBusiness] >= 1)
	{
		ShowPlayerDialog(playerid, 3260, DIALOG_STYLE_LIST, "Help Menu", "Commands\nAdministrators\nRules\nFrequently Asked Questions\nCommands For This Business", "Select", "Cancel");
	}
	else
	{
		ShowPlayerDialog(playerid, 3260, DIALOG_STYLE_LIST, "Help Menu", "Commands\nAdministrators\nRules\nFrequently Asked Questions\n", "Select", "Cancel");
	}
	return 1;
}

command(invite, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /invite [playerid]");
	}
	else
	{
		if(Player[playerid][GroupRank] >= 5 && Player[playerid][Group] != 0)
		{
		    if(IsPlayerConnectedEx(id) || id != playerid)
	    	{
   				Player[id][PendingInvite] = Player[playerid][Group];
	    		format(string, sizeof(string), "You have been invited to join %s, by %s (type /approve groupinvite to join the group). ", Groups[Player[playerid][Group]][GroupName], GetName(playerid));
	    		SendClientMessage(id, ANNOUNCEMENT, string);
	    		format(string, sizeof(string), "You have invited %s to join your group.", GetName(id));
	    		SendClientMessage(playerid, ANNOUNCEMENT, string);
	    	}
	    	else
	    	{
	    		SendClientMessage(playerid, WHITE, "Player not connected or not logged in, or is you.");
	    	}
	    }
	}
	return 1;
}

command(togphone, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][PhoneN] != -1)
	{
		if(Player[playerid][PhoneStat] == 1)
		{
		    Player[playerid][PhoneStat] = 0;
		    SendClientMessage(playerid, WHITE, "Your phone is now offline.");
		}
		else
		{
		    Player[playerid][PhoneStat] = 1;
		    SendClientMessage(playerid, WHITE, "Your phone is now online.");
		}
	}
	return 1;
}

command(pay, playerid, params[])
{
	new id, plmoney, string[128];
	if(sscanf(params, "ud", id, plmoney))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /pay [playerid] [amount]");
	}
	else
	{
	    if(Player[playerid][Money] >= plmoney)
	    {
	        if(IsPlayerConnectedEx(id) || id != playerid)
	        {
	            if(Spectator[id][SpecSpectatingPlayer] != -1)
	            {
	                SendClientMessage(playerid, WHITE, "You're too far away.");
	            }
	            else
	            {
		        	if(plmoney > 0 && plmoney < 20000)
		        	{
		        		if(GetDistanceBetweenPlayers(playerid, id) < 5)
		        		{
			            	Player[playerid][Money] -= plmoney;
			            	Player[id][Money] += plmoney;
			            	format(string, sizeof(string), "You have paid $%s to %s.", IntToFormattedStr(plmoney), GetName(id));
			            	SendClientMessage(playerid, WHITE, string);
			            	format(string, sizeof(string), "* %s has paid %s some money ($%s).", GetName(playerid), GetName(id), IntToFormattedStr(plmoney));
			            	NearByMessage(id, NICESKY, string);
			            	new tmpip1[128], tmpip2[128];
			            	GetPlayerIp(playerid, tmpip1, sizeof(tmpip1));
			            	GetPlayerIp(id, tmpip2, sizeof(tmpip2));
							new hour, minute, second, day, year, month;
							gettime(hour, minute, second);
							getdate(year, month, day);
			            	format(string, sizeof(string), "[PAY] %s (IP: %s) has paid %s (IP: %s) $%s on %d/%d/%d (%d:%d:%d)", GetName(playerid), tmpip1, GetName(id), tmpip2, IntToFormattedStr(plmoney), day, month, year, hour, minute, second);
			            	MoneyLog(string);
			            	format(string, sizeof(string), "You have been paid $%s, by %s.", IntToFormattedStr(plmoney), GetName(playerid));
			            	SendClientMessage(id, WHITE, string);
			            	
			            	if(Player[playerid][PlayingHours] == 0 && plmoney >= 999 && Player[playerid][AdminLevel] < 1)
			            	{
			            	    format(string, sizeof(string), "WARNING: %s may possibly be money-farming, they've given $%s to %s (w/ 0 playing hours)", GetName(playerid), IntToFormattedStr(plmoney), GetName(id));
			            	    SendToAdmins(ADMINORANGE, string, 0);
			            	}
		            	}
		            	else
		            	{
		            	    SendClientMessage(playerid, WHITE, "You're too far away.");
		            	}
	            	}
		        	else
		        	{
	        	    	SendClientMessage(playerid, WHITE, "You can't pay under $1, or over $19,999.");
		        	}
	        	}
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "Player not connected or not logged in, or is you.");
	        }
	    }
	}
	return 1;
}

command(uninvite, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /uninvite [playerid]");
	}
	else
	{
		if(Player[playerid][GroupRank] >= 5 && Player[playerid][Group] != 0)
		{
	    	if(IsPlayerConnectedEx(id) || id != playerid)
	    	{
	    	    if(Player[id][Group] == Player[playerid][Group])
	    	    {
	    	        if(Player[playerid][GroupRank] > Player[id][GroupRank])
	    	        {
		    	        format(string, sizeof(string), "%s has left the faction (un-invited).", GetName(id));
		    	        GroupMessage(id, ANNOUNCEMENT, string);
		    	        format(string, sizeof(string), "You have uninvited player %s.", GetName(id));
		    	        SendClientMessage(playerid, ANNOUNCEMENT, string);
		    	        format(string, sizeof(string), "You have been uninvited from %s, by %s.", Groups[Player[playerid][Group]][GroupName], GetName(playerid));
		    	        SendClientMessage(id, WHITE, string);
						Player[id][Group] = 0;
		    	        SavePlayerData(playerid);
	    	        }
	    	        else
	    	        {
	    	            SendClientMessage(playerid, WHITE, "You can't uninvite a higher rank.");
	    	        }
	    	    }
	    	    else
	    	    {
	    	        SendClientMessage(playerid, WHITE, "Player is not in your group to un-invite.");
	    	    }
	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, WHITE, "Player not connected or not logged in, or is you.");
	    	}
	    }
	}
	return 1;
}

command(lock, playerid, params[])
{
	new vehslot;
	if(sscanf(params, "d", vehslot))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /lock [1-3]");
	}
	else
	{
	    switch(vehslot)
	    {
	        case 1:
	        {
				if(Player[playerid][PlayerCarModel] > 0)
				{
				    if(IsPlayerInRangeOfVehicle(playerid, Player[playerid][CarLinkID], 10))
				    {
					    if(Player[playerid][CarLinkID] > 0)
					    {
					        if(Player[playerid][LockedCar] == 0)
					        {
					    		Player[playerid][LockedCar] = 1;
					    		SendClientMessage(playerid, WHITE, "You have locked your vehicle.");

								for(new i = 0; i < MAX_PLAYERS; i++)
								{
									if(i != playerid)
									{
										SetVehicleParamsForPlayer(Player[playerid][CarLinkID], i, 0, 1);
									}
								}
					    		return 1;
					    	}
					    	else
					    	{
					    	    Player[playerid][LockedCar] = 0;

								for(new i = 0; i < MAX_PLAYERS; i++)
								{
									SetVehicleParamsForPlayer(Player[playerid][CarLinkID], i, 0, 0);
								}

					    	    SendClientMessage(playerid, WHITE, "You have un-locked your vehicle.");
					    	    return 1;
					    	}
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, WHITE, "You're too far away.");
				    }
				}
	        }
	        case 2:
	        {
				if(Player[playerid][PlayerCarModel2] > 0)
				{
				    if(IsPlayerInRangeOfVehicle(playerid, Player[playerid][Car2LinkID], 10))
				    {
					    if(Player[playerid][Car2LinkID] > 0)
					    {
					        if(Player[playerid][LockedCar2] == 0)
					        {
					    		Player[playerid][LockedCar2] = 1;
					    		SendClientMessage(playerid, WHITE, "You have locked your vehicle.");

								for(new i = 0; i < MAX_PLAYERS; i++)
								{
									if(i != playerid)
									{
										SetVehicleParamsForPlayer(Player[playerid][Car2LinkID], i, 0, 1);
									}
								}
					    		return 1;
					    	}
					    	else
					    	{
					    	    Player[playerid][LockedCar2] = 0;

								for(new i = 0; i < MAX_PLAYERS; i++)
								{
									SetVehicleParamsForPlayer(Player[playerid][Car2LinkID], i, 0, 0);
								}

					    	    SendClientMessage(playerid, WHITE, "You have un-locked your vehicle.");
					    	    return 1;
					    	}
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, WHITE, "You're too far away.");
				    }
				}
	        }
	        case 3:
	        {
				if(Player[playerid][PlayerCarModel3] > 0)
				{
				    if(IsPlayerInRangeOfVehicle(playerid, Player[playerid][Car3LinkID], 10))
				    {
					    if(Player[playerid][Car3LinkID] > 0)
					    {
					        if(Player[playerid][LockedCar3] == 0)
					        {
					    		Player[playerid][LockedCar3] = 1;
					    		SendClientMessage(playerid, WHITE, "You have locked your vehicle.");

								for(new i = 0; i < MAX_PLAYERS; i++)
								{
									if(i != playerid)
									{
										SetVehicleParamsForPlayer(Player[playerid][Car3LinkID], i, 0, 1);
									}
								}
					    		return 1;
					    	}
					    	else
					    	{
					    	    Player[playerid][LockedCar3] = 0;

								for(new i = 0; i < MAX_PLAYERS; i++)
								{
									SetVehicleParamsForPlayer(Player[playerid][Car3LinkID], i, 0, 0);
								}

					    	    SendClientMessage(playerid, WHITE, "You have un-locked your vehicle.");
					    	    return 1;
					    	}
					    }
				    }
				    else
				    {
				        SendClientMessage(playerid, WHITE, "You're too far away.");
				    }
				}
	        }
		}
	}
	return 1;
}

command(callcar, playerid, params[])
{
	new vehslot;
	if(sscanf(params, "d", vehslot))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /callcar [1-3]");
	}
	else
	{
	    switch(vehslot)
	    {
			case 1:
			{
				if(Player[playerid][PlayerCarModel] > 0)
				{
					if(Player[playerid][Checkpoint] == 0)
					{
					    new Float: CurCarX, Float: CurCarY, Float: CurCarZ;
					    GetVehiclePos(Player[playerid][CarLinkID], CurCarX, CurCarY, CurCarZ);
					    SetPlayerCheckpoint(playerid, CurCarX, CurCarY, CurCarZ, 10.0);
					    Player[playerid][Checkpoint] = 1;
					    Player[playerid][FindingCar] = 1;
					    SendClientMessage(playerid, WHITE, "A checkpoint has been set. If you can't reach it, contact an admin or /abandoncar.");
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "You already have an active checkpoint, please reach it first.");
					}
				}
			}
			case 2:
			{
				if(Player[playerid][PlayerCarModel2] > 0)
				{
					if(Player[playerid][Checkpoint] == 0)
					{
					    new Float: CurCarX, Float: CurCarY, Float: CurCarZ;
					    GetVehiclePos(Player[playerid][Car2LinkID], CurCarX, CurCarY, CurCarZ);
					    SetPlayerCheckpoint(playerid, CurCarX, CurCarY, CurCarZ, 10.0);
					    Player[playerid][Checkpoint] = 1;
					    Player[playerid][FindingCar] = 1;
					    SendClientMessage(playerid, WHITE, "A checkpoint has been set. If you can't reach it, contact an admin or /abandoncar.");
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "You already have an active checkpoint, please reach it first.");
					}
				}
			}
			case 3:
			{
				if(Player[playerid][PlayerCarModel3] > 0)
				{
					if(Player[playerid][Checkpoint] == 0)
					{
					    new Float: CurCarX, Float: CurCarY, Float: CurCarZ;
					    GetVehiclePos(Player[playerid][Car3LinkID], CurCarX, CurCarY, CurCarZ);
					    SetPlayerCheckpoint(playerid, CurCarX, CurCarY, CurCarZ, 10.0);
					    Player[playerid][Checkpoint] = 1;
					    Player[playerid][FindingCar] = 1;
					    SendClientMessage(playerid, WHITE, "A checkpoint has been set. If you can't reach it, contact an admin or /abandoncar.");
					}
					else
					{
					    SendClientMessage(playerid, WHITE, "You already have an active checkpoint, please reach it first.");
					}
				}
			}
		}
	}
	return 1;
}

command(guard, playerid, params[])
{
	new id, price, string[128];
	if(sscanf(params, "ud", id, price))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /guard [playerid] [price]");
	}
	else
	{
	    if(Jobs[Player[playerid][Job]][JobType] == 3)
	    {
	        if(IsPlayerConnectedEx(id))
	        {
	            if(GetDistanceBetweenPlayers(playerid, id) < 7)
	            {
	                new Float: Armour;
	                GetPlayerArmour(id, Armour);
	                
	                if(Armour >= 50)
	                {
	                    SendClientMessage(playerid, WHITE, "You can't guard this person, they have 50 percent armour already.");
	                }
	                else
	                {
	                    if(price >= 5000 && price < 10000)
	                    {
		                    format(string, sizeof(string), "%s has offered to give you 50 percent armour, for $%d (type /approve guardrequest to get the fulfill the request).", GetName(playerid), price);
		                    SendClientMessage(id, ANNOUNCEMENT, string);
		                    format(string, sizeof(string), "You have offered to guard %s, for $%d.", GetName(id), price);
		                    SendClientMessage(playerid, WHITE, string);
		                    
		                    Player[id][GuardOffer] = playerid;
		                    Player[id][GuardPrice] = price;
		                    Player[playerid][GuardPrice] = price;
		                    Player[playerid][Guarding] = id;
	                    }
	                    else
	                    {
	                        SendClientMessage(playerid, WHITE, "Minimum price is $5,000 and the maximum is $10,000");
	                    }
	                }
	            }
	            else
	            {
	                SendClientMessage(playerid, WHITE, "You're too far away!");
	            }
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
	        }
	    }
	    else
	    {
	        SendClientMessage(playerid, WHITE, "You're not a guard.");
	    }
	}
	return 1;
}

command(approve, playerid, params[])
{
	new Usage[128], string[128];
	if(sscanf(params, "z", Usage))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /approve [usage]");
		SendClientMessage(playerid, GREY, "Usages: BETAInvite, GroupInvite, Handshake, HealRequest, GuardRequest, DivorceRequest");
	}
	else
	{
		if(strcmp(Usage, "healrequest", true) == 0)
		{
		    if(Player[playerid][HealPrice] != 0)
		    {
				for(new i = 0; i < MAX_PLAYERS; i++)
				{
				    if(IsPlayerConnectedEx(i) && Player[i][AttemptingToHeal] == playerid)
				    {
				        if(GetDistanceBetweenPlayers(playerid, i) < 5)
				        {
				            SetPlayerHealth(playerid, 100);
				            Player[i][Money] += Player[playerid][HealPrice];
				            Player[playerid][Money] -= Player[playerid][HealPrice];
				            SendClientMessage(playerid, WHITE, "You have been fully healed");
				            Player[i][AttemptingToHeal] = -1;
				            Player[playerid][HealPrice] = 0;
				        }
				    }
				}
		    }
		}
		else if(strcmp(Usage, "BETAInvite", true) == 0)
		{
		    if(Player[playerid][PendingBETAInvite] >= 1)
		    {
		        Player[playerid][PendingBETAInvite] = 0;
		        Player[playerid][Tester] = 1;
		        SendClientMessage(playerid, WHITE, "Congratulations! You are now a tester.");
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You do not have a pending invitation.");
		    }
		}
		else if(strcmp(Usage, "Handshake", true) == 0)
		{
		    if(Player[playerid][PendingHandshake] != -1)
		    {
		        if(GetDistanceBetweenPlayers(playerid, Player[playerid][PendingHandshake]) < 3)
		        {
			        switch(Player[playerid][PendingHandshakeStyle])
			        {
			            case 1:
			            {
			                Player[playerid][PendingHandshake] = -1;
			                PlayerFacePlayer(playerid, Player[playerid][PendingHandshake]);
			                ApplyAnimationEx(playerid, "GANGS", "hndshkaa", 4.0, 1, 1, 1, 0, 1000);
			                ApplyAnimationEx(Player[playerid][PendingHandshake], "GANGS", "hndshkaa", 4.0, 1, 1, 1, 0, 1000);
							SendClientMessage(playerid, WHITE, "Handshake approved.");
						}
			            case 2:
			            {
			                PlayerFacePlayer(playerid, Player[playerid][PendingHandshake]);
			                ApplyAnimationEx(playerid, "GANGS", "hndshkba", 4.0, 1, 1, 1, 0, 1000);
			                ApplyAnimationEx(Player[playerid][PendingHandshake], "GANGS", "hndshkba", 4.0, 1, 1, 1, 0, 1000);
							SendClientMessage(playerid, WHITE, "Handshake approved.");
							Player[playerid][PendingHandshake] = -1;
			            }
			            case 3:
			            {
			                PlayerFacePlayer(playerid, Player[playerid][PendingHandshake]);
			                ApplyAnimationEx(playerid, "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000);
			                ApplyAnimationEx(Player[playerid][PendingHandshake], "GANGS", "hndshkca", 4.0, 1, 1, 1, 0, 1000);
							SendClientMessage(playerid, WHITE, "Handshake approved.");
							Player[playerid][PendingHandshake] = -1;
			            }
			            case 4:
			            {
			                PlayerFacePlayer(playerid, Player[playerid][PendingHandshake]);
			                ApplyAnimationEx(playerid, "GANGS", "hndshkcb", 4.0, 1, 1, 1, 0, 1000);
			                ApplyAnimationEx(Player[playerid][PendingHandshake], "GANGS", "hndshkcb", 4.0, 1, 1, 1, 0, 1000);
							SendClientMessage(playerid, WHITE, "Handshake approved.");
							Player[playerid][PendingHandshake] = -1;
			            }
			            case 5:
			            {
			                PlayerFacePlayer(playerid, Player[playerid][PendingHandshake]);
			                ApplyAnimationEx(playerid, "GANGS", "hndshkda", 4.0, 1, 1, 1, 0, 1000);
			                ApplyAnimationEx(Player[playerid][PendingHandshake], "GANGS", "hndshkda", 4.0, 1, 1, 1, 0, 1000);
							SendClientMessage(playerid, WHITE, "Handshake approved.");
							Player[playerid][PendingHandshake] = -1;
			            }
			            case 6:
			            {
			                PlayerFacePlayer(playerid, Player[playerid][PendingHandshake]);
			                ApplyAnimationEx(playerid, "GANGS", "hndshkea", 4.0, 1, 1, 1, 0, 1000);
			                ApplyAnimationEx(Player[playerid][PendingHandshake], "GANGS", "hndshkea", 4.0, 1, 1, 1, 0, 1000);
							SendClientMessage(playerid, WHITE, "Handshake approved.");
							Player[playerid][PendingHandshake] = -1;
			            }
			            case 7:
			            {
			                PlayerFacePlayer(playerid, Player[playerid][PendingHandshake]);
			                ApplyAnimationEx(playerid, "GANGS", "hndshkfa", 4.0, 1, 1, 1, 0, 1000);
			                ApplyAnimationEx(Player[playerid][PendingHandshake], "GANGS", "hndshkfa", 4.0, 1, 1, 1, 0, 1000);
							SendClientMessage(playerid, WHITE, "Handshake approved.");
							Player[playerid][PendingHandshake] = -1;
			            }
			            case 8:
			            {
			                PlayerFacePlayer(playerid, Player[playerid][PendingHandshake]);
			                ApplyAnimationEx(playerid, "GANGS", "hndshkfa_swt", 4.0, 1, 1, 1, 0, 1000);
			                ApplyAnimationEx(Player[playerid][PendingHandshake], "GANGS", "hndshkfa_swt", 4.0, 1, 1, 1, 0, 1000);
							SendClientMessage(playerid, WHITE, "Handshake approved.");
							Player[playerid][PendingHandshake] = -1;
			            }
			            case 9:
			            {
			                PlayerFacePlayer(playerid, Player[playerid][PendingHandshake]);
			                ApplyAnimationEx(playerid, "GANGS", "prtial_hndshk_01", 4.0, 1, 1, 1, 0, 1000);
			                ApplyAnimationEx(Player[playerid][PendingHandshake], "GANGS", "prtial_hndshk_01", 4.0, 1, 1, 1, 0, 1000);
							SendClientMessage(playerid, WHITE, "Handshake approved.");
							Player[playerid][PendingHandshake] = -1;
			            }
					}
				}
				else
				{
				    SendClientMessage(playerid, WHITE, "You're too far away.");
				}
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You don't have a pending handshake request.");
		    }
		}
		else if(strcmp(Usage, "GiveCar", true) == 0)
		{
		    if(Player[playerid][PendingCarReceival] != -1)
		    {
		        if(IsPlayerConnectedEx(Player[playerid][PendingCarReceival]))
		        {
		            ShowPlayerDialog(playerid, 16, DIALOG_STYLE_LIST, "Slot to store in?", "Vehicle Slot 1\nVehicle Slot 2\nVehicle Slot 3\n", "Select", "Cancel");
		        }
		        else
		        {
		            Player[playerid][PendingCarReceival] = -1;
		            SendClientMessage(playerid, WHITE, "The deal is off, that player is no longer connected!");
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "There are no car trades to approve.");
		    }
		}
		else if(strcmp(Usage, "DivorceRequest", true) == 0)
		{
		    new res;
		    
		    for(new i = 0; i < MAX_PLAYERS; i++)
		    {
		        if(IsPlayerConnectedEx(i) && Player[i][PendingDivorce] == playerid && Player[i][PendingDivorce] != -1)
		        {
		            res = i;
		        }
		    }
		    
		    if(IsPlayerConnectedEx(res))
		    {
		        format(string, sizeof(string), "%s has accepted your divorce request, you are no longer married.", GetName(playerid));
		        SendClientMessage(res, WHITE, string);
		        format(Player[res][MarriedTo], 255, "Nobody");
		        format(Player[playerid][MarriedTo], 255, "Nobody");
				SendClientMessage(playerid, WHITE, "You are now divorced!");
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You don't have a pending divorce request.");
		    }
		}
		else if(strcmp(Usage, "GuardRequest", true) == 0)
		{
		    if(Player[playerid][GuardOffer] != -1)
		    {
		        if(Player[playerid][Money] >= Player[Player[playerid][GuardOffer]][GuardPrice])
		        {
		            Player[playerid][Money] -= Player[Player[playerid][GuardOffer]][GuardPrice];
		            Player[Player[playerid][GuardOffer]][Money] += Player[Player[playerid][GuardOffer]][GuardPrice];
		            SetPlayerArmour(playerid, 50);
		            format(string, sizeof(string), "You have earned $%d as they accepted the guard request.", Player[Player[playerid][GuardOffer]][GuardPrice]);
		            SendClientMessage(Player[playerid][GuardOffer], WHITE, string);
		            format(string, sizeof(string), "[BODYGUARD] %s has been guarded by %s for $%d.", GetName(playerid), GetName(Player[playerid][GuardOffer]), Player[Player[playerid][GuardOffer]][GuardPrice]);
		            MoneyLog(string);
		            SendClientMessage(playerid, WHITE, "You've accepted the request and your armour has been filled to 50 percent.");
					Player[Player[playerid][GuardOffer]][Guarding] = -1;
					Player[playerid][GuardOffer] = -1;
		            Player[playerid][GuardPrice] = 0;
		        }
		    }
		}
		else if(strcmp(Usage, "CopTicket", true) == 0)
		{
		    if(Player[playerid][BeingTicketed] > 0)
		    {
		        if(IsPlayerConnectedEx(Player[playerid][BeingTicketed]))
		        {
					format(string, sizeof(string), "[TICKET] %s has been ticketed by %s, for $%d.", GetName(playerid), GetName(Player[playerid][BeingTicketed]), Player[Player[playerid][BeingTicketed]][TicketPrice]);
					MoneyLog(string);
			        Player[playerid][Money] -= Player[Player[playerid][BeingTicketed]][TicketPrice];
			        Player[Player[playerid][BeingTicketed]][Money] += Player[Player[playerid][BeingTicketed]][TicketPrice];
					SendClientMessage(playerid, WHITE, "You have accepted the ticket.");
					SendClientMessage(Player[playerid][BeingTicketed], WHITE, "The other party has accepted the ticket.");
                    Player[Player[playerid][BeingTicketed]][TicketPrice] = 0;
                    Player[Player[playerid][BeingTicketed]][Ticketing] = -1;
					Player[playerid][BeingTicketed] = -1;
				}
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "You're not being ticketed.");
		    }
		}
		else if(strcmp(Usage, "GroupInvite", true) == 0)
		{
		    if(Player[playerid][PendingInvite] != 0)
		    {
		        Player[playerid][Group] = Player[playerid][PendingInvite];
		        Player[playerid][GroupRank] = 1;
				format(string, sizeof(string), "Congratulations! You are now a part of Group %s.", Groups[Player[playerid][Group]][GroupName]);
		        SendClientMessage(playerid, ANNOUNCEMENT, string);
		        SavePlayerData(playerid);
		        format(string, sizeof(string), "%s has joined the faction (invitation).", GetName(playerid));
		        GroupMessage(playerid, ANNOUNCEMENT, string);
		    }
		}
	}
	return 1;
}

command(safelocation, playerid, params[])
{
	#pragma unused params
	if(Player[playerid][GroupRank] >= 5 && Player[playerid][Group] != 0)
	{
        Groups[Player[playerid][Group]][SafeWorld] = GetPlayerVirtualWorld(playerid);
	    DestroyDynamicPickup(Groups[Player[playerid][Group]][SafePickupID]);
	    Groups[Player[playerid][Group]][SafeInteriorID] = GetPlayerInterior(playerid);
	    GetPlayerPos(playerid, Groups[Player[playerid][Group]][SafeX], Groups[Player[playerid][Group]][SafeY], Groups[Player[playerid][Group]][SafeZ]);
	    Groups[Player[playerid][Group]][SafePickupID] = CreateDynamicPickup(1239, 23, Groups[Player[playerid][Group]][SafeX], Groups[Player[playerid][Group]][SafeY], Groups[Player[playerid][Group]][SafeZ], Groups[Player[playerid][Group]][SafeWorld], -1, -1, 150.0);
	    SendClientMessage(playerid, WHITE, "Success! You have relocated your group Safe's location.");
	    SaveGroup(Player[playerid][Group]);
	}
	return 1;
}

command(noscar, playerid, params[])
{
	#pragma unused params
	if(Jobs[Player[playerid][Job]][JobType] == 2)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(IsPlayerInInvalidNosVehicle(playerid))
		    {
		        SendClientMessage(playerid, WHITE, "You can't modify this vehicle.");
		    }
		    else
		    {
		        if(Player[playerid][CarModDelay] == 0)
		        {
			    	AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
			    	SendClientMessage(playerid, WHITE, "You have applied NOS and were charged $1,000.");
			    	Player[playerid][Money] -= 1000;
			    	Player[playerid][CarModDelay] = 1;
		    	}
		    	else
		    	{
		    	    SendClientMessage(playerid, WHITE, "Wait 60 seconds before modding your vehicle!");
		    	}
		    }
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You're not in this vehicle.");
		}
	}
	return 1;
}

command(fixcar, playerid, params[])
{
	#pragma unused params
	if(Jobs[Player[playerid][Job]][JobType] == 2)
	{
		if(IsPlayerInAnyVehicle(playerid))
		{
		    if(Player[playerid][CarModDelay] == 0)
			{
			    if(GetPlayerSpeed(playerid, 0) == 0)
			    {
				    RepairVehicle(GetPlayerVehicleID(playerid));
				    SendClientMessage(playerid, WHITE, "You have fixed your vehicle.");
				    Player[playerid][CarModDelay] = 1;
			    }
			    else
			    {
			        SendClientMessage(playerid, WHITE, "You must stop your vehicle first.");
			    }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Please wait your reload time (60 seconds).");
		    }
		}
	}
	return 1;
}

command(ghqinterior, playerid, params[])
{
	new GroupID, string[128];
	if(sscanf(params, "d", GroupID))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /ghqinteror [group ID]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
		    format(string, sizeof(string), "Groups/Group_%d.ini", GroupID);
		    if(fexist(string))
		    {
			    Groups[GroupID][HQInteriorID] = GetPlayerInterior(playerid);
			    GetPlayerPos(playerid, Groups[GroupID][HQInteriorX], Groups[GroupID][HQInteriorY], Groups[GroupID][HQInteriorZ]);
			    format(string, sizeof(string), "You have successfully moved Group %s's interior.", Groups[GroupID][GroupName]);
			    SendClientMessage(playerid, WHITE, string);
                SaveGroup(GroupID);
		    }
		}
	}
	return 1;
}

command(ghqexterior, playerid, params[])
{
	new GroupID, string[128];
	if(sscanf(params, "d", GroupID))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /ghqexteror [group ID]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
		    format(string, sizeof(string), "Groups/Group_%d.ini", GroupID);
		    if(fexist(string))
		    {
		        DestroyDynamicPickup(Groups[GroupID][HQPickupID]);
			    Groups[GroupID][HQExteriorID] = GetPlayerInterior(playerid);
			    GetPlayerPos(playerid, Groups[GroupID][HQExteriorX], Groups[GroupID][HQExteriorY], Groups[GroupID][HQExteriorZ]);
			    format(string, sizeof(string), "You have successfully moved Group %s's exterior.", Groups[GroupID][GroupName]);
			    SendClientMessage(playerid, WHITE, string);
			    Groups[GroupID][HQPickupID] = CreateDynamicPickup(1239, 23, Groups[GroupID][HQExteriorX], Groups[GroupID][HQExteriorY], Groups[GroupID][HQExteriorZ], 0, -1, -1, 150.0);
                SaveGroup(GroupID);
		    }
		}
	}
	return 1;
}

command(createhouse, playerid, params[])
{
	new Usage[128], string[128];
	if(sscanf(params, "z", Usage))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /createhouse [usage]");
			SendClientMessage(playerid, GREY, "Usage: Interior, Exterior or Complete.");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
	        if(strcmp(Usage, "exterior", true) == 0)
    	    {
				Player[playerid][HouseExterior]++;
            	Player[playerid][hExtID] = GetPlayerInterior(playerid);
            	GetPlayerPos(playerid, Player[playerid][hExtX], Player[playerid][hExtY], Player[playerid][hExtZ]);
            	format(string, sizeof(string), "Exterior set! (X: %f, Y: %f, Z: %f).", Player[playerid][hExtX], Player[playerid][hExtY], Player[playerid][hExtZ]);
            	SendClientMessage(playerid, WHITE, string);
       		}
        	if(strcmp(Usage, "interior", true) == 0)
        	{
				Player[playerid][HouseInterior]++;
            	Player[playerid][hIntID] = GetPlayerInterior(playerid);
            	GetPlayerPos(playerid, Player[playerid][hIntX], Player[playerid][hIntY], Player[playerid][hIntZ]);
            	format(string, sizeof(string), "Interior set! (X: %f, Y: %f, Z: %f).", Player[playerid][hIntX], Player[playerid][hIntY], Player[playerid][hIntZ]);
            	SendClientMessage(playerid, WHITE, string);
        	}
        	if(strcmp(Usage, "complete", true) == 0)
        	{
            	if(Player[playerid][HouseInterior] > 0 || Player[playerid][HouseExterior] > 0)
            	{
                	new NewHouseID = SpawnedHouses+1;

                	if(NewHouseID >= MAX_HOUSES)
                	{
                    	SendClientMessage(playerid, WHITE, "Too many houses are currently spawned!");
                	}
                	else
                	{
	                	format(string, sizeof(string), "Houses/House_%d.ini", NewHouseID);

	                	if(!fexist(string))
	                	{
							Houses[NewHouseID][hInteriorID] = Player[playerid][hIntID];
							Houses[NewHouseID][hExteriorID] = Player[playerid][hExtID];
							Houses[NewHouseID][hInteriorX] = Player[playerid][hIntX];
							Houses[NewHouseID][hInteriorY] = Player[playerid][hIntY];
							Houses[NewHouseID][hInteriorZ] = Player[playerid][hIntZ];
							Houses[NewHouseID][hExteriorX] = Player[playerid][hExtX];
							Houses[NewHouseID][hExteriorY] = Player[playerid][hExtY];
							Houses[NewHouseID][hExteriorZ] = Player[playerid][hExtZ];
							format(Houses[NewHouseID][hOwner], 255, "Nobody");
							Houses[NewHouseID][LockStatus] = 0;
							Houses[NewHouseID][HPickupID] = CreateDynamicPickup(1273, 23, Houses[NewHouseID][hExteriorX], Houses[NewHouseID][hExteriorY], Houses[NewHouseID][hExteriorZ], 0, -1, -1, 150.0);

							dini_Create(string);
							dini_IntSet(string, "InteriorID", Houses[NewHouseID][hInteriorID]);
							dini_FloatSet(string, "InteriorX", Houses[NewHouseID][hInteriorX]);
							dini_FloatSet(string, "InteriorY", Houses[NewHouseID][hInteriorY]);
							dini_FloatSet(string, "InteriorZ", Houses[NewHouseID][hInteriorZ]);

							dini_IntSet(string, "HousePrice", 0);

							dini_IntSet(string, "ExteriorID", 0);
							dini_FloatSet(string, "ExteriorX", Houses[NewHouseID][hExteriorX]);
							dini_FloatSet(string, "ExteriorY", Houses[NewHouseID][hExteriorY]);
							dini_FloatSet(string, "ExteriorZ", Houses[NewHouseID][hExteriorZ]);

							dini_IntSet(string, "VaultMoney", -1);
							
							dini_IntSet(string, "HouseCocaine", -1);
							dini_IntSet(string, "HousePot", -1);
							dini_IntSet(string, "HouseMaterials", -1);

							dini_Set(string, "Owner", "Nobody");

							dini_IntSet(string, "LockStatus", Houses[NewHouseID][LockStatus]);

	                		Player[playerid][HouseExterior]--;
	                		Player[playerid][HouseInterior]--;

	                		SpawnedHouses++;
	                		SendClientMessage(playerid, NICESKY, "Successfully created house!");
	                		SetPlayerInterior(playerid, Houses[NewHouseID][hExteriorID]);
	                		SetPlayerPos(playerid, Houses[NewHouseID][hExteriorX], Houses[NewHouseID][hExteriorY], Houses[NewHouseID][hExteriorZ]);
	                	}
	            	    else
	        	        {
	    	                SendClientMessage(playerid, WHITE, "Error: File already exists!");
		                }
		            }
            	}
            	else
            	{
                	SendClientMessage(playerid, WHITE, "You must select an exterior and an interior first!");
            	}
            }
        }
	}
	return 1;
}

command(unban, playerid, params[])
{
	new Name[MAX_PLAYER_NAME], string[128], string2[128];
	if(sscanf(params, "z", Name))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /unban [name]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
		    format(string, sizeof(string), "Accounts/%s.ini", Name);
		    if(fexist(string))
		    {
		        if(dini_Isset(string, "Banned"))
		        {
		            if(dini_Int(string, "Banned") == 1)
		            {
		                dini_IntSet(string, "Banned", -1);
		                if(dini_Isset(string, "LastIP"))
		                {
		                	format(string2, sizeof(string2), "Now attempting to unban players' last known IP (%s).", dini_Get(string, "LastIP"));
		                	SendClientMessage(playerid, GREY, string2);
		                	format(string2, sizeof(string2), "unbanip %s", dini_Get(string, "LastIP"));
		                	SendRconCommand(string2);
		                	SendRconCommand("reloadbans");
		                	SendClientMessage(playerid, GREY, "IP unbanned and bans list reloaded.");
		                	format(string, sizeof(string), "WARNING: %s has unbanned Player %s.", Player[playerid][AdminName], Name);
                            AdminActionsLog(string);
							SendToAdmins(ADMINORANGE, string, 0);
							new hour, minute, second, day, year, month, string3[128];
						    gettime(hour, minute, second);
						    getdate(year, month, day);
							format(string3, sizeof(string3), "%s | %d/%d/%d | %d:%d | %s", Name, day, month, year, hour, minute, Player[playerid][AdminName]);
							UnbanLog(string3);
		                }
		                else
		                {
		                    SendClientMessage(playerid, WHITE, "Account unbanned, though the IP was not valid or even in the file. You'll have to manualy unban it.");
		                }
		                SendClientMessage(playerid, WHITE, "Account unbanned.");
		            }
		            else
		            {
		                if(dini_Int(string, "Banned") == 2 || dini_Int(string, "Banned") == 4)
		                {
		                    if(Player[playerid][AdminLevel] >= 5)
		                    {
				                dini_IntSet(string, "Banned", 0);

				                if(dini_Isset(string, "LastIP"))
				                {
				                    if(dini_Int(string, "AdminLevel") == -1)
				                    {
				                        dini_IntSet(string, "AdminLevel", 0);
				                        dini_Set(string, "Note", "You have been removed from the admin team.");
				                    }
				                    else
				                    {
				                        new ssadas[128];
				                        format(ssadas, sizeof(ssadas), "You have been unbanned by %s.", GetName(playerid));
				                        dini_Set(string, "Note", ssadas);
				                    }

				                	format(string2, sizeof(string2), "Now attempting to unban players' last known IP (%s).", dini_Get(string, "LastIP"));
				                	SendClientMessage(playerid, GREY, string2);
				                	format(string2, sizeof(string2), "unbanip %s", dini_Get(string, "LastIP"));
				                	SendRconCommand(string2);
				                	SendRconCommand("reloadbans");
				                	SendClientMessage(playerid, GREY, "IP unbanned and bans list reloaded.");
				                	format(string, sizeof(string), "WARNING: %s has unbanned Player %s.", Player[playerid][AdminName], Name);
                                    AdminActionsLog(string);
									SendToAdmins(ADMINORANGE, string, 0);
									new hour, minute, second, day, year, month, string3[128];
								    gettime(hour, minute, second);
								    getdate(year, month, day);
									format(string3, sizeof(string3), "%s | %d/%d/%d | %d:%d | %s", Name, day, month, year, hour, minute, Player[playerid][AdminName]);
									UnbanLog(string3);
				                }
				                else
				                {
				                    SendClientMessage(playerid, WHITE, "Account unbanned, though the IP was not valid or even in the file. You'll have to manualy unban it.");
				                }

				                SendClientMessage(playerid, WHITE, "Account unbanned.");
		                    }
		                    else
		                    {
				                SendClientMessage(playerid, WHITE, "That account has been permabanned.");
			                }
		                }
		            }
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Account not found.");
		    }
		    return 1;
		}
	}
	return 1;
}

command(vehname, playerid, params[])
{
	new value[128], results, strings[128];
	if(sscanf(params, "z", value))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /vehname [name]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
		    SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
	        for(new i; i < sizeof(VehicleNames); i++)
	        {
	            if(strfind(VehicleNames[i], value, true) != -1)
	            {
				    if(results == 0)
				    {
	                    format(strings, sizeof(strings), "%s", VehicleNames[i]);
					}
					else
					{
					    format(strings, sizeof(strings), "%s, %s", strings, VehicleNames[i]);
					}

					results++;

	   				if(strlen(strings) > 118)
		   			{
					   SendClientMessage(playerid, WHITE, "Too many results found! Please search more specified!");
					   SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
					   return 1;
					}
	            }
	        }

			if(results == 0)
			{
			    SendClientMessage(playerid, WHITE, "Sorry, no vehicles found.");
			    SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
			}
			else
			{
				SendClientMessage(playerid, WHITE, "Results:");
				SendClientMessage(playerid, WHITE, strings);
				SendClientMessage(playerid, GREY, "---------------------------------------------------------------------------------------------------------------------------------");
			}
		}
	}
	return 1;
}

command(get, playerid, params[])
{
	new id, string[128], Float: ToX, Float: ToY, Float: ToZ;
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /get [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 1)
		{
		    if(IsPlayerConnectedEx(id))
		    {
		        if(Spectator[id][SpecSpectatingPlayer] != -1)
		        {
		            SendClientMessage(playerid, WHITE, "You can't teleport a spectator.");
		        }
		        else if(Player[id][Hospitalized] != 0 && Player[id][Hospitalized] != -1)
		        {
		            SendClientMessage(playerid, WHITE, "You can't teleport a hospitalized player.");
		        }
		        else if(Player[id][Tutorial] != 0)
		        {
		            SendClientMessage(playerid, WHITE, "You can't teleport a player in the tutorial.");
		        }
		        else if(Player[id][PrisonDuration] >= 1)
		        {
		            SendClientMessage(playerid, WHITE, "You can't teleport a prisoned / jailed player.");
		        }
		        else if(Player[id][AdminLevel] >= Player[playerid][AdminLevel])
		        {
		            SendClientMessage(playerid, WHITE, "That person is a higher ranked admin than you, request them to teleport to you.");
		        }
				else if (GetPlayerState(id) == 2)
				{
				    if(Player[id][ActiveReport] >= 1)
				    {
				        SendClientMessage(playerid, RED, "This person has an active report. If you're taking it, please don't forget to use /acceptreport");
				    }
				
					GetPlayerPos(playerid, ToX, ToY, ToZ);
					SetPlayerInterior(id, GetPlayerInterior(playerid));
					SetPlayerVirtualWorld(id, GetPlayerVirtualWorld(playerid));
					new tmpcar = GetPlayerVehicleID(id);
					SetVehiclePos(tmpcar, ToX, ToY+2, ToZ);
					SetVehicleVirtualWorld(tmpcar, GetPlayerVirtualWorld(playerid));
					LinkVehicleToInterior(GetPlayerVehicleID(id), GetPlayerInterior(playerid));
					SetVehicleVirtualWorld(GetPlayerVehicleID(id), GetPlayerVirtualWorld(playerid));
	    			format(string, sizeof(string), "%s has teleported you over to him / her.", GetName(playerid));
		    		SendClientMessage(id, WHITE, string);
					format(string, sizeof(string), "You have teleported %s to you.", GetName(id));
					SendClientMessage(playerid, WHITE, string);
				}
				else
				{
				    if(Player[id][ActiveReport] >= 1)
				    {
				        SendClientMessage(playerid, RED, "This person has an active report. If you're taking it, please don't forget to use /acceptreport");
				    }
				
					GetPlayerPos(playerid, ToX, ToY, ToZ);
					SetPlayerInterior(id, GetPlayerInterior(playerid));
					SetPlayerVirtualWorld(id, GetPlayerVirtualWorld(playerid));
					SetPlayerPos(id, ToX, ToY+2, ToZ);
	    			format(string, sizeof(string), "%s has teleported you over to him / her.", GetName(playerid));
		    		SendClientMessage(id, WHITE, string);
					format(string, sizeof(string), "You have teleported %s to you.", GetName(id));
					SendClientMessage(playerid, WHITE, string);
				}
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		    }
		}
	}
	return 1;
}

command(gotopoint, playerid, params[])
{
	new Interior, Float: X, Float: Y, Float: Z;
	if(sscanf(params, "dfff", Interior, X, Y, Z))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /gotopoint [Interior ID] [x point] [y point] [z point]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 1)
		{
		    SetPlayerPos(playerid, X, Y, Z);
		    SetPlayerInterior(playerid, Interior);
		    SendClientMessage(playerid, WHITE, "You have been teleported to the defined position.");
		}
	}
	return 1;
}

command(spawncar, playerid, params[])
{
	new carid, string[128], Float: CarToX, Float: CarToY, Float: CarToZ, physical_car_id;
	if(sscanf(params, "d", carid))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /spawncar [vehicleid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 3)
		{
		    if(CarCount < MAX_VEHICLES)
		    {
				if(carid < 400 || carid > 611)
				{
					SendClientMessage(playerid, WHITE, "Valid car IDs start from 400, ending at 611.");
				    return 1;
				}
				
				GetPlayerPos(playerid, CarToX, CarToY, CarToZ);
				physical_car_id = CreateVehicle(carid, CarToX, CarToY+4, CarToZ, 90, -1, -1, -1);
				
				format(string, sizeof(string), "You have spawned model ID %d. If you wish to save this, type /savecar.", carid);
				SendClientMessage(playerid, WHITE, string);
				
				AdminSpawned[SpawnedVehicles] = physical_car_id;
				SpawnedVehicles++;
				
				PutPlayerInVehicle(playerid, physical_car_id, 0);
				LinkVehicleToInterior(physical_car_id, GetPlayerInterior(playerid));
				SetVehicleVirtualWorld(physical_car_id, GetPlayerVirtualWorld(playerid));
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "Despawn the current spawned vehicles before spawning any more (or attempting to do so).");
		    }
		}
	}
	return 1;
}

command(goto, playerid, params[])
{
	new id, string[128], Float: ToX, Float: ToY, Float: ToZ;
	if(sscanf(params, "u", id))
	{
	    if(Player[playerid][AdminLevel] >= 1)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /goto [playerid]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 1)
		{
		    if(IsPlayerConnectedEx(id))
		    {
		        if(Spectator[id][SpecSpectatingPlayer] != -1)
		        {
		            SendClientMessage(playerid, WHITE, "You can't teleport to a spectator.");
		        }
		        else if(Player[id][Hospitalized] != 0 && Player[id][Hospitalized] != -1)
		        {
		            SendClientMessage(playerid, WHITE, "You can't teleport to a hospitalized player.");
		        }
		        else if(Player[id][Tutorial] != 0)
		        {
		            SendClientMessage(playerid, WHITE, "You can't teleport to a player in the tutorial.");
		        }
				else
				{
				    if(Player[id][ActiveReport] >= 1)
				    {
				        SendClientMessage(playerid, RED, "This person has an active report. If you're taking it, please don't forget to use /acceptreport");
				    }
				    
					GetPlayerPos(id, ToX, ToY, ToZ);
					SetPlayerPosEx(playerid, ToX, ToY, ToZ, GetPlayerInterior(id), GetPlayerVirtualWorld(id));
					format(string, sizeof(string), "You have teleported to %s.", GetName(id));
					SendClientMessage(playerid, WHITE, string);
				}
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		    }
		}
	}
	return 1;
}

command(sellfish, playerid, params[])
{
	new fish, string[128];
	if(sscanf(params, "d", fish))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /sellfish [amount]");
	}
	else
	{
	    if(Businesses[Player[playerid][InBusiness]][bType] == 1)
	    {
		    if(fish >= Player[playerid][CollectedFish])
		    {
		        SendClientMessage(playerid, WHITE, "You don't have that many fish.");
		    }
		    else
		    {
		        new Calculation = fish*6;
		        Player[playerid][Money] += Calculation;
		        format(string, sizeof(string), "You have earned $%d for %d fish.", Calculation, fish);
		        SendClientMessage(playerid, WHITE, string);
		        Player[playerid][CollectedFish] -= fish;
		    }
	    }
	}
	return 1;
}

command(fish, playerid, params[])
{
	#pragma unused params
	
	new string[128];
	
	if(Player[playerid][CantFish] == 0 || Player[playerid][FishAttempts] < 8)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 30.0, FishX, FishY, FishZ))
	    {
			Player[playerid][FishAttempts]++;
			
			new rand = random(10);
			
			switch(rand)
			{
			    case 0, 1, 3:
			    {
			        format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetName(playerid));
			        NearByMessage(playerid, NICESKY, string);
			        SendClientMessage(playerid, WHITE, "You have caught a Cod!");
			        Player[playerid][CollectedFish]++;
			    }
			    case 5, 7, 9:
			    {
			        format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetName(playerid));
			        NearByMessage(playerid, NICESKY, string);
			        SendClientMessage(playerid, WHITE, "You have caught a Carp!");
			        Player[playerid][CollectedFish]++;
			    }
			    case 2, 4:
			    {
			        format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetName(playerid));
			        NearByMessage(playerid, NICESKY, string);
			        SendClientMessage(playerid, WHITE, "You have caught a money bag!");
			        Player[playerid][Money] += 500;
			        format(string, sizeof(string), "* %s grabs ahold of the money bag, and opens it (which contains $500).", GetName(playerid));
			        NearByMessage(playerid, NICESKY, string);
			    }
			    case 6, 8:
			    {
			        format(string, sizeof(string), "* %s has cast their fishing rod, pulling it back.", GetName(playerid));
			        NearByMessage(playerid, NICESKY, string);
			        SendClientMessage(playerid, WHITE, "You have caught a bicycle wheel.");
			    }
			}
			if(Player[playerid][FishAttempts] >= 8)
			{
			    Player[playerid][CantFish] = 1;
			    SendClientMessage(playerid, WHITE, "You've caught enough for now, with your current fish, you can deliver them to a 24/7 using /sellfish.");
			}
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "You're not at the fishing pier!");
		}
	}
	else
	{
	    if(Player[playerid][CantFish] == 0 && Player[playerid][FishAttempts] >= 8)
	    {
	        Player[playerid][CantFish] = 1;
	        SendClientMessage(playerid, WHITE, "You have caught enough fish for now, please wait 15 minutes.");
	    }
	    else
	    {
	    	SendClientMessage(playerid, WHITE, "Please wait your reload time (15 minutes).");
	    }
	}
	return 1;
}

command(changeadminlevel, playerid, params[])
{
	new id, level, string[128];
	if(sscanf(params, "ud", id, level))
	{
	    if(Player[playerid][AdminLevel] >= 6)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /changeadminlevel [playerid] [new level]");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 6)
	    {
	        if(Player[id][AdminLevel] == 0 && level >= 1)
	        {
                if(level >= Player[playerid][AdminLevel])
                {
                    SendClientMessage(playerid, WHITE, "You can only hire an admin to a lower level.");
                }
                else
                {
	                Player[id][AdminLevel] = level;
			        format(string, sizeof(string), "%s has been hired to admin level %d by %s.", GetName(id), level, GetName(playerid));
			        SendToAdmins(ADMINORANGE, string, 0);
			        StatLog(string);
			        
				    if(Player[id][AdminPIN] == 0)
				    {
				        TogglePlayerControllable(id, false);
				        SendClientMessage(id, WHITE, "You don't have an admin PIN set. Please now set one, it must be numeric only and 6 characters in length.");
				        ShowPlayerDialog(id, 9843, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your desired PIN.", "Done", "Cancel");
				    }
				    else
				    {
				        Player[id][PINUnauthedTime] = 1;
				        SendClientMessage(id, WHITE, "You have 10 seconds to login before you are auto-kicked.");
				        TogglePlayerControllable(id, false);
						ShowPlayerDialog(id, 9842, DIALOG_STYLE_INPUT, "Authentication (Admin PIN)", "Please enter your additional admin PIN to continue.", "Login", "Cancel");
					}
		        }
            }
	        else if(level >= Player[playerid][AdminLevel])
    	    {
        	    SendClientMessage(playerid, WHITE, "You're unable to execute this action.");
        	}
        	else if(level >= Player[id][AdminLevel])
	    	{
	        	format(string, sizeof(string), "%s has been promoted to admin level %d by %s.", GetName(id), level, GetName(playerid));
	        	SendToAdmins(ADMINORANGE, string, 0);
	        	Player[id][AdminLevel] = level;
		        StatLog(string);
		    }
		    else if(level < 1)
		    {
		        format(string, sizeof(string), "%s has been removed from the admin team by %s.", GetName(id), GetName(playerid));
		        SendToAdmins(ADMINORANGE, string, 0);
		        Player[id][AdminLevel] = level;
		        Player[id][AdminDuty] = 0;
		        SetPlayerName(id, Player[id][NormalName]);
		        StatLog(string);
		    }
		    else if(level < Player[id][AdminLevel])
		    {
		        format(string, sizeof(string), "%s has been demoted to admin level %d by %s.", GetName(id), level, GetName(playerid));
		        SendToAdmins(ADMINORANGE, string, 0);
		        Player[id][AdminLevel] = level;
		        StatLog(string);
		    }
		}
    }
	return 1;
}

command(permaban, playerid, params[])
{
	new id, reason[128], string[128], ServerURL[128];
	if(sscanf(params, "us", id, reason))
	{
	    if(Player[playerid][AdminLevel] >= 4)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /permaban [playerid] [reason]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 4)
		{
		    if(IsPlayerConnected(id) && id != playerid)
		    {
		        if(Player[id][AdminLevel] > Player[playerid][AdminLevel])
		        {
		            SendClientMessage(playerid, WHITE, "You do not have the authority to do that (higher rank).");
		            return 1;
		        }
		        
			    new hour, minute, second, day, year, month;
		        gettime(hour, minute, second);
		        getdate(year, month, day);
	            new IP[21];
	    		GetPlayerIp(id, IP, sizeof(IP));
				format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | %s (Permabanned) | %s", day, month, year, hour, minute, IP, GetName(id), reason, Player[playerid][AdminName]);
				BanLog(string);
				
		        if(Player[id][AdminLevel] < 1)
		        {
		        	Player[playerid][AdminActions]++;
		            SendClientMessage(playerid, WHITE, "You have earned an admin action!");
		        }

		        GetServerVarAsString("weburl", ServerURL, sizeof(ServerURL));
		        format(string, sizeof(string), "Ban: %s has been permanently banned by %s, reason: %s", GetName(id), Player[playerid][AdminName], reason);
		        SendClientMessageToAll(LIGHTRED, string);
		        AdminActionsLog(string);
		        format(string, sizeof(string), "You have been banned for %s. Only an admin with FTP access can unban you.", reason);
		        SendClientMessage(id, GREY, string);
		        Player[id][Banned] = 2;
		        RangeBan(id);
		        Ban(id);
		        SendRconCommand("reloadbans");
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in or is you.");
		        return 1;
		    }
		}
	}
	return 1;
}

command(propose, playerid, params[])
{
	new id, string[128];
	if(sscanf(params, "u", id))
	{
		SendClientMessage(playerid, WHITE, "SYNTAX: /propose [playerid]");
	}
	else
	{
	    if(IsPlayerConnectedEx(id))
	    {
	        if(strcmp(Player[id][MarriedTo], "Nobody", true) == 0)
	        {
	            if(Businesses[Player[playerid][InBusiness]][bType] == 9 && Businesses[Player[id][InBusiness]][bType] == 9)
	            {
	                if(GetDistanceBetweenPlayers(playerid, id) < 7)
	                {
	                    if(Player[playerid][Money] >= 10000)
	                    {
				            format(string, sizeof(string), "You are proposing to %s! Wait for them to approve/deny your proposal.", GetName(id));
				            SendClientMessage(playerid, WHITE, string);
				            format(string, sizeof(string), "%s is proposing to you! Type 'Yes' (and only that) in character to accept their proposal.", GetName(playerid));
				            SendClientMessage(id, WHITE, string);
				            Player[id][PendingProposal] = playerid;
			            }
			            else
			            {
			                SendClientMessage(playerid, WHITE, "You need at least $10,000 to pay for the essential church services.");
			            }
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "You're too far away!");
		            }
	            }
	            else
	            {
	                SendClientMessage(playerid, WHITE, "You both have to be in a church to do this.");
	            }
	        }
	        else
	        {
	        	SendClientMessage(playerid, WHITE, "That person is already married.");
	        }
	    }
		else
		{
		    SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in or is you.");
		}
	}
	return 1;
}

command(divorce, playerid, params[])
{
	#pragma unused params
	if(strlen(Player[playerid][MarriedTo]) < 1)
	{
	    SendClientMessage(playerid, WHITE, "You're not married.");
	}
	else
	{
		new string[128], tmp = GetPlayerID(Player[playerid][MarriedTo]);
		if(IsPlayerConnectedEx(tmp))
		{
		    format(string, sizeof(string), "%s is requesting a divorce (type /approve divorcerequest to proceed).", GetName(playerid));
		    SendClientMessage(tmp, WHITE, string);
		    format(string, sizeof(string), "You have requested to divorce %s.", GetName(tmp));
		    SendClientMessage(playerid, WHITE, string);
		    Player[playerid][PendingDivorce] = tmp;
		}
		else
		{
		    SendClientMessage(playerid, WHITE, "Your bride must submit to the divorce, and they aren't online.");
		}
	}
	return 1;
}

command(deleteaccount, playerid, params[])
{
	new Name[128], string[128], string2[128];
	if(sscanf(params, "z", Name))
	{
	    if(Player[playerid][AdminLevel] >= 6)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /deleteaccount [name]");
			SendClientMessage(playerid, GREY, "NOTE: This command is CaSe SeNsItIvE.");
		}
	}
	else
	{
	    if(Player[playerid][AdminLevel] >= 6)
	    {
	        if(strlen(Name) >= 3 && strlen(Name) < MAX_PLAYER_NAME+1)
	        {
		        format(string2, sizeof(string2), "Accounts/%s.ini", Name);
		        if(fexist(string2))
		        {
		            if(dini_Int(string, "AdminLevel") < Player[playerid][AdminLevel])
		            {
		                dini_IntSet(string, "Banned", 3);
		                fremove(string2);
		                format(string, sizeof(string), "Account %s (%s) has been deleted / locked.", Name, string2);
		                SendClientMessage(playerid, WHITE, string);
		                format(string, sizeof(string), "WARNING: %s has deleted / locked %s's account.", GetName(playerid), Name);
		                SendToAdmins(ADMINORANGE, string, 1);
		            }
		            else
		            {
		                SendClientMessage(playerid, WHITE, "You can't delete a higher level admins' account.");
		            }
		    	}
				else
				{
				    SendClientMessage(playerid, WHITE, "Account not found.");
				}
			}
		}
	}
}

command(sban, playerid, params[])
{
	new id, reason[128], string[128];
	if(sscanf(params, "uz", id, reason))
	{
	    if(Player[playerid][AdminLevel] >= 5)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /sban [playerid] [reason]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 5)
		{
		    if(IsPlayerConnected(id))
		    {
		        if(Player[id][AdminLevel] >= Player[playerid][AdminLevel])
		        {
		            SendClientMessage(playerid, WHITE, "You do not have the authority to do that (higher rank, or the same).");
		        }
				else
				{
				    if(strlen(reason) >= 1)
				    {
					    new hour, minute, second, day, year, month;
				        gettime(hour, minute, second);
				        getdate(year, month, day);
				        
			            new IP[21];
			    		GetPlayerIp(id, IP, sizeof(IP));
						format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | %s (SILENT) | %s", day, month, year, hour, minute, IP, GetName(id), reason, Player[playerid][AdminName]);
						BanLog(string);

				        if(Player[id][AdminLevel] < 1)
				        {
				        	Player[playerid][AdminActions]++;
                            SendClientMessage(playerid, WHITE, "You have earned an admin action!");
				        }

				        format(string, sizeof(string), "WARNING: %s has been silently banned by %s, defined reason: %s", GetName(id), Player[playerid][AdminName], reason);
						SendToAdmins(ADMINORANGE, string, 0);
				        Player[id][Banned] = 1;
				        Ban(id);
				        AdminActionsLog(string);
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "SYNTAX: /sban [playerid] [reason]");
			        }
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		        return 1;
		    }
		}
	}
	return 1;
}

command(ban, playerid, params[])
{
	new id, reason[128], string[128], ServerURL[128];
	if(sscanf(params, "uz", id, reason))
	{
	    if(Player[playerid][AdminLevel] >= 2)
	    {
			SendClientMessage(playerid, WHITE, "SYNTAX: /ban [playerid] [reason]");
		}
	}
	else
	{
		if(Player[playerid][AdminLevel] >= 2)
		{
		    if(IsPlayerConnectedEx(id))
		    {
		        if(Player[id][AdminLevel] >= Player[playerid][AdminLevel])
		        {
		            SendClientMessage(playerid, WHITE, "You do not have the authority to do that (higher rank, or the same).");
		        }
		        else
		        {
				    if(strlen(reason) >= 1)
				    {
					    new hour, minute, second, day, year, month;
				        gettime(hour, minute, second);
				        getdate(year, month, day);
				        
			            new IP[21];
			            
			    		GetPlayerIp(id, IP, sizeof(IP));
						format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | %s | %s", day, month, year, hour, minute, IP, GetName(id), reason, Player[playerid][AdminName]);
						BanLog(string);

				        if(Player[id][AdminLevel] < 1)
				        {
				        	Player[playerid][AdminActions]++;
				        	SendClientMessage(playerid, WHITE, "You have earned an admin action!");
				        }

				        GetServerVarAsString("weburl", ServerURL, sizeof(ServerURL));
				        format(string, sizeof(string), "Ban: %s has been banned by %s, reason: %s", GetName(id), Player[playerid][AdminName], reason);
				        SendClientMessageToAll(LIGHTRED, string);
				        AdminActionsLog(string);
				        format(string, sizeof(string), "You have been banned for %s. If you wish to appeal your ban, go to %s.", reason, ServerURL);
				        SendClientMessage(id, GREY, string);
				        Player[id][Banned] = 1;
				        Ban(id);
			        }
			        else
			        {
			            SendClientMessage(playerid, WHITE, "SYNTAX: /ban [playerid] [reason]");
			        }
		        }
		    }
		    else
		    {
		        SendClientMessage(playerid, WHITE, "That player is not connected or isn't logged in.");
		        return 1;
		    }
		}
	}
	return 1;
}
//--------------------------------------------------------------------------------------------------

public RandomEx(min, max)
{
	return random(max - min) + min;
}

public IsSeatOccupied(vehicleid, seatid)
{
	new occurrence = 0;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(IsPlayerConnectedEx(i))
	    {
	        if(IsPlayerInAnyVehicle(i))
	        {
	            if(GetPlayerVehicleID(i) == vehicleid)
	            {
	                if(GetPlayerVehicleSeat(i) == seatid)
	                {
	                    occurrence++;
	                }
	            }
	        }
	    }
	}
	return occurrence;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	if (GetPlayerSurfingVehicleID(playerid) == vehicleid)
	{
		ClearAnimations(playerid);
	}

	new model = GetVehicleModel(vehicleid);
	if(model == 596)
	{
	    Player[playerid][GotInCopCar]++;
	    ResetPlayerWeapons(playerid);
	    GivePlayerSavedWeapons(playerid);
	}
	return 1;
}

stock SpectatorRefresh(playerid, otherplayer)
{
	if(Player[playerid][AdminLevel] >= 1)
	{
		if(otherplayer == INVALID_PLAYER_ID)
		{
		    SetPlayerInterior(playerid, Spectator[playerid][SpecPlayerInterior]);
		    SetPlayerPos(playerid, Spectator[playerid][SpecPlayerX], Spectator[playerid][SpecPlayerY], Spectator[playerid][SpecPlayerZ]);
		    SetPlayerVirtualWorld(playerid, Spectator[playerid][SpecPlayerWorld]);
		    SetPlayerFacingAngle(playerid, Spectator[playerid][SpecPlayerAngle]);

	    	SetCameraBehindPlayer(playerid);

	    	Spectator[playerid][SpecSpectatingPlayer] = -1;
	    	Spectator[playerid][SpecSpectatingState] = -1;

	    	SetPlayerSkin(playerid, Player[playerid][LastSkin]);
	    	TogglePlayerControllable(playerid, true);

	    	SendClientMessage(playerid, WHITE, "You are no longer spectating; the specified player ID is unavailable.");

		}
		else
		{
		    if(GetPlayerInterior(playerid) != GetPlayerInterior(otherplayer))
		    {
				SetPlayerInterior(playerid, GetPlayerInterior(otherplayer));
				Spectator[playerid][SpecSpectatingState] = 0;
			}

		    if(GetPlayerVirtualWorld(playerid) != GetPlayerVirtualWorld(otherplayer))
		    {
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(otherplayer));
				Spectator[playerid][SpecSpectatingState] = 0;
			}

	    	if(IsPlayerInAnyVehicle(otherplayer) == 1 && Spectator[playerid][SpecSpectatingState] != 1)
			{
				PlayerSpectateVehicle(playerid, GetPlayerVehicleID(otherplayer));
				Spectator[playerid][SpecSpectatingState] = 1;
			}
	    	else if(!IsPlayerInAnyVehicle(otherplayer) && Spectator[playerid][SpecSpectatingState] != 2)
			{
				PlayerSpectatePlayer(playerid, otherplayer);
				Spectator[playerid][SpecSpectatingState] = 2;
			}
		}
	}
}

public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	if(Player[playerid][AdminLevel] >= 1)
	{
	    new Float: health, Float: armour, healthf, armourf, string[128];
		if(Spectator[playerid][SpecSpectatingPlayer] == -1)
		{
			GetPlayerPos(playerid, Spectator[playerid][SpecPlayerX], Spectator[playerid][SpecPlayerY], Spectator[playerid][SpecPlayerZ]);
			GetPlayerFacingAngle(playerid, Spectator[playerid][SpecPlayerAngle]);
			Spectator[playerid][SpecPlayerWorld] = GetPlayerVirtualWorld(playerid);
			Spectator[playerid][SpecPlayerInterior] = GetPlayerInterior(playerid);
		}
		
		if(Player[playerid][PhoneStat] == 1)
		{
    		Player[playerid][PhoneStat] = 0;
    	}

	    format(string, sizeof(string), "You are now spectating player %s.", GetName(clickedplayerid));
	    SendClientMessage(playerid, GREY, string);
	    GetPlayerHealth(clickedplayerid, health);
		GetPlayerArmour(clickedplayerid, armour);
		healthf = floatround(health, floatround_ceil);
		armourf = floatround(armour, floatround_ceil);

	    format(string, sizeof(string), "Health: %d | Armour: %d | Money: $%d", healthf, armourf, Player[clickedplayerid][Money]);
	    SendClientMessage(playerid, WHITE, string);
	    Spectator[playerid][SpecSpectatingPlayer] = clickedplayerid;
	    TogglePlayerSpectating(playerid, true);

	    if(IsPlayerInAnyVehicle(clickedplayerid))
		{
		    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(clickedplayerid));
		    Spectator[playerid][SpecSpectatingState] = 1;
		}
		else
		{
			PlayerSpectatePlayer(playerid, clickedplayerid);
			Spectator[playerid][SpecSpectatingState] = 2;
		}

	    Spectator[playerid][SpecSpectatingPlayer] = clickedplayerid;
	    SpectatorRefresh(playerid, clickedplayerid);
	}
	else
	{
	    new string[128];
	    format(string, sizeof(string), "You have clicked %s (ID: %d).", GetName(clickedplayerid), clickedplayerid);
	    SendClientMessage(playerid, WHITE, string);
	}
	
	return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
	if(newstate == PLAYER_STATE_DRIVER && oldstate == PLAYER_STATE_ONFOOT)
	{
	    new string[128];
	    new PlayerVehicle = GetVehicleFileID(GetPlayerVehicleID(playerid));
		if(Vehicles[PlayerVehicle][CarGroup] != 0 && Vehicles[PlayerVehicle][CarGroup] != Player[playerid][Group])
		{
		    format(string, sizeof(string), "This vehicle is only usable by %s.", Groups[Vehicles[PlayerVehicle][CarGroup]][GroupName]);
		    SendClientMessage(playerid, WHITE, string);
		    RemovePlayerFromVehicle(playerid);
		}
		
		new vehicleid = GetPlayerVehicleID(playerid);
		
		if(IsAnOwnedCar(vehicleid))
		{
		    if(Player[playerid][AdminLevel] < 1)
		    {
			    for(new i = 0; i < MAX_PLAYERS; i++)
			    {
			        if(Player[i][LockedCar] == 1 && Player[i][CarLinkID] == vehicleid)
			        {
			            SendClientMessage(playerid, WHITE, "This vehicle is locked.");
			            RemovePlayerFromVehicle(i);
			        }
			        if(Player[i][LockedCar2] == 1 && Player[i][Car2LinkID] == vehicleid)
			        {
			            SendClientMessage(playerid, WHITE, "This vehicle is locked.");
			            RemovePlayerFromVehicle(i);
			        }
			        if(Player[i][LockedCar3] == 1 && Player[i][Car3LinkID] == vehicleid)
			        {
			            SendClientMessage(playerid, WHITE, "This vehicle is locked.");
			            RemovePlayerFromVehicle(i);
			        }
			    }
		    }
		}

	    Player[playerid][LastCarID] = GetPlayerVehicleID(playerid);
	    new VehID = GetPlayerVehicleID(playerid), VehModel = GetVehicleModel(VehID);
	    
	    if(VehModel == 596)
	    {
	        Player[playerid][GotInCopCar]++;
	        ResetPlayerWeapons(playerid);
	        GivePlayerSavedWeapons(playerid);
	    }
	    else if(VehModel == 427)
	    {
	        if(Groups[Player[playerid][Group]][CommandTypes] != 1)
	        {
	        	SetPlayerArmour(playerid, 0);
	        }
	        else
	        {
	            SendClientMessage(playerid, WHITE, "You have collected some armour from the Enforcer.");
	        }
	    }
	    
	    if(Player[playerid][Cuffed] >= 1)
	    {
	        RemovePlayerFromVehicle(playerid);
	        TogglePlayerControllable(playerid, false);
	        SendClientMessage(playerid, WHITE, "You may not execute that action right now.");
	    }
	}
	else if(oldstate == PLAYER_STATE_DRIVER && newstate == PLAYER_STATE_ONFOOT)
	{
	    if(Player[playerid][GotInCopCar] >= 1)
	    {
	        ResetPlayerWeapons(playerid);
	        GivePlayerSavedWeapons(playerid);
	        Player[playerid][GotInCopCar] = 0;
	    }
	    
	    if(Player[playerid][ModShop] == 1)
	    {
	        Player[playerid][ModShop] = 0;
	        SetPlayerPos(playerid, SpawnX, SpawnY, SpawnZ);
	        SetPlayerVirtualWorld(playerid, SpawnWorld);
	        SetPlayerInterior(playerid, SpawnInt);
	        SetPlayerFacingAngle(playerid, 0);
	    }
	}
	return 1;
}

public RefreshMaterials(playerid)
{
	Player[playerid][CompleteRun] = 0;
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{
	if(Player[playerid][Map] >= 1)
	{
	    SendClientMessage(playerid, WHITE, "You have reached your desired destination.");
	    Player[playerid][Map] = 0;
	    Player[playerid][Checkpoint] = 0;
	    DisablePlayerCheckpoint(playerid);
	    return 1;
	}
	else
	{
	    if(Player[playerid][Checkpoint] == 69)
	    {
	        DisablePlayerCheckpoint(playerid);
	        SendClientMessage(playerid, WHITE, "Checkpoint reached!");
	        Player[playerid][Checkpoint] = 0;
	    }
	    else
	    {
		    if(Player[playerid][AttendingBackupCall] != -1)
		    {
		        Player[playerid][Checkpoint] = 0;
		        Player[playerid][AttendingBackupCall] = -1;
		        SendClientMessage(playerid, WHITE, "Backup checkpoint reached.");
		        DisablePlayerCheckpoint(playerid);
		        return 1;
		    }

			if(Player[playerid][Harvesting] >= 1)
			{
			    switch(Player[playerid][Harvesting])
			    {
			        case 1:
			        {
			            SendClientMessage(playerid, WHITE, "You have reached the first checkpoint! You have 4 remaining.");
		                SetPlayerCheckpoint(playerid, Harvest2X, Harvest2Y, Harvest2Z, 10.0);
		                Player[playerid][Harvesting] = 2;
					}
			        case 2:
			        {
			            SendClientMessage(playerid, WHITE, "You have reached the second checkpoint! You have 3 remaining.");
		                SetPlayerCheckpoint(playerid, Harvest3X, Harvest3Y, Harvest3Z, 10.0);
		                Player[playerid][Harvesting] = 3;
					}
			        case 3:
			        {
			            SendClientMessage(playerid, WHITE, "You have reached the third checkpoint! You have 2 remaining.");
		                SetPlayerCheckpoint(playerid, Harvest4X, Harvest4Y, Harvest4Z, 10.0);
		                Player[playerid][Harvesting] = 4;
					}
			        case 4:
			        {
			            SendClientMessage(playerid, WHITE, "You have reached the forth checkpoint! You have 1 remaining.");
		                SetPlayerCheckpoint(playerid, Harvest5X, Harvest5Y, Harvest5Z, 10.0);
		                Player[playerid][Harvesting] = 5;
					}
			        case 5:
			        {
			            SendClientMessage(playerid, WHITE, "You have reached the fifth checkpoint! You have 0 remaining.");
						DisablePlayerCheckpoint(playerid);
						Player[playerid][Checkpoint] = 0;
		                Player[playerid][Harvesting] = 7;
		                SendClientMessage(playerid, WHITE, "Now you have the drugs, please deliver them to a chemist / pharmacy business (use /deliver).");
					}
			    }
			}

			if(Player[playerid][FindingHouse] >= 1)
			{
				Player[playerid][Checkpoint] = 0;
				Player[playerid][FindingHouse] = 0;
				DisablePlayerCheckpoint(playerid);
				SendClientMessage(playerid, WHITE, "You have reached your desired destination.");
			}

			if(Player[playerid][Detecting] >= 1)
			{
			    DisablePlayerCheckpoint(playerid);
			    SendClientMessage(playerid, WHITE, "You have reached the checkpoint. You must now wait 30 seconds before you can /find again.");
			    Player[playerid][Detecting] = 0;
			    Player[playerid][Checkpoint] = 0;
			    Player[playerid][DetectiveCooldown] = 1;
			}

			if(Player[playerid][FindingCar] == 1)
			{
			    DisablePlayerCheckpoint(playerid);
			    Player[playerid][FindingCar] = 0;
			    Player[playerid][Checkpoint] = 0;
			    SendClientMessage(playerid, WHITE, "You've reached the checkpoint.");
			}

			if(IsPlayerInRangeOfPoint(playerid, 3.0, DropCarX, DropCarY, DropCarZ))
			{
			    if(IsPlayerInAnyVehicle(playerid))
			    {
			        if(IsAnOwnedCar(GetPlayerVehicleID(playerid)))
			        {
			            SendClientMessage(playerid, WHITE, "You're unable to drop your owned vehicle.");
			        }
			        else
			        {
				        new string[71], playerscar, value = 15000+random(1200);
				        Player[playerid][Money] += value;
				        format(string, sizeof(string), "You have delivered a vehicle to be scrapped, and earned $%d.", value);
				        SendClientMessage(playerid, WHITE, string);
				        playerscar = GetPlayerVehicleID(playerid);
				        SetPlayerPos(playerid, DropCarX, DropCarY, DropCarZ);
				        RemovePlayerFromVehicle(playerid);
				        SetVehicleToRespawn(playerscar);
				        Player[playerid][Checkpoint] = 0;
				        DisablePlayerCheckpoint(playerid);
				        Player[playerid][InabilityToDropCar] = 1;
				        SendClientMessage(playerid, WHITE, "You will now have to wait 30 minutes before you can scrap another car!");
				    }
			    }
			}


			for(new h = 0; h < sizeof(Jobs); h++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3.0, Jobs[h][JobMiscLocationTwoX], Jobs[h][JobMiscLocationTwoY], Jobs[h][JobMiscLocationTwoZ]))
			    {
					if(Jobs[h][JobMiscLocationTwoWorld] == GetPlayerVirtualWorld(playerid))
					{
					    if(Player[playerid][CompleteRun] == 0)
					    {
					        Player[playerid][InabilityToMatrun] = 1;
						    DisablePlayerCheckpoint(playerid);
						    Player[playerid][Materials] += 100;
						    Player[playerid][Checkpoint] = 0;
						    Player[playerid][CompleteRun] = 0;
						    Player[playerid][MaterialPackages] = 0;
						    SendClientMessage(playerid, WHITE, "You have collected 100 materials! You must wait 60 seconds before you can run again!");
	                        Player[playerid][MatrunsExecuted]++;

							switch(Player[playerid][MatrunsExecuted])
							{
							    case 100:
							    {
								    SendClientMessage(playerid, WHITE, "You have unlocked a new achievement!");
								    SendClientMessage(playerid, GREY, "You have completed 100 matruns!");
								    Player[playerid][AchievementRank]++;
							    }
							    case 200:
							    {
								    SendClientMessage(playerid, WHITE, "You have unlocked a new achievement!");
								    SendClientMessage(playerid, GREY, "You have completed 200 matruns!");
								    Player[playerid][AchievementRank]++;
							    }
							}
						}
					    else
					    {
					        if(Player[playerid][CompleteRun] < 50)
					        {
					            new string[98];
						        format(string, sizeof(string), "WARNING: %s has reached the mat-run checkpoint in %d seconds (less than 50).", GetName(playerid), Player[playerid][CompleteRun]);
						        SendToAdmins(ADMINORANGE, string, 1);
						        SendClientMessage(playerid, WHITE, "You must wait 60 seconds (minimum) before you can drop the material packages at the factory.");
						    }

					        SendClientMessage (playerid, WHITE, "You must wait 60 seconds (minimum) before you can drop the material packages at the factory.");
					    }
					}
				}
			}
		}
	}
	return 1;
}

stock SaveGroup(i)
{
	new FileName[21];
	format(FileName, sizeof(FileName), "Groups/Group_%d.ini", i);
	if(fexist(FileName))
    {
		dini_Set(FileName, "GroupName", Groups[i][GroupName]);
        dini_IntSet(FileName, "CommandTypes", Groups[i][CommandTypes]);
        dini_Set(FileName, "RankName0", Groups[i][RankName0]);
        dini_Set(FileName, "RankName1", Groups[i][RankName1]);
        dini_Set(FileName, "RankName2", Groups[i][RankName2]);
        dini_Set(FileName, "RankName3", Groups[i][RankName3]);
        dini_Set(FileName, "RankName4", Groups[i][RankName4]);
        dini_Set(FileName, "RankName5", Groups[i][RankName5]);
        dini_Set(FileName, "RankName6", Groups[i][RankName6]);
        dini_IntSet(FileName, "Skin0", Groups[i][Skin0]);
        dini_IntSet(FileName, "Skin1", Groups[i][Skin1]);
        dini_IntSet(FileName, "Skin2", Groups[i][Skin2]);
        dini_IntSet(FileName, "Skin3", Groups[i][Skin3]);
        dini_IntSet(FileName, "Skin4", Groups[i][Skin4]);
        dini_IntSet(FileName, "Skin5", Groups[i][Skin5]);
        dini_IntSet(FileName, "Skin6", Groups[i][Skin6]);
        dini_IntSet(FileName, "HQInteriorID", Groups[i][HQInteriorID]);
        dini_FloatSet(FileName, "HQInteriorX", Groups[i][HQInteriorX]);
        dini_FloatSet(FileName, "HQInteriorY", Groups[i][HQInteriorY]);
        dini_FloatSet(FileName, "HQInteriorZ", Groups[i][HQInteriorZ]);
        dini_IntSet(FileName, "HQExteriorID", Groups[i][HQExteriorID]);
        dini_FloatSet(FileName, "HQExteriorX", Groups[i][HQExteriorX]);
        dini_FloatSet(FileName, "HQExteriorY", Groups[i][HQExteriorY]);
        dini_FloatSet(FileName, "HQExteriorZ", Groups[i][HQExteriorZ]);
        dini_FloatSet(FileName, "SafeX", Groups[i][SafeX]);
        dini_FloatSet(FileName, "SafeY", Groups[i][SafeY]);
        dini_FloatSet(FileName, "SafeZ", Groups[i][SafeZ]);
        dini_IntSet(FileName, "SafeInteriorID", Groups[i][SafeInteriorID]);
        dini_IntSet(FileName, "SafeMoney", Groups[i][SafeMoney]);
        dini_IntSet(FileName, "HQLock", Groups[i][HQLock]);
        dini_IntSet(FileName, "Pot", Groups[i][SavedPot]);
        dini_IntSet(FileName, "Crack", Groups[i][SavedCrack]);
        dini_IntSet(FileName, "DisbandMinute", Groups[i][DisbandMinute]);
        dini_IntSet(FileName, "DisbandHour", Groups[i][DisbandHour]);
        dini_IntSet(FileName, "DisbandDay", Groups[i][DisbandDay]);
        dini_IntSet(FileName, "DisbandMonth", Groups[i][DisbandMonth]);
        dini_IntSet(FileName, "DisbandYear", Groups[i][DisbandYear]);
        dini_IntSet(FileName, "SafeWorld", Groups[i][SafeWorld]);
        dini_Set(FileName, "MOTD", Groups[i][MOTD]);
        
		printf("[system] Group %d saved.", i);
	}
	else
	{
	    printf("Could not execute SaveGroup(%d).", i);
	}
}

stock IsAnOwnedCar(linkid)
{
	new tmpcount;
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(Player[i][CarLinkID] == linkid) tmpcount++;
        if(Player[i][Car2LinkID] == linkid) tmpcount++;
        if(Player[i][Car3LinkID] == linkid) tmpcount++;
    }
    
    if(tmpcount >= 1)
	{
		return true;
	}
	else return false;
}

stock SaveGroups()
{
    for(new i = 0; i < MAX_GROUPS; i++)
    {
		SaveGroup(i);
    }
	return 1;
}

stock SaveJobs()
{
    new FileName[21];
    for(new i = 0; i < MAX_JOBS; i++)
    {
        format(FileName, sizeof(FileName), "Jobs/Job_%d.ini", i);
        if(fexist(FileName))
        {
            dini_Set(FileName, "JobName", Jobs[i][JobName]);
            dini_FloatSet(FileName, "JobJoinPosX", Jobs[i][JobJoinPosX]);
            dini_FloatSet(FileName, "JobJoinPosY", Jobs[i][JobJoinPosY]);
            dini_FloatSet(FileName, "JobJoinPosZ", Jobs[i][JobJoinPosZ]);
            dini_IntSet(FileName, "JobJoinPosWorld", Jobs[i][JobJoinPosWorld]);
            dini_IntSet(FileName, "JobJoinPosInterior", Jobs[i][JobJoinPosInterior]);

            dini_FloatSet(FileName, "JobMiscLocationOneX", Jobs[i][JobMiscLocationOneX]);
            dini_FloatSet(FileName, "JobMiscLocationOneY", Jobs[i][JobMiscLocationOneY]);
            dini_FloatSet(FileName, "JobMiscLocationOneZ", Jobs[i][JobMiscLocationOneZ]);
            dini_IntSet(FileName, "JobMiscLocationOneWorld", Jobs[i][JobMiscLocationOneWorld]);
            dini_IntSet(FileName, "JobMiscLocationOneInterior", Jobs[i][JobMiscLocationOneInterior]);
            dini_Set(FileName, "JobMiscLocationOneMessage", Jobs[i][JobMiscLocationOneMessage]);

            dini_FloatSet(FileName, "JobMiscLocationTwoX", Jobs[i][JobMiscLocationTwoX]);
            dini_FloatSet(FileName, "JobMiscLocationTwoY", Jobs[i][JobMiscLocationTwoY]);
            dini_FloatSet(FileName, "JobMiscLocationTwoZ", Jobs[i][JobMiscLocationTwoZ]);
            dini_IntSet(FileName, "JobMiscLocationTwoWorld", Jobs[i][JobMiscLocationTwoWorld]);
            dini_IntSet(FileName, "JobMiscLocationTwoInterior", Jobs[i][JobMiscLocationTwoInterior]);
            dini_Set(FileName, "JobMiscLocationTwoMessage", Jobs[i][JobMiscLocationTwoMessage]);

			dini_IntSet(FileName, "JobType", Jobs[i][JobType]);

			printf("[system] Job %d saved.", i);
       }
    }
	return 1;
}

stock SaveHouses()
{
    for(new i = 0; i < MAX_HOUSES; i++)
    {
		SaveHouse(i);
    }
	return 1;
}

stock SaveHouse(i)
{
    new FileName[23];
    format(FileName, sizeof(FileName), "Houses/House_%d.ini", i);
    if(fexist(FileName))
    {
		dini_IntSet(FileName, "InteriorID", Houses[i][hInteriorID]);
		dini_FloatSet(FileName, "InteriorX", Houses[i][hInteriorX]);
    	dini_FloatSet(FileName, "InteriorY", Houses[i][hInteriorY]);
		dini_FloatSet(FileName, "InteriorZ", Houses[i][hInteriorZ]);

        dini_IntSet(FileName, "HousePrice", Houses[i][HousePrice]);

        dini_IntSet(FileName, "ExteriorID", Houses[i][hExteriorID]);
        dini_FloatSet(FileName, "ExteriorX", Houses[i][hExteriorX]);
        dini_FloatSet(FileName, "ExteriorY", Houses[i][hExteriorY]);
        dini_FloatSet(FileName, "ExteriorZ", Houses[i][hExteriorZ]);

        dini_IntSet(FileName, "VaultMoney", Houses[i][VaultMoney]);
        
		dini_IntSet(FileName, "HouseCocaine", Houses[i][HouseCocaine]);
		dini_IntSet(FileName, "HousePot", Houses[i][HousePot]);
		dini_IntSet(FileName, "HouseMaterials", Houses[i][HouseMaterials]);

        dini_Set(FileName, "Owner", Houses[i][hOwner]);
        dini_IntSet(FileName, "LockStatus", Houses[i][LockStatus]);
        
        dini_IntSet(FileName, "WeaponSlot1", Houses[i][WeaponSlot1]);
        dini_IntSet(FileName, "WeaponSlot2", Houses[i][WeaponSlot2]);
        dini_IntSet(FileName, "WeaponSlot3", Houses[i][WeaponSlot3]);

		printf("[system] House %d saved.", i);
    }
	return 1;
}

stock SaveBusiness(i)
{
    new FileName[128];
    format(FileName, sizeof(FileName), "Businesses/Business_%d.ini", i);
    if(fexist(FileName))
    {
	    dini_FloatSet(FileName, "ExteriorX", Businesses[i][bExteriorX]);
        dini_FloatSet(FileName, "ExteriorY", Businesses[i][bExteriorY]);
        dini_FloatSet(FileName, "ExteriorZ", Businesses[i][bExteriorZ]);
        dini_IntSet(FileName, "ExteriorID", Businesses[i][bExteriorID]);

        dini_FloatSet(FileName, "InteriorX", Businesses[i][bInteriorX]);
        dini_FloatSet(FileName, "InteriorY", Businesses[i][bInteriorY]);
        dini_FloatSet(FileName, "InteriorZ", Businesses[i][bInteriorZ]);
        dini_IntSet(FileName, "InteriorID", Businesses[i][bInteriorID]);

        dini_IntSet(FileName, "Type", Businesses[i][bType]);
        dini_IntSet(FileName, "Vault", Businesses[i][bVault]);
        dini_IntSet(FileName, "Price", Businesses[i][bPrice]);
        dini_Set(FileName, "Owner", Businesses[i][bOwner]);

        dini_IntSet(FileName, "LockStatus", Businesses[i][bLockStatus]);
        dini_Set(FileName, "Name", Businesses[i][bName]);
        
        dini_IntSet(FileName, "Supplies", Businesses[i][bSupplies]);

		dini_IntSet(FileName, "ProductPrice1", Businesses[i][bProductPrice1]);
		dini_IntSet(FileName, "ProductPrice2", Businesses[i][bProductPrice2]);
		dini_IntSet(FileName, "ProductPrice3", Businesses[i][bProductPrice3]);
		dini_IntSet(FileName, "ProductPrice4", Businesses[i][bProductPrice4]);
		dini_IntSet(FileName, "ProductPrice5", Businesses[i][bProductPrice5]);
		dini_IntSet(FileName, "ProductPrice6", Businesses[i][bProductPrice6]);
		dini_IntSet(FileName, "ProductPrice7", Businesses[i][bProductPrice7]);
		dini_IntSet(FileName, "ProductPrice8", Businesses[i][bProductPrice8]);
		dini_IntSet(FileName, "ProductPrice9", Businesses[i][bProductPrice9]);
		dini_IntSet(FileName, "ProductPrice10", Businesses[i][bProductPrice10]);
		dini_IntSet(FileName, "ProductPrice11", Businesses[i][bProductPrice11]);
		dini_IntSet(FileName, "ProductPrice12", Businesses[i][bProductPrice12]);
		dini_IntSet(FileName, "ProductPrice13", Businesses[i][bProductPrice13]);
		dini_IntSet(FileName, "ProductPrice14", Businesses[i][bProductPrice14]);
		dini_IntSet(FileName, "SupplyStatus", Businesses[i][bSupplyStatus]);
		
		printf("[system] Business %d saved.", i);
    }
    else
    {
        printf("[system] Failed to save business %d.", i);
    }
	return 1;
}

stock SaveBusinesses()
{
    for(new i = 0; i < SpawnedBusinesses; i++)
    {
		SaveBusiness(i);
    }
	return 1;
}

public GivePlayerWeaponEx(playerid, weapon)
{
	switch(weapon)
	{
	    case 0, 1:
	    {
	        Player[playerid][WepSlot0] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 2, 3, 4, 5, 6, 7, 8, 9:
	    {
	        Player[playerid][WepSlot1] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 22, 23, 24:
	    {
	        Player[playerid][WepSlot2] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 25, 26, 27:
	    {
	        Player[playerid][WepSlot3] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 28, 29, 32:
	    {
	        Player[playerid][WepSlot4] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 30, 31:
	    {
	        Player[playerid][WepSlot5] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 33, 34:
	    {
	        Player[playerid][WepSlot6] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 35, 36, 37, 38:
	    {
	        Player[playerid][WepSlot7] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 16, 17, 18, 39:
	    {
	        Player[playerid][WepSlot8] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 41, 42, 43:
	    {
	        Player[playerid][WepSlot9] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 10, 11, 12, 13, 14, 15:
	    {
	        Player[playerid][WepSlot10] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 44, 45, 46:
	    {
	        Player[playerid][WepSlot11] = weapon;
	        GivePlayerWeapon(playerid, weapon, 99999);
	    }
	    case 40:
	    {
	        printf("[system] [error] GivePlayerWeaponEx() was unable to give weapon ID %d.", weapon);
	    }
	}
	return 1;
}

IsKeyJustDown(key, newkeys, oldkeys)
{
	if((newkeys & key) && !(oldkeys & key))  return 1;
	return 0;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if(IsKeyJustDown(KEY_FIRE, newkeys, oldkeys) && GetPlayerWeapon(playerid) == 17 && ! IsPlayerInAnyVehicle(playerid))
	{
		InitTearGas(playerid);
	}
	
	if(IsKeyJustDown(KEY_JUMP, newkeys, oldkeys) && Player[playerid][IsInAnimation] >= 1)
	{
	    if(Player[playerid][Cuffed] == 0)
	    {
			ClearAnimations(playerid);
			StopLoopingAnimation(playerid);
			Player[playerid][IsInAnimation] = 0;
			TextDrawHideForPlayer(playerid, AnimationTextDraw);
		}
		else
		{
		    TextDrawHideForPlayer(playerid, AnimationTextDraw);
		}
	}
	
	if(IsKeyJustDown(KEY_FIRE, newkeys, oldkeys) && GetPlayerWeapon(playerid) == 34 && ! IsPlayerInAnyVehicle(playerid) || IsKeyJustDown(KEY_FIRE, newkeys, oldkeys) && GetPlayerWeapon(playerid) == 35 && ! IsPlayerInAnyVehicle(playerid))
	{
		SetPlayerDrunkLevel(playerid, 30000);
		Player[playerid][SniperRecoilEffect] = 1;
	}

	if(GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DRINK_SPRUNK)
	{
	    if(IsKeyJustDown(KEY_FIRE, newkeys, oldkeys))
	    {
	        new Float: Health, HealthI;
	        GetPlayerHealth(playerid, Health);
	        HealthI = floatround(Health, floatround_ceil);
	        
	        if(HealthI < 100)
	        {
	        	SetPlayerHealth(playerid, HealthI + 5);
	        }
		}
	}
	
	if(IsKeyJustDown(KEY_SECONDARY_ATTACK, newkeys, oldkeys) && Player[playerid][HadSprunk] == 1)
	{
    	TextDrawHideForPlayer(playerid, SprunkTextDraw);
	}
	    
	if(IsKeyJustDown(KEY_CROUCH, newkeys, oldkeys))
	{
	    if(Player[playerid][PrisonDuration] >= 1)
	    {
	        SendClientMessage(playerid, WHITE, "This feature isn't available whilst you're prisoned / jailed.");
	    }
	    else
	    {
			if(IsPlayerInRangeOfPoint(playerid, 3, BankIntX, BankIntY, BankIntZ))
			{
			    SetPlayerInterior(playerid, 0);
			    TextDrawHideForPlayer(playerid, ExitTextdraw);
			    SetPlayerPos(playerid, BankExtX, BankExtY, BankExtZ);
			}

			for(new i = 0; i < sizeof(Houses); i++)
			{
			    if(GetPlayerVirtualWorld(playerid) >= 55000 && GetPlayerVirtualWorld(playerid) < 65000 && IsPlayerInRangeOfPoint(playerid, 3, Houses[i][hInteriorX], Houses[i][hInteriorY], Houses[i][hInteriorZ]))
			    {
			        if(Player[playerid][InHouse] != 0)
			        {
				        SetPlayerVirtualWorld(playerid, 0);
				        SetPlayerInterior(playerid, Houses[Player[playerid][InHouse]][hExteriorID]);
				        SetPlayerPos(playerid, Houses[Player[playerid][InHouse]][hExteriorX], Houses[Player[playerid][InHouse]][hExteriorY], Houses[Player[playerid][InHouse]][hExteriorZ]);
			            Player[playerid][InHouse] = 0;
			            TextDrawHideForPlayer(playerid, ExitTextdraw);
		            }
		            else
		            {
				        SetPlayerVirtualWorld(playerid, 0);
				        SetPlayerInterior(playerid, Houses[i][hExteriorID]);
				        SetPlayerPos(playerid, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ]);
		            }
			    }
			}

			for(new i = 0; i < sizeof(Businesses); i++)
			{
			    if(GetPlayerVirtualWorld(playerid) >= 65000 && GetPlayerVirtualWorld(playerid) < 75000 && IsPlayerInRangeOfPoint(playerid, 3, Businesses[i][bInteriorX], Businesses[i][bInteriorY], Businesses[i][bInteriorZ]))
			    {
			        if(Player[playerid][InBusiness] != 0)
			        {
				        SetPlayerVirtualWorld(playerid, 0);
				        TextDrawHideForPlayer(playerid, ExitTextdraw);
				        SetPlayerInterior(playerid, Businesses[Player[playerid][InBusiness]][bExteriorID]);
				        SetPlayerPos(playerid, Businesses[Player[playerid][InBusiness]][bExteriorX], Businesses[Player[playerid][InBusiness]][bExteriorY], Businesses[Player[playerid][InBusiness]][bExteriorZ]);
			 	        Player[playerid][InBusiness] = 0;
		 	        }
		 	        else
		 	        {
				        SetPlayerVirtualWorld(playerid, 0);
				        SetPlayerInterior(playerid, Businesses[i][bExteriorID]);
				        SetPlayerPos(playerid, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ]);
		 	        }
			    }
			}

			for(new i = 0; i < sizeof(Groups); i++)
			{
			    if(GetPlayerVirtualWorld(playerid) >= 45000 && GetPlayerVirtualWorld(playerid) < 55000 && IsPlayerInRangeOfPoint(playerid, 3, Groups[i][HQInteriorX], Groups[i][HQInteriorY], Groups[i][HQInteriorZ]))
			    {
			        if(GetPlayerInterior(playerid) == Groups[i][HQInteriorID])
			        {
			            if(Player[playerid][InGroupHQ] != 0)
			            {
			       			SetPlayerVirtualWorld(playerid, 0);
			       			TextDrawHideForPlayer(playerid, ExitTextdraw);
				        	SetPlayerInterior(playerid, Groups[Player[playerid][InGroupHQ]][HQExteriorID]);
				        	SetPlayerPos(playerid, Groups[Player[playerid][InGroupHQ]][HQExteriorX], Groups[Player[playerid][InGroupHQ]][HQExteriorY], Groups[Player[playerid][InGroupHQ]][HQExteriorZ]);
				        	Player[playerid][InGroupHQ] = 0;
			        	}
			        	else
			        	{
			       			SetPlayerVirtualWorld(playerid, 0);
				        	SetPlayerInterior(playerid, Groups[i][HQExteriorID]);
				        	SetPlayerPos(playerid, Groups[i][HQExteriorX], Groups[i][HQExteriorY], Groups[i][HQExteriorZ]);
			        	}
			        }
			    }
			}

			if(IsPlayerInRangeOfPoint(playerid, 3, BankExtX, BankExtY, BankExtZ))
			{
			    SetPlayerInterior(playerid, BankIntID);
			    SetPlayerPos(playerid, BankIntX, BankIntY, BankIntZ);
			    TextDrawShowForPlayer(playerid, ExitTextdraw);
			    SendClientMessage(playerid, WHITE, "You have entered The Bank!");
			    SendClientMessage(playerid, GREY, "Bank Commands: /bdeposit, /bwithdraw, /wiretransfer");
			}

			for(new i = 0; i < sizeof(Businesses); i++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3, Businesses[i][bExteriorX], Businesses[i][bExteriorY], Businesses[i][bExteriorZ]))
			    {
			        if(GetPlayerVirtualWorld(playerid) == 0)
			        {
			            if(Businesses[i][bLockStatus] == 0)
			            {
			        		SetPlayerVirtualWorld(playerid, 65000+i);
			        		TextDrawShowForPlayer(playerid, ExitTextdraw);
			        		SetPlayerInterior(playerid, Businesses[i][bInteriorID]);
			        		SetPlayerPos(playerid, Businesses[i][bInteriorX], Businesses[i][bInteriorY], Businesses[i][bInteriorZ]);
			        		SendClientMessage(playerid, WHITE, "You've entered a Business. Type /help to see the extra commands available in here!");
							SendClientMessage(playerid, GREY, "WARNING: Please avoid picking up interior weapons to avoid being potentially auto-banned.");
		                    Player[playerid][InBusiness] = i;
			        	}
			        	else
			        	{
			        	    SendClientMessage(playerid, WHITE, "This business is locked!");
			        	}
			        }
			    }
			}

			for(new i = 0; i < sizeof(Houses); i++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3, Houses[i][hExteriorX], Houses[i][hExteriorY], Houses[i][hExteriorZ]))
			    {
			        if(GetPlayerVirtualWorld(playerid) == 0)
			        {
			            if(Houses[i][LockStatus] == 0)
			            {
                            if(strcmp(Houses[i][hOwner], "Nobody", true) == 0)
                            {
                                SendClientMessage(playerid, WHITE, "This property is for sale!");
                            }
                            
			                Player[playerid][InHouse] = i;
			                TextDrawShowForPlayer(playerid, ExitTextdraw);
			        		SetPlayerVirtualWorld(playerid, 55000+i);
			        		SetPlayerInterior(playerid, Houses[i][hInteriorID]);
			        		SetPlayerPos(playerid, Houses[i][hInteriorX], Houses[i][hInteriorY], Houses[i][hInteriorZ]);
			        		SendClientMessage(playerid, GREY, "WARNING: Please avoid picking up interior weapons to avoid being potentially auto-banned.");
			        	}
			        	else
			        	{
			        	    SendClientMessage(playerid, WHITE, "This property is locked!");
			        	}
			        }
			    }
			}

			for(new i = 0; i < sizeof(Groups); i++)
			{
			    if(IsPlayerInRangeOfPoint(playerid, 3, Groups[i][HQExteriorX], Groups[i][HQExteriorY], Groups[i][HQExteriorZ]))
			    {
			        if(GetPlayerInterior(playerid) == Groups[i][HQExteriorID] && GetPlayerVirtualWorld(playerid) == 0)
			        {
			            if(Groups[i][HQLock] == 0)
			            {
			                Player[playerid][InGroupHQ] = i;
			       			SetPlayerVirtualWorld(playerid, 45000+i);
			       			TextDrawShowForPlayer(playerid, ExitTextdraw);
				        	SetPlayerInterior(playerid, Groups[i][HQInteriorID]);
				        	SetPlayerPos(playerid, Groups[i][HQInteriorX], Groups[i][HQInteriorY], Groups[i][HQInteriorZ]);
				        	SendClientMessage(playerid, GREY, "WARNING: Please avoid picking up interior weapons to avoid being potentially auto-banned.");
				        }
				        else
				        {
				            SendClientMessage(playerid, WHITE, "This HQ is locked!");
				        }
			        }
			    }
			}
		}
	}
	
	if(Player[playerid][BeingCalled] != -1)
	{
	    if(IsKeyJustDown(KEY_CROUCH, newkeys, oldkeys) || IsKeyJustDown(KEY_ANALOG_RIGHT, newkeys, oldkeys))
		{
		    TextDrawHideForPlayer(playerid, CellPhoneTextDraw);
		    TextDrawHideForPlayer(playerid, CellPhoneTextDrawInVehicle);
		    Player[playerid][CellphoneConsole] = Player[playerid][BeingCalled];
		    Player[Player[playerid][BeingCalled]][OnPhoneTime] = 1;
		    Player[Player[playerid][BeingCalled]][CellphoneConsole] = playerid;
		    SendClientMessage(playerid, WHITE, "You have picked up the phone.");
		    SendClientMessage(Player[playerid][BeingCalled], WHITE, "The other person has answered.");
		    Player[Player[playerid][BeingCalled]][CallConnectingTime] = -1;
		    Player[playerid][BeingCalled] = -1;
		    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USECELLPHONE);
		    Player[Player[playerid][BeingCalled]][Calling] = -1;
		}
	}
	return 1;
}

stock AntiCheatBan(playerid)
{
	new string[128], WeaponN[128];
	GetWeaponName(GetPlayerWeapon(playerid), WeaponN, sizeof(WeaponN));
	new IP[21];
	new hour, minute, second, day, year, month;
    gettime(hour, minute, second);
    getdate(year, month, day);
	GetPlayerIp(playerid, IP, sizeof(IP));
	format(string, sizeof(string), "%d/%d/%d | %d:%d | %s | %s | Weapon Hacking (%s).", day, month, year, hour, minute, IP, GetName(playerid), WeaponN);
	BanLog(string);
	format(string, sizeof(string), "Ban: %s has been auto-banned, defined reason: Weapon Hacking (%s).", GetName(playerid), WeaponN);
	SendClientMessageToAll(LIGHTRED, string);
	print(string);
	Player[playerid][Banned] = 4;
	Ban(playerid);
	return 1;
}

stock IsPlayerSpawned(playerid)
{
	new statex = GetPlayerState(playerid);
	
	if(Player[playerid][Hospitalized] != 1 && Player[playerid][Tutorial] != 1 && statex != PLAYER_STATE_NONE && statex != PLAYER_STATE_WASTED && statex != PLAYER_STATE_SPAWNED)
	{
		return true;
	}
	else
	{
		return false;
	}
}

stock ReturnWeapons(playerid, id)
{
	new string[128], WeaponName[128];
	if(Player[id][WepSlot0] > 0)
	{
	    GetWeaponName(Player[id][WepSlot0], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot1] > 0)
	{
	    GetWeaponName(Player[id][WepSlot1], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot2] > 0)
	{
	    GetWeaponName(Player[id][WepSlot2], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot3] > 0)
	{
	    GetWeaponName(Player[id][WepSlot3], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot4] > 0)
	{
	    GetWeaponName(Player[id][WepSlot4], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot5] > 0)
	{
	    GetWeaponName(Player[id][WepSlot5], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot6] > 0)
	{
	    GetWeaponName(Player[id][WepSlot6], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot7] > 0)
	{
	    GetWeaponName(Player[id][WepSlot7], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot8] > 0)
	{
	    GetWeaponName(Player[id][WepSlot8], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot9] > 0)
	{
	    GetWeaponName(Player[id][WepSlot9], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot10] > 0)
	{
	    GetWeaponName(Player[id][WepSlot10], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	if(Player[id][WepSlot11] > 0)
	{
	    GetWeaponName(Player[id][WepSlot11], WeaponName, sizeof(WeaponName));
	    format(string, sizeof(string), "- %s", WeaponName);
	    SendClientMessage(playerid, WHITE, string);
	}
	return 1;
}

encode_tires(tire1, tire2, tire3, tire4) {

	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);

}

public OnPlayerUpdate(playerid)
{
	if(IsPlayerConnectedEx(playerid))
	{
	 	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
		{
  		    for(new i=0;i<MAX_SPIKES;i++)
  		    {
		        if(VehicleToPoint(2.0, GetPlayerVehicleID(playerid), SpikeStrips[i][sX], SpikeStrips[i][sY], SpikeStrips[i][sZ]))
				{
					if(SpikeStrips[i][sX] != 0 && SpikeStrips[i][sY] != 0 && SpikeStrips[i][sZ] != 0) // Invalid check.
					{
						new panels, doors, lights, tires;
	               		GetVehicleDamageStatus(GetPlayerVehicleID(playerid), panels, doors, lights, tires);
	               		tires = encode_tires(1, 1, 1, 1);
	               		UpdateVehicleDamageStatus(GetPlayerVehicleID(playerid),  panels, doors, lights, tires);
               		}
				}
			}
		}
	    
		if(Player[playerid][BeingDraggedBy] != -1)
		{
		    if(IsPlayerConnectedEx(Player[playerid][BeingDraggedBy]))
		    {
				SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(Player[playerid][BeingDraggedBy]));
			    SetPlayerInterior(playerid, GetPlayerInterior(Player[playerid][BeingDraggedBy]));
			    GetPlayerPos(Player[playerid][BeingDraggedBy], Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ]);
			    SetPlayerPos(playerid, Player[playerid][LastX], Player[playerid][LastY], Player[playerid][LastZ]);
		    }
		    else
		    {
		        Player[playerid][BeingDraggedBy] = -1;
		        SendClientMessage(playerid, WHITE, "The person who was dragging you has disconnected.");
		    }
		}

	    if(GetPlayerMoney(playerid) != Player[playerid][Money])
	    {
	        ResetPlayerMoney(playerid);
	        GivePlayerMoney(playerid, Player[playerid][Money]);
	    }
	    
	    if(Player[playerid][Hospitalized] >= 1 || GetPlayerState(playerid) == 2)
	    {
	        SetPlayerArmedWeapon(playerid, 0);
	    }
	}
	return 1;
}

public MinutesToSeconds(minutes)
{
	return minutes*60;
}

public SecondsToMinutes(seconds)
{
	return seconds/60;
}

stock GetPlayerSpeed(playerid, get3d)
{
	new Float:x, Float:y, Float:z;
	if(IsPlayerInAnyVehicle(playerid))
	    GetVehicleVelocity(GetPlayerVehicleID(playerid), x, y, z);
	else
	    GetPlayerVelocity(playerid, x, y, z);

	return SpeedCheck(x, y, z, 100.0, get3d);
}

public OneMinutePublic()
{
    new string[128], Reports;
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(Player[i][ActiveReport] >= 1 && IsPlayerConnectedEx(i))
	    {
			Reports++;
		}
	}
	
	if(Reports >= 1)
	{
		format(string, sizeof(string), "There are %d active reports - /reports!", Reports);
		SendToAdmins(RED, string, 1);
	}
	return 1;
}

public OneSecondPublic()
{
    if(AdCanBePlaced < 50)
    {
        AdCanBePlaced++;
    }
    
    new hour, minute, second;
    gettime(hour, minute, second);
    
	if(minute >= 59 && second == 59)
	{
	    new string[26];
	    SetWorldTime(hour+1);
	    format(string, sizeof(string), "The time is now %d:00.", hour+1);
	    SendClientMessageToAll(GREY, string);
	}
	
	#pragma unused hour
	#pragma unused minute
	#pragma unused second

    for(new i = 0; i<MAX_PLAYERS; i++)
    {
        if(IsPlayerConnectedEx(i))
        {
    	    Player[i][SpamCount] = 0;

            if(Player[i][PINUnauthedTime] >= 1)
            {
                Player[i][PINUnauthedTime]++;
                if(Player[i][PINUnauthedTime] >= 10)
                {
                    if(Player[i][PINAuth] >= 1)
                    {
                        Player[i][PINUnauthedTime] = 0;
                    }
                    else
                    {
	                    new string[128];
	                    format(string, sizeof(string), "WARNING: %s has been auto-kicked, defined reason: Admin PIN Timeout (10 seconds).", GetName(i));
	                    SendToAdmins(ADMINORANGE, string, 0);
	                    SendClientMessage(i, WHITE, "You didn't login within 10 seconds.");
	                    Player[i][PINUnauthedTime] = 0;
	                    Kick(i);
                    }
                }
            }

            if(GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && Player[i][HasJetpack] == 0 && Player[i][AdminLevel] < 1)
            {
                new string[128];
                format(string, sizeof(string), "Ban: %s has been banned, defined reason: Hacking (Jetpack)", GetName(i));
                SendClientMessageToAll(LIGHTRED, string);
                Player[i][Banned] = 4;
                Ban(i);
            }
            
            if(Player[i][TearGasEffect] >= 1)
            {
                Player[i][TearGasEffect]++;
                if(Player[i][TearGasEffect] >= 5)
                {
                    Player[i][TearGasEffect] = 0;
                    ClearAnimations(i);
                    TogglePlayerControllable(i, true);
                }
            }
            
            if(Player[i][Cuffed] >= 1)
            {
            	Player[i][Cuffed]++;
				if(Player[i][Cuffed] >= 720)
				{
				    Player[i][Cuffed] = 0;
				    TogglePlayerControllable(i, true);
				    SendClientMessage(i, WHITE, "Your cuffs have now broken... RUN?!");
				}
            }
            
            if(GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerSpeed(i, 0) >= 220 && Player[i][AdminLevel] < 1)
            {
                if(! IsAHelicopter(GetPlayerVehicleID(i)))
                {
                    if(Player[i][SpeedHackWarnTime] == 0)
                    {
                        if(GetVehicleModel(GetPlayerVehicleID(i)) != 522 && GetVehicleModel(GetPlayerVehicleID(i)) != 521)
                        {
                            if(GetPlayerPing(i) < 500)
                            {
			                    new string[128];
			                    format(string, sizeof(string), "WARNING: %s may possibly be speed-hacking: they have a %d ping and are driving at %d KM/H.", GetName(i), GetPlayerPing(i), GetPlayerSpeed(i, 0));
			                    SendToAdmins(ADMINORANGE, string, 1);

								Player[i][SpeedHackWarnTime]++;
			                    Player[i][SpeedHacksWarn]++;

								if(Player[i][SpeedHacksWarn] >= MAX_SPEED_HACK_WARNINGS)
								{
								    format(string, sizeof(string), "Ban: %s has been auto-banned, reason: Speed Hacking.", GetName(i));
								    SendClientMessageToAll(LIGHTRED, string);
									Player[i][Banned] = 3;
									Ban(i);
								    Player[i][SpeedHackWarnTime] = 0;
								    Player[i][SpeedHacksWarn] = 0;
								}
							}
	                    }
                    }
                }
            }
            
            if(Player[i][ACWarnTime] >= 1)
            {
                Player[i][ACWarnTime]++;
                if(Player[i][ACWarnTime] >= 10)
                {
                    Player[i][ACWarnTime] = 0;
                    Player[i][AnticheatWarns] = 0;
                }
            }

            if(Player[i][SpeedHackWarnTime] >= 1)
            {
                Player[i][SpeedHackWarnTime]++;
                if(Player[i][SpeedHackWarnTime] >= 3)
                {
                    Player[i][SpeedHackWarnTime] = 0;
                    Player[i][SpeedHacksWarn] = 0;
                }
            }
            
            if(Player[i][SniperRecoilEffect] >= 1)
            {
                Player[i][SniperRecoilEffect]++;
                if(Player[i][SniperRecoilEffect] >= 3)
                {
                    Player[i][SniperRecoilEffect] = 0;
                    SetPlayerDrunkLevel(i, 0);
                }
            }
            
            if(IsPlayerInAnyVehicle(i) && Player[i][Speedo] == 1)
	    	{
	    	    new string[60];
				format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~ ~R~%d KM/H", GetPlayerSpeed(i, 0));
	   			GameTextForPlayer(i, string, 1000, 3);
			}

            if(Player[i][AttendingBackupCall] != -1)
            {
                if(IsPlayerConnectedEx(Player[i][AttendingBackupCall]))
                {
                    GetPlayerPos(Player[i][AttendingBackupCall], Player[Player[i][AttendingBackupCall]][LastX], Player[Player[i][AttendingBackupCall]][LastY], Player[Player[i][AttendingBackupCall]][LastZ]);
                    SetPlayerCheckpoint(i, Player[Player[i][AttendingBackupCall]][LastX], Player[Player[i][AttendingBackupCall]][LastY], Player[Player[i][AttendingBackupCall]][LastZ], 20.0);
                }
                else
                {
                    Player[i][AttendingBackupCall] = -1;
                    SendClientMessage(i, WHITE, "Checkpoint Destroyed - The backup call you were attending unexpectedly disconnected.");
                    Player[i][Checkpoint] = 0;
                    DisablePlayerCheckpoint(i);
                }
            }
            
            if(Player[i][LawyerReloadTime] >= 1)
            {
                Player[i][LawyerReloadTime]++;
                if(Player[i][LawyerReloadTime] >= LAWYER_RELOAD_TIME)
                {
                    Player[i][LawyerReloadTime] = 0;
                    SendClientMessage(i, WHITE, "You may now defend somebody again.");
                }
            }
            
            if(Player[i][ResetTimer] >= 1)
            {
                Player[i][ResetTimer]++;
                
                if(Player[i][ResetTimer] == 2)
                {
                    if(Player[i][AdminDuty] >= 1)
                    {
                    	SetPlayerSkin(i, Player[i][AdminSkin]);
                    }
                    else
                    {
                        SetPlayerSkin(i, Player[i][LastSkin]);
                    }
                    
                    TogglePlayerControllable(i, true);
                }
            }
            
            if(Player[i][Cuffed] >= 1)
            {
                TogglePlayerControllable(i, false);
            }

            if(Player[i][StonedEffect] >= 1)
            {
                Player[i][StonedEffect]++;
                
                if(Player[i][StonedEffect] >= STONED_TIME)
                {
					SetPlayerDrunkLevel(i, 0);
					SetPlayerWeather(i, GlobalWeather);

					Player[i][PotEffect] = 0;
					Player[i][StonedEffect] = 0;
					Player[i][CrackEffect] = 0;

					SendClientMessage(i, WHITE, "You are no longer stoned.");
				}
            }
            
            if(Player[i][OnPhoneTime] >= 1)
            {
                Player[i][OnPhoneTime]++;
                if(Player[i][OnPhoneTime] >= 61)
                {
                    Player[i][OnPhoneTime] = 1;
                    Player[i][PhoneCredit] -= 1;
                    
                    if(Player[i][PhoneCredit] < 2)
                    {
                        SendClientMessage(i, ADMINORANGE, "Your credit is running low!");
                        
                        if(Player[i][PhoneCredit] < 1)
                        {
                            SendClientMessage(Player[i][CellphoneConsole], WHITE, "Your call has been finished. The person you were on the phone to has ran out of phone credit.");
							Player[i][OnPhoneTime] = 0;
							Player[Player[i][CellphoneConsole]][CellphoneConsole] = -1;
							Player[i][CellphoneConsole] = -1;
							SendClientMessage(i, WHITE, "Your call has been terminated. You are out of credit. You can top up from a 24/7.");
                        }
                    }
				}
            }

            if(Spotlight != -1)
            {
                if(Player[i][Checkpoint] == 0 || Player[i][SpotlightEffect] == 1)
                {
                    if(IsPlayerConnectedEx(Spotlight))
                    {
                        new Float: StarX, Float: StarY, Float: StarZ;
                        GetPlayerPos(Spotlight, StarX, StarY, StarZ);

	                    SetPlayerCheckpoint(i, StarX, StarY, StarZ, 10.0);

	                    if(Player[i][SpotlightEffect] == 0)
	                    {
	                        Player[i][Checkpoint] = 1;
	                        Player[i][SpotlightEffect] = 1;
	                    }
                    }
                    else
                    {
                        Spotlight = -1;
	                    Player[i][Checkpoint] = 0;
	                    Player[i][SpotlightEffect] = 0;
	                    DisablePlayerCheckpoint(i);
                    }
                }
            }
            
	        Player[i][SecondsLoggedIn]++;

	        if(Player[i][CarModDelay] >= 1)
	        {
	   	    	Player[i][CarModDelay]++;

				if(Player[i][CarModDelay] == CAR_MOD_DELAY_TIME)
				{
				    Player[i][CarModDelay] = 0;
				    SendClientMessage(i, WHITE, "You may now fix, NOS or park your vehicle again.");
				}
	        }

	        if(Player[i][DetectiveCooldown] >= 1)
	        {
	            Player[i][DetectiveCooldown]++;
	            if(Player[i][DetectiveCooldown] == DETECTIVE_COOLDOWN_TIME)
	            {
	                Player[i][DetectiveCooldown] = 0;
	            }
	        }

	        if(Player[i][Tied] >= 1)
	        {
	            Player[i][TiedTime]++;
	            if(Player[i][TiedTime] >= 660)
	            {
	                TogglePlayerControllable(i, true);
	                Player[i][Tied] = 0;
	                Player[i][TiedTime] = 0;
	                SendClientMessage(i, GREY, "The rope has now broken.");
	                
	                if(Player[i][Blindfolded] >= 1)
	                {
						Player[i][Blindfolded] = 0;
						SetPlayerDrunkLevel(i, 0);
						SetCameraBehindPlayer(i);
	                }
	            }
	        }

	        if(Player[i][SecondsLoggedIn] >= 3600)
	        {
	        	new string[128], PayCheque;

	            Player[i][SecondsLoggedIn] = 0;
	            PayCheque = (Player[i][BankMoney] / 100000)*(Player[i][PlayingHours]/5)+15000+random(1000);

				if(PayCheque >= 1)
				{
		            SendClientMessage(i, ANNOUNCEMENT, "----------------------------------------------------------------------------");
					SendClientMessage(i, WHITE, "Your paycheck has arrived!");
					
					Player[i][BankMoney] += PayCheque;
                    new Taxable = (PayCheque / 100) * Tax;
                    
                    if(Taxable > 1 && Taxable < 100000)
                    {
                        Player[i][BankMoney] -= Taxable;
                        format(string, sizeof(string), "You have been charged $%s tax (%d PERCENT).", IntToFormattedStr(Taxable), Tax);
                        SendClientMessage(i, GREY, string);
                        Groups[3][SafeMoney] += Taxable;
                        SaveGroup(3);
                    }
                    
		            Player[i][PlayingHours]++;

					format(string, sizeof(string), "You have earned $%s.", IntToFormattedStr(PayCheque));
		            SendClientMessage(i, GREY, string);
		            
		            SendClientMessage(i, WHITE, "Please visit the bank to withdraw your money.");
		            SendClientMessage(i, ANNOUNCEMENT, "----------------------------------------------------------------------------");
				}
				else
				{
				    SendClientMessage(i, WHITE, "You're too poor to obtain a paycheck.");
				}
			}

		    if(Player[i][CantFish] >= 1)
		    {
		        Player[i][CantFish]++;
		        if(Player[i][CantFish] >= FISH_INABILITY_TIME)
		        {
		            Player[i][FishAttempts] = 0;
		            Player[i][CantFish] = 0;
		            SendClientMessage(i, WHITE, "You can now fish again.");
		        }
		    }
		    
		    if(Player[i][CompleteRun] >= 1)
		    {
		        Player[i][CompleteRun]++;
		        if(Player[i][CompleteRun] >= 55)
		        {
		            Player[i][CompleteRun] = 0;
		        }
		    }

			if(Spectator[i][SpecSpectatingPlayer] > -1)
			{
				SpectatorRefresh(i, Spectator[i][SpecSpectatingPlayer]);
			}

			if(Player[i][BeingCalled] != -1)
			{
			    new string[128];
				if(Player[Player[i][BeingCalled]][CallConnectingTime] != -1)
				{
				    Player[Player[i][BeingCalled]][CallConnectingTime] = 1;
				}
				else
				{
				    switch(Player[Player[i][BeingCalled]][CallConnectingTime])
				    {
				        case 3, 6, 9:
				        {
				            format(string, sizeof(string), "* %s's phone proceeds to ring...");
				            NearByMessage(i, NICESKY, string);
				            TextDrawShowForPlayer(i, CellPhoneTextDraw);
				        }
				        case 10:
				        {
				            Player[Player[i][BeingCalled]][CallConnectingTime] = -1;
				            Player[Player[i][BeingCalled]][Calling] = -1;
				            Player[i][BeingCalled] = -1;
                			TextDrawHideForPlayer(i, CellPhoneTextDraw);
				        }
				    }
				}
			}

			if(Player[i][InabilityToDropCar] >= 1)
			{
			    Player[i][InabilityToDropCar]++;
			    if(Player[i][InabilityToDropCar] >= 1800)
			    {
			        Player[i][InabilityToDropCar] = 0;
			        SendClientMessage(i, WHITE, "You can now scrap cars again.");
			    }
			}

			if(Player[i][InabilityToMatrun] >= 1)
			{
			    Player[i][MatrunInabilityDuration]++;
			    if(Player[i][MatrunInabilityDuration] >= MATRUN_INABILITY_TIME)
			    {
			        Player[i][InabilityToMatrun] = 0;
			        Player[i][MatrunInabilityDuration] = 0;
			        SendClientMessage(i, WHITE, "You can now matrun again.");
			    }
			}

	        if(Player[i][Hospitalized] >= 1 && Player[i][PrisonDuration] < 1 && Player[i][AdminDuty] == 0)
	        {
				Player[i][HospitalTime]++;

				if(Player[i][HospitalTime] >= 11)
				{
				    new randtmp = RandomEx(1, 11);
				    if(randtmp >= 6)
				    {
					    Player[i][Hospitalized] = 0;
					    Player[i][HospitalTime] = 0;
					    SetPlayerPos(i, HospitalSpawnX2, HospitalSpawnY2, HospitalSpawnZ2);
					    SetCameraBehindPlayer(i);
					    Player[i][Money] -= 1000;
					    SetPlayerColor(i, WHITE);
					    SetPlayerHealth(i, 100);
					    SetPlayerDrunkLevel(i, 0);
					    Player[i][Muted] = 0;
					    TogglePlayerControllable(i, true);
					    SendClientMessage(i, ANNOUNCEMENT, "You have been released from Hospital.");
					    SendClientMessage(i, WHITE, "You have been charged $1,000 as your medical bill. Be more careful in the future!");
					    SendClientMessage(i, WHITE, "((You have lost 30 minutes memory due to your death, to prevent RKing.)) ");
	                    Player[i][ResetTimer] = 1;
	                    SetPlayerVirtualWorld(i, 0);
	                    SetPlayerInterior(i, 0);
				    }
				    else
				    {
					    Player[i][Hospitalized] = 0;
					    Player[i][HospitalTime] = 0;
					    SetPlayerPos(i, HospitalSpawnX, HospitalSpawnY, HospitalSpawnZ);
					    SetCameraBehindPlayer(i);
					    Player[i][Money] -= 1000;
					    SetPlayerColor(i, WHITE);
					    SetPlayerHealth(i, 100);
					    SetPlayerDrunkLevel(i, 0);
					    Player[i][Muted] = 0;
					    TogglePlayerControllable(i, true);
					    SendClientMessage(i, ANNOUNCEMENT, "You have been released from Hospital.");
					    SendClientMessage(i, WHITE, "You have been charged $1,000 as your medical bill. Be more careful in the future!");
					    SendClientMessage(i, WHITE, "((You have lost 30 minutes memory due to your death, to prevent RKing.)) ");
	                    Player[i][ResetTimer] = 1;
	                    SetPlayerVirtualWorld(i, 0);
	                    SetPlayerInterior(i, 0);
                    }
				}
	        }

			if(Player[i][PrisonID] >= 1)
			{
		    	if(Player[i][PrisonDuration] >= 1)
		    	{
		    	    new string[128];
		        	Player[i][PrisonDuration]--;
					format(string, sizeof(string), "~n~~n~~n~~n~~n~~n~~n~ ~R~%d seconds (%d minutes)", Player[i][PrisonDuration], SecondsToMinutes(Player[i][PrisonDuration]));
	   				GameTextForPlayer(i, string, 1000, 3);
		    	}
		    	else
		    	{
		    	    if(Player[i][PrisonID] == 1)
		    	    {
			        	Player[i][PrisonDuration] = 0;
			        	Player[i][PrisonID] = 0;
			        	SetPlayerPos(i, Groups[1][HQExteriorX], Groups[1][HQExteriorY], Groups[1][HQExteriorZ]);
			        	SetPlayerVirtualWorld(i, SpawnWorld);
			        	SetPlayerInterior(i, Groups[1][HQExteriorID]);
			        	SendClientMessage(i, WHITE, "You have been released from jail.");
			        	TogglePlayerControllable(i, true);
		    	    }
		    	    else
		    	    {
			        	Player[i][PrisonDuration] = 0;
			        	Player[i][PrisonID] = 0;
			        	SetPlayerPos(i, SpawnX, SpawnY, SpawnZ);
			        	SetPlayerVirtualWorld(i, SpawnWorld);
			        	SetPlayerInterior(i, SpawnInt);
			        	SendClientMessage(i, WHITE, "You have been released from prison.");
			        	TogglePlayerControllable(i, true);
		        	}
		    	}
			}
	    }
	}
	return 1;
}

stock IsPlayerConnectedEx(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(Player[playerid][Authenticated] == 1)
	    {
	        return 1;
	    }
	    else
	    {
	        return 0;
	    }
	}
	else
	{
		return 0;
	}
}

public OnEnterExitModShop(playerid, enterexit, interiorid)
{
	if(enterexit == 0)
	{
		SetPlayerInterior(playerid, 0);
		Player[playerid][ModShop] = 0;
	}
	else if(enterexit == 1)
	{
	    Player[playerid][ModShop] = 1;
	}
	
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
	return 1;
}

stock VehicleToPoint(Float:radi, vehicleid, Float:x, Float:y, Float:z)
{
	new Float:oldposx, Float:oldposy, Float:oldposz;
	new Float:tempposx, Float:tempposy, Float:tempposz;
	GetVehiclePos(vehicleid, oldposx, oldposy, oldposz);
	tempposx = (oldposx -x);
	tempposy = (oldposy -y);
	tempposz = (oldposz -z);
	if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi)))
	{
		return 1;
	}
	return 0;
}

public OnPlayerStreamOut(playerid, forplayerid)
{
	return 1;
}

public MinutesToHours(minutes)
{
	return minutes / 60;
}

public IdleKick()
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(IsPlayerConnected(i))
		{
			GetPlayerPos(i, PlayerPos[i][0], PlayerPos[i][1], PlayerPos[i][2]);

			if(PlayerPos[i][0] == PlayerPos[i][3] && PlayerPos[i][1] == PlayerPos[i][4] && PlayerPos[i][2] == PlayerPos[i][5])
			{
			    if(Player[i][Authenticated] == 1)
			    {
			        if(Player[i][AdminDuty] >= 1)
			        {
			            new string[128];
			            Player[i][AFKStat] = 1;
			            SendClientMessage(i, WHITE, "Your status has been changed to AFK.");
			            format(string, sizeof(string), "%s has been set to 'AFK' (system deemed inactivity).", GetName(i));
			            SendToAdmins(ADMINORANGE, string, 0);
			        }
			        else
			        {
			            if(Player[i][PlayerCarModel] >= 1)
			            {
			                DestroyVehicle(Player[i][CarLinkID]);
			                Player[i][CarLinkID] = 0;
			                OwnedCarCount--;
			                CarCount--;
			            }
			            
			            if(Player[i][PlayerCarModel2] >= 1)
			            {
			                DestroyVehicle(Player[i][Car2LinkID]);
			                Player[i][Car2LinkID] = 0;
			                OwnedCarCount--;
			                CarCount--;
			            }
			            
			            if(Player[i][PlayerCarModel3] >= 1)
			            {
			                DestroyVehicle(Player[i][Car3LinkID]);
			                Player[i][Car3LinkID] = 0;
			                OwnedCarCount--;
			                CarCount--;
			            }
			            
						SavePlayerData(i);
						Player[i][Authenticated] = 0;
						Reset(i);
						TogglePlayerControllable(i, false);
						SetPlayerPos(i, SpawnX, SpawnY - 5, SpawnZ);
						SetPlayerColor(i, GREY);
						ShowPlayerDialog(i, 3894, DIALOG_STYLE_INPUT, "Authentication", "You were logged out automatically, whilst you were AFK. Please log back in to resume to playing!", "Login", "Cancel");
					}
				}
			}

			PlayerPos[i][3] = PlayerPos[i][0];
			PlayerPos[i][4] = PlayerPos[i][1];
			PlayerPos[i][5] = PlayerPos[i][2];
		}
	}
}

public OnVehicleStreamIn(vehicleid, forplayerid)
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
	    if(Player[i][CarLinkID] == vehicleid)
	    {
	        if(Player[i][LockedCar] == 1)
	        {
	            for(new u = 0; u < MAX_PLAYERS; u++)
	            {
		            SetVehicleParamsForPlayer(vehicleid, u, 0, Player[i][LockedCar]);
				}
			}
	    }
	    
	    if(Player[i][Car2LinkID] == vehicleid)
	    {
	        if(Player[i][LockedCar2] == 1)
	        {
	            for(new u = 0; u < MAX_PLAYERS; u++)
	            {
		            SetVehicleParamsForPlayer(vehicleid, u, 0, Player[i][LockedCar2]);
				}
			}
	    }
	    
	    if(Player[i][Car3LinkID] == vehicleid)
	    {
	        if(Player[i][LockedCar3] == 1)
	        {
	            for(new u = 0; u < MAX_PLAYERS; u++)
	            {
		            SetVehicleParamsForPlayer(vehicleid, u, 0, Player[i][LockedCar3]);
				}
			}
	    }
	}
	return 1;
}

stock ApplyAnimationEx(playerid, animlib[], animname[], Float:fS, opt1, opt2, opt3, opt4, opt5)
{
	if(IsPlayerInAnyVehicle(playerid))
	{
	    SendClientMessage(playerid, WHITE, "You can't use animations whilst in a vehicle.");
	}
	else
	{
	    if(opt1 == 1)
	    {
		    TextDrawShowForPlayer(playerid, AnimationTextDraw);
		    Player[playerid][IsInAnimation] = 1;
		    ApplyAnimation(playerid, animlib, animname, fS, opt1, opt2, opt3, opt4, opt5);
	    }
	    else
	    {
	        ApplyAnimation(playerid, animlib, animname, fS, opt1, opt2, opt3, opt4, opt5);
	    }
    }
    return 1;
}

stock UpdateAnalysis()
{
	if(fexist("VisitorAnalysis.ini"))
	{
	    dini_IntSet("VisitorAnalysis.ini", "MaxVisitors", MaxVisitors);
	    dini_IntSet("VisitorAnalysis.ini", "MaxRegistered", MaxRegistered);
	    dini_IntSet("VisitorAnalysis.ini", "MaxLoggedIn", MaxLoggedIn);
		dini_IntSet("VisitorAnalysis.ini", "TotalConnections", TotalConnections);
	}
	else
	{
	    dini_Create("VisitorAnalysis.ini");
	    dini_IntSet("VisitorAnalysis.ini", "MaxVisitors", 0);
	    dini_IntSet("VisitorAnalysis.ini", "MaxRegistered", 0);
	    dini_IntSet("VisitorAnalysis.ini", "MaxLoggedIn", 0);
		dini_IntSet("VisitorAnalysis.ini", "TotalConnections", 0);
	}
	return 1;
}

stock StripNewLine(string[])
{
	new len = strlen(string);
	if (string[0]==0) return ;
	if ((string[len - 1] == '\n') || (string[len - 1] == '\r'))  {
		string[len - 1] = 0;
		if (string[0]==0) return ;
		if ((string[len - 2] == '\n') || (string[len - 2] == '\r'))  string[len - 2] = 0;
	}
}

public QuizText(string[])
{
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(Player[i][ToggedQUIZ] == 0)
        {
            SendClientMessage(i, LIGHTRED, string);
		}
    }
}

public OnVehicleStreamOut(vehicleid, forplayerid)
{
	return 1;
}

stock IntToFormattedStr(integer)
{
	new value[20], string[20];

	valstr(value, integer);

	new charcount;

	for(new i = strlen(value); i >= 0; i --)
	{
		format(string, sizeof(string), "%c%s", value[i], string);
		if(charcount == 3)
		{
			if(i != 0)
				format(string, sizeof(string), ",%s", string);
			charcount = 0;
		}
		charcount ++;
	}

	return string;
}

/*stock file_actually_exists(filename[])
{
	new tmpstr[255];
	tmpstr = "test";
	
	if(! file_read(filename, tmpstr))
	{
	    #pragma unused tmpstr
	    return false;
	}
	else
	{
	    #pragma unused tmpstr
	    return true;
	}
}*/

stock PlayerFacePlayer(playerid, targetplayerid)
{
	new Float: Angle;
	GetPlayerFacingAngle(playerid, Angle);
	SetPlayerFacingAngle(targetplayerid, Angle+180);
	return true;
}

stock InitTearGas(playerid)
{
	new Float: TmpFloatX, Float: TmpFloatY, Float: TmpFloatZ;
	
	GetPlayerPos(playerid, TmpFloatX, TmpFloatY, TmpFloatZ);
	
    for(new i = 0; i < MAX_PLAYERS; i++)
    {
        if(GetPlayerSkin(i) != 285)
        {
	        if(IsPlayerInRangeOfPoint(i, 10.0, TmpFloatX, TmpFloatY, TmpFloatZ))
	        {
	            if(Player[i][TearGasEffect] < 1)
	            {
	                if(! IsPlayerInAnyVehicle(i))
	                {
	                    ApplyAnimation(i, "FAT", "IDLE_TIRED", 4.1, 1, 1, 1, 1, 0);
		                TogglePlayerControllable(i, false);
			            Player[i][TearGasEffect] = 1;
		            }
	            }
	        }
        }
    }
    return 1;
}

StopLoopingAnimation(playerid)
{
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}
